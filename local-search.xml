<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在 Azure 上建立 MongoDB 資料庫，並進行連線</title>
    <link href="/articles/azure-create-cosmos-db-for-mongodb/"/>
    <url>/articles/azure-create-cosmos-db-for-mongodb/</url>
    
    <content type="html"><![CDATA[<p>在軟體開發時，我們會搭配資料庫來儲存資料。以前的傳統做法是下載安裝程式，在電腦上安裝。後來也可選擇利用 Docker，下載 image 並運行 container。</p><p>但這兩個方法，都必須準備一台電腦作為伺服器。若能放上雲端服務，便能減少伺服器的管理工作。</p><p>本文介紹如何在 Azure 上建立 MongoDB 資料庫，並分別在 NoSQLBooster 這款 GUI 工具，以及 Spring Boot 後端程式來連線。</p><hr><h2 id="一、建立資料庫"><a href="#一、建立資料庫" class="headerlink" title="一、建立資料庫"></a>一、建立資料庫</h2><p>Azure 推出的「Cosmos DB」是一種資料庫服務，它提供了 MongoDB 的 API，讓我們可以用原本操作 MongoDB 的方式來存取。</p><p>首先在 Azure 上搜尋「Azure Cosmos DB for MongoDB (vCore)」。進入頁面後，點擊建立。<br><img src="https://chikuwacode.github.io/articles/azure-create-cosmos-db-for-mongodb/azure-mongodb-list.png"></p><p>以下是筆者選擇的設定，並提供 MongoDB 的帳號與密碼。其餘則使用預設值，讀者可視自己的情況調整。</p><ul><li>叢集名稱：vincentdemomongodb</li><li>免費層級：打勾，免費使用基本功能</li><li>位置：South India（目前只有這個能選）</li><li>MongoDB 版本：7.0</li><li>管理使用者名稱：vincent</li></ul><img src="https://chikuwacode.github.io/articles/azure-create-cosmos-db-for-mongodb/azure-mongodb-basic-setting.png"><p>接著切換到「網路」頁籤，設定防火牆規則。設定的目的，是開放哪些 IP 可以連線到這台資料庫。<br><img src="https://chikuwacode.github.io/articles/azure-create-cosmos-db-for-mongodb/azure-mongodb-firewall-rule-setting.png"></p><p>本文為了測試用途，只簡單地選擇「Add 0.0.0.0 - 255.255.255.255」，代表網路上的所有 IP 都可以連進來。此時 Azure 會跳出安全性的警告，我們點擊繼續即可。</p><p>最後並按下「檢閱 + 建立」。確認設定後，再按下「建立」，等待 Azure 部署完成。<br><img src="https://chikuwacode.github.io/articles/azure-create-cosmos-db-for-mongodb/azure-mongodb-review-and-create.png"></p><h2 id="二、基本管理"><a href="#二、基本管理" class="headerlink" title="二、基本管理"></a>二、基本管理</h2><h3 id="（一）查看資訊"><a href="#（一）查看資訊" class="headerlink" title="（一）查看資訊"></a>（一）查看資訊</h3><p>前往資源畫面，在「概觀」能看見基本資訊，包含叢集名稱、管理員名稱等。<br><img src="https://chikuwacode.github.io/articles/azure-create-cosmos-db-for-mongodb/azure-mongodb-overview.png"></p><h3 id="（二）可存取的-IP"><a href="#（二）可存取的-IP" class="headerlink" title="（二）可存取的 IP"></a>（二）可存取的 IP</h3><p>在「設定」→「網路」的畫面，可找到建立資料庫時所設定的防火牆規則。若日後想更改，可在此進行設定。<br><img src="https://chikuwacode.github.io/articles/azure-create-cosmos-db-for-mongodb/azure-mongodb-firewall-rule-setting-2.png"></p><h3 id="（三）備份與還原"><a href="#（三）備份與還原" class="headerlink" title="（三）備份與還原"></a>（三）備份與還原</h3><p>我們可下載 Mongo DB 的<a href="https://www.mongodb.com/try/download/database-tools">資料庫工具</a>（database tools），在 command line 環境使用指令，進行備份與還原。</p><p>備份時，需使用「mongodump」指令：</p><div class="code-wrapper"><pre><code class="hljs sh">mongodump --uri=<span class="hljs-string">&quot;mongodb+srv://&lt;username&gt;:&lt;password&gt;@vincentdemomongodb.mongocluster.cosmos.azure.com/&lt;database&gt;?tls=true&amp;authMechanism=SCRAM-SHA-256&quot;</span> --out=<span class="hljs-string">&quot;&lt;path&gt;&quot;</span></code></pre></div><p>請在 URI 提供連線字串。</p><ul><li>username：管理使用者名稱，如本文的「vincent」</li><li>password：密碼</li><li>database：要備份的資料庫名稱，如 MongoDB 會內建一個資料庫叫「test」</li></ul><p>而「out」參數可提供備份檔的儲存位置，如「.\backup」。</p><p>還原時，需使用「mongorestore」指令：</p><div class="code-wrapper"><pre><code class="hljs sh">mongorestore --uri=<span class="hljs-string">&quot;mongodb+srv://&lt;username&gt;:&lt;password&gt;@vincentdemomongodb.mongocluster.cosmos.azure.com/&lt;database&gt;?tls=true&amp;authMechanism=SCRAM-SHA-256&quot;</span> <span class="hljs-string">&quot;&lt;path&gt;&quot;</span></code></pre></div><p>同樣需在 URI 提供連線字串，其中包含要還原到的資料庫。</p><p>而最後一個參數為備份檔的來源路徑。延續本文範例，此處的值將會是「.\backup\test」。</p><h2 id="三、在-NoSQLBooster-連線"><a href="#三、在-NoSQLBooster-連線" class="headerlink" title="三、在 NoSQLBooster 連線"></a>三、在 NoSQLBooster 連線</h2><p>本節讓我們使用 <a href="https://nosqlbooster.com/">NoSQLBooster</a> 這款 GUI 工具，連線到 Azure 上建立好的 Mongo DB 資料庫。</p><p>在「設定」→「連接字串」的畫面，可找到應用程式要連結到 MongoDB 的連接字串，它是由叢集名稱和 Azure 的網域所組成。請讀者先複製起來。<br><img src="https://chikuwacode.github.io/articles/azure-create-cosmos-db-for-mongodb/azure-mongodb-connection-string.png"></p><p>在 NoSQLBooster 建立新連線的視窗中，請點擊「From URI」，並貼上剛剛的連線字串，別忘了將「<code>&lt;password&gt;</code>」字眼替換成自己的密碼。<br><img src="https://chikuwacode.github.io/articles/azure-create-cosmos-db-for-mongodb/azure-mongodb-nosqlbooster-from-uri.png"></p><p>接著可點擊「Test Connection」，進行測試。最後為連線取名，建立完成後，便能連上。<br><img src="https://chikuwacode.github.io/articles/azure-create-cosmos-db-for-mongodb/azure-mongodb-nosqlbooster-open-connections.png"></p><p>裡面預設會有一個叫做「test」的資料庫。</p><h2 id="四、在-Spring-Boot-連線"><a href="#四、在-Spring-Boot-連線" class="headerlink" title="四、在 Spring Boot 連線"></a>四、在 Spring Boot 連線</h2><p>本節讓我們在 Spring Boot 後端程式中，針對 Azure 上的 MongoDB 進行配置。</p><p>首先在 pom.xml 檔案中，添加 Spring Data MongoDB 的依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>接著在 application.properties 檔案中，提供連線字串。它是從 Azure 上的「設定」→「連接字串」畫面所取得。別忘了將「<code>&lt;password&gt;</code>」的字替換成自己的密碼。</p><div class="code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">spring.data.mongodb.uri</span>=mongodb+srv://vincent:&lt;password&gt;@vincentdemomongodb.mongocluster.cosmos.azure.com/?tls=<span class="hljs-literal">true</span>&amp;authMechanism=SCRAM-SHA-<span class="hljs-number">256</span>&amp;retrywrites=<span class="hljs-literal">false</span>&amp;maxIdleTimeMS=<span class="hljs-number">120000</span><span class="hljs-attr">spring.data.mongodb.database</span>=test</code></pre></div><p>完成後，啟動 Spring Boot 程式。若 console 沒有出現錯誤訊息，代表成功連線。</p>]]></content>
    
    
    <categories>
      
      <category>Azure</category>
      
      <category>MongoDB</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>在 Azure 上建立 MySQL 資料庫，並進行連線</title>
    <link href="/articles/azure-create-mysql-flexible-server/"/>
    <url>/articles/azure-create-mysql-flexible-server/</url>
    
    <content type="html"><![CDATA[<p>在軟體開發時，我們會搭配資料庫來儲存資料。以前的傳統做法是下載安裝程式，在電腦上安裝。後來也可選擇利用 Docker，下載 image 並運行 container。</p><p>但這兩個方法，都必須準備一台電腦作為伺服器。若能放上雲端服務，便能減少伺服器的管理工作。</p><p>本文介紹如何在 Azure 上建立 MySQL 資料庫，並分別在 Workbench 這款 GUI 工具，以及 Spring Boot 後端程式來連線。</p><hr><h2 id="一、建立資料庫"><a href="#一、建立資料庫" class="headerlink" title="一、建立資料庫"></a>一、建立資料庫</h2><p>首先在 Azure 上搜尋「適用於 MySQL 彈性伺服器的 Azure 資料庫」。進入頁面後，點擊建立。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-list.png"></p><p>選擇「彈性伺服器」的「進階建立」，可看到比較多的設定選項。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-choose-flexible-server.png"></p><p>以下是筆者選擇的設定，並提供 MySQL 的帳號與密碼。其餘則使用預設值，讀者可視自己的情況調整。</p><ul><li>伺服器名稱：vincentdemomysql</li><li>區域：East Asia</li><li>MySQL 版本：8.0</li><li>工作負載類型：適用於開發或嗜好專案</li><li>驗證方法：只有 MySQL 驗證</li><li>管理使用者名稱：vincent</li></ul><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-basic-setting.png"><p>接著切換到「網路」頁籤，設定防火牆規則。設定的目的，是開放哪些 IP 可以連線到這台資料庫。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-firewall-rule-setting.png"></p><p>本文為了測試用途，只簡單地選擇「新增 0.0.0.0 - 255.255.255.255」，代表網路上的所有 IP 都可以連進來。此時 Azure 會跳出安全性的警告，我們點擊繼續即可。</p><p>最後並按下「檢閱 + 建立」。確認設定後，再按下「建立」，等待 Azure 部署完成。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-review-and-create.png"></p><p>雖然 Azure 會顯示 MySQL 彈性伺服器的預估使用成本，但<a href="https://learn.microsoft.com/zh-tw/azure/mysql/flexible-server/how-to-deploy-on-azure-free-account">官方說明</a>有提到，只要使用免費帳戶，且使用量在每月限制內，就不需要支付費用。</p><h2 id="二、基本管理"><a href="#二、基本管理" class="headerlink" title="二、基本管理"></a>二、基本管理</h2><p>前往 MySQL 的資源畫面，在「概觀」能看見基本資訊，包含伺服器名稱、管理員名稱等。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-overview.png"></p><p>在「設定」→「資料庫」的畫面，可建立與刪除資料庫。此處筆者建立一個叫「demo」的資料庫。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-create-database.png"></p><p>在「設定」→「備份與還原」的畫面，可確認資料庫的備份及其時間點。Azure 每天會自動備份一次，我們也可手動立即備份。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-backup.png"></p><p>在「設定」→「網路」的畫面，可找到建立資料庫時所設定的防火牆規則。若日後想更改，可在此進行設定。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-firewall-rule-setting-2.png"></p><p>在「設定」→「連線」的畫面，可看見關於連線至資料庫的相關說明。例如從本機的 command line 使用 MySQL 指令進行連線、匯入與匯出資料。另外也有使用 Workbench 進行連線的步驟。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-connection.png"></p><h2 id="三、在-Workbench-連線"><a href="#三、在-Workbench-連線" class="headerlink" title="三、在 Workbench 連線"></a>三、在 Workbench 連線</h2><p>本節讓我們使用 <a href="https://dev.mysql.com/downloads/workbench/">Workbench</a> 這款 GUI 工具，連線到 Azure 上建立好的 MySQL 資料庫。</p><p>在建立新連線的視窗中，請於 Hostname 填寫第二節在「概觀」中看到的伺服器名稱。在 Username 填寫伺服器系統管理員登入名稱。而 Password 則點擊「Store in Valut」後，再填寫密碼。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/azure-mysql-workbench-setup-new-connection.png"></p><p>接著可點擊「Test Connection」，進行測試。最後建立完成後，點擊該連線便可進入。</p><p>進入後，讀者就能在左方看見先前建立的「demo」資料庫。<br><img src="https://chikuwacode.github.io/articles/azure-create-mysql-flexible-server/mysql-workbench-schema-list.png"></p><p>後續也能順利進行 CRUD 操作。</p><h2 id="四、在-Spring-Boot-連線"><a href="#四、在-Spring-Boot-連線" class="headerlink" title="四、在 Spring Boot 連線"></a>四、在 Spring Boot 連線</h2><p>本節讓我們在 Spring Boot 後端程式中，針對 Azure 上的 MySQL 資料庫進行配置。</p><p>首先在 pom.xml 檔案中，添加依賴，包含 Spring Data JPA 框架和 MySQL 驅動程式。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>接著在 application.properties 檔案中，提供 Spring Data JPA 的相關配置。</p><div class="code-wrapper"><pre><code class="hljs stylus">spring<span class="hljs-selector-class">.datasource</span>.url=jdbc:mysql:<span class="hljs-comment">//vincentdemomysql.mysql.database.azure.com:3306/demo</span>spring<span class="hljs-selector-class">.datasource</span>.username=vincentspring<span class="hljs-selector-class">.datasource</span>.password=your_passwordspring<span class="hljs-selector-class">.datasource</span>.driver-class-name=com<span class="hljs-selector-class">.mysql</span><span class="hljs-selector-class">.cj</span><span class="hljs-selector-class">.jdbc</span><span class="hljs-selector-class">.Driver</span>spring<span class="hljs-selector-class">.jpa</span><span class="hljs-selector-class">.properties</span><span class="hljs-selector-class">.hibernate</span>.dialect=org<span class="hljs-selector-class">.hibernate</span><span class="hljs-selector-class">.dialect</span><span class="hljs-selector-class">.MySQLDialect</span>spring<span class="hljs-selector-class">.jpa</span><span class="hljs-selector-class">.properties</span><span class="hljs-selector-class">.hibernate</span>.dialect_version=<span class="hljs-number">8</span>spring<span class="hljs-selector-class">.jpa</span><span class="hljs-selector-class">.properties</span><span class="hljs-selector-class">.hibernate</span><span class="hljs-selector-class">.dialect</span>.storage_engine=innodbspring<span class="hljs-selector-class">.jpa</span><span class="hljs-selector-class">.hibernate</span>.ddl-auto=updatespring<span class="hljs-selector-class">.jpa</span><span class="hljs-selector-class">.properties</span><span class="hljs-selector-class">.hibernate</span>.show_sql=truespring<span class="hljs-selector-class">.jpa</span><span class="hljs-selector-class">.properties</span><span class="hljs-selector-class">.hibernate</span>.format_sql=true</code></pre></div><p>由於本文是介紹連線到 Azure 上的資料庫，因此請讀者留意前三項配置，也就是連線字串中的伺服器名稱、資料庫名稱，以及帳密。</p><p>完成後，啟動 Spring Boot 程式。若 console 沒有出現錯誤訊息，代表成功連線。</p><p>後續也能使用 Spring Data JPA 提供的注解（annotation），進行資料表設計。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-meta">@Column(name = &quot;name&quot;, length = 30, unique = true, nullable = false)</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-meta">@Column(name = &quot;grade&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> grade;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>重新啟動 Spring Boot 後，讀者可回到 Workbench 確認產生後的資料表。</p>]]></content>
    
    
    <categories>
      
      <category>Azure</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第9.6課－使用 JPA 建立多對多關聯，並配置中間表</title>
    <link href="/articles/spring-boot-jpa-many-to-many-relationship-and-intermediary-table/"/>
    <url>/articles/spring-boot-jpa-many-to-many-relationship-and-intermediary-table/</url>
    
    <content type="html"><![CDATA[<p>在上一篇，已經示範過如何建立一對多關聯。本文將進一步以「學生」選修「課程」為情境，建立多對多關聯，並撰寫 RESTful API 進行測試。</p><p>過程中也會介紹多對多關聯特有的「中間表」，並說明如何正確地操作，才能讓 JPA 在中間表維護雙方的關聯。最後配置雙向關聯，站在不同的角度，查詢另一方的資料。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch09.5-jpa-one-to-many-relationship-and-bidirectional-association">點我</a>。</p><h2 id="一、程式專案準備"><a href="#一、程式專案準備" class="headerlink" title="一、程式專案準備"></a>一、程式專案準備</h2><h3 id="（一）實體類別介紹"><a href="#（一）實體類別介紹" class="headerlink" title="（一）實體類別介紹"></a>（一）實體類別介紹</h3><p>以下的「Student」類別，描述了學生資料，包含 id、名字、聯繫方式與科系，共 4 個欄位。其中聯繫方式與科系是來自前面文章的示範，本文盡量不提及。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-meta">@OneToOne(fetch = FetchType.LAZY, cascade = &#123;CascadeType.PERSIST, CascadeType.REMOVE&#125;)</span>    <span class="hljs-meta">@JoinColumn(name = &quot;contact_id&quot;, referencedColumnName = &quot;id&quot;, nullable = false, unique = true)</span>    <span class="hljs-keyword">private</span> Contact contact;    <span class="hljs-meta">@ManyToOne(fetch = FetchType.LAZY, cascade = &#123;CascadeType.PERSIST&#125;)</span>    <span class="hljs-meta">@JoinColumn(name = &quot;dept_id&quot;, referencedColumnName = &quot;id&quot;, nullable = false)</span>    <span class="hljs-keyword">private</span> Department department;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的「Course」類別，描述了課程，包含 id 與名稱這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;course&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>由於 Course 也是要儲存到資料庫的實體類別，因此需準備 repository。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CourseRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Course, Long&gt; &#123;&#125;</code></pre></div><h3 id="（二）準備測試資料"><a href="#（二）準備測試資料" class="headerlink" title="（二）準備測試資料"></a>（二）準備測試資料</h3><p>定義好實體類別後，讀者可啟動程式，讓 Spring Data JPA 建立 table。</p><p>若有需要，可執行以下 SQL 指令，建立課程的測試資料。畢竟使用情境中，必定是先有課程，才會有學生來選修。</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `course` (`name`)<span class="hljs-keyword">VALUES</span> (&quot;資料庫管理&quot;), (&quot;投資學&quot;), (&quot;審計學&quot;);</code></pre></div><h2 id="二、設計多對多關聯"><a href="#二、設計多對多關聯" class="headerlink" title="二、設計多對多關聯"></a>二、設計多對多關聯</h2><h3 id="（一）設計方式"><a href="#（一）設計方式" class="headerlink" title="（一）設計方式"></a>（一）設計方式</h3><p>首先複習一下先前文章介紹的關聯。</p><ul><li>一對一關聯：每位學生擁有一組聯繫方式，每組聯繫方式只有一位擁有者。</li><li>一對多關聯：每個科系有多位學生就讀，每位學生只能就讀一個科系。</li></ul><p>在 table 的設計上，會添加額外的外鍵（Foreign Key，FK）欄位，關聯到另一張 table 的主鍵（Primary Key，PK）。</p><p>本文的學生與課程，屬於多對多關聯。在情境上，每位學生可選修多個課程，而每個課程也可被多位學生選修。然而在 table 設計上，一個 FK 欄位是無法儲存多個 PK 的。</p><p>為了建立多對多關聯，我們需要另外建立一張「中間表」（intermediary table），記錄什麼學生選修了什麼課程。示意如下：</p><table><thead><tr><th>學生</th><th>課程</th></tr></thead><tbody><tr><td>Vincent</td><td>資料庫管理</td></tr><tr><td>Vincent</td><td>投資學</td></tr><tr><td>Ivy</td><td>投資學</td></tr><tr><td>Ivy</td><td>審計學</td></tr></tbody></table><p>而下圖是 table 的設計，讀者可看出除了學生表與課程表，還準備了一個叫做「student_course」的中間表。<br><img src="https://chikuwacode.github.io/articles/spring-boot-jpa-many-to-many-relationship-and-intermediary-table/many-to-many-relationship-student-course.png"></p><p>從圖中可看到，中間表的欄位有學生與課程編號。這 2 個欄位會一起做為 PK 欄位（複合主鍵），確保該組合不重複，意即學生不可重複選修相同的課程。</p><p>中間表的用途是記錄兩張 table 的資料對應關係，欄位均作為 FK，分別關聯到雙方 table 的 PK。也就是說，多對多關聯是讓 2 張 table 對中間表建立一對多關聯來達成。</p><h3 id="（二）程式配置"><a href="#（二）程式配置" class="headerlink" title="（二）程式配置"></a>（二）程式配置</h3><p>回到程式專案，以下是在 Student 實體類別配置關聯。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@ManyToMany(fetch = FetchType.LAZY, cascade = &#123;CascadeType.PERSIST&#125;)</span>    <span class="hljs-meta">@JoinTable(</span><span class="hljs-meta">            name = &quot;student_course&quot;,</span><span class="hljs-meta">            joinColumns = @JoinColumn(name = &quot;student_id&quot;, referencedColumnName = &quot;id&quot;),</span><span class="hljs-meta">            inverseJoinColumns = @JoinColumn(name = &quot;course_id&quot;, referencedColumnName = &quot;id&quot;),</span><span class="hljs-meta">            uniqueConstraints = @UniqueConstraint(columnNames = &#123;&quot;student_id&quot;, &quot;course_id&quot;&#125;)</span><span class="hljs-meta">    )</span>    <span class="hljs-keyword">private</span> Set&lt;Course&gt; courses;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>此處在實體類別添加了 <code>Set&lt;Course&gt;</code> 欄位，並冠上 <code>@ManyToMany</code> 注解，表明多對多關聯。接著透過 <code>@JoinTable</code> 注解來配置中間表。</p><p>配置中間表時，會用到多個參數。<code>name</code> 參數是定義中間表的名稱；<code>joinColumns</code> 參數是站在中間表的角度，定義第一個 FK 欄位，取名為「student_id」。並提供關聯到實體類別（Student）的 PK 欄位名稱，也就是 id。</p><p>而 <code>inverseJoinColumns</code> 參數，則在中間表定義了第二個 FK 欄位，取名為「course_id」。它會關聯到另一個實體類別（Course）的 PK 欄位。</p><p>最後是 <code>uniqueConstraints</code> 參數，其用途是將這 2 個欄位設為 PK，目的是確保不會插入相同組合的值。</p><h2 id="三、儲存多對多關聯的資料"><a href="#三、儲存多對多關聯的資料" class="headerlink" title="三、儲存多對多關聯的資料"></a>三、儲存多對多關聯的資料</h2><p>為了確認多對多關聯的效果，我們會在 Controller 設計 RESTful API，透過 repository 存取資料庫。</p><h3 id="（一）Request-與-Response-body"><a href="#（一）Request-與-Response-body" class="headerlink" title="（一）Request 與 Response body"></a>（一）Request 與 Response body</h3><p>以下是進行課程選修的 request body，可攜帶多個課程編號。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TakeCourseRequest</span> &#123;    <span class="hljs-keyword">private</span> Set&lt;Long&gt; courseIds;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是課程資料的 response body，包含了 id 與名稱這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CourseResponse</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是學生資料的 response body，包含了 id 與名稱這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentResponse</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><h3 id="（二）關聯插入"><a href="#（二）關聯插入" class="headerlink" title="（二）關聯插入"></a>（二）關聯插入</h3><p>以下的 API 是為某位學生進行課程選修。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;            <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> CourseRepository courseRepository;    <span class="hljs-meta">@PostMapping(&quot;/students/&#123;id&#125;/courses&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">takeCourse</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@RequestBody</span> TakeCourseRequest request</span><span class="hljs-params">    )</span> &#123;        Optional&lt;Student&gt; studentOp = studentRepository.findById(id);        <span class="hljs-keyword">if</span> (studentOp.isEmpty()) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();        &#125;        List&lt;Course&gt; targetCourses = courseRepository.findAllById(request.getCourseIds());        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> studentOp.get();        Set&lt;Course&gt; existingCourses = student.getCourses();        existingCourses.addAll(targetCourses);        studentRepository.save(student);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>首先將學生及 request body 所指定的課程都從 repository 查詢出來。另外，呼叫 Student 實體的「getCourses()」方法，本身也會在資料庫查詢該學生原本已選修的課程。</p><p>上一篇有提到，從資料庫直接查詢出來的資料，都處於「托管狀態」，被實體管理器（Entity Manager）所管理。因此不論是從 Student 實體查出的課程，還是從 repository 查出的課程，若有重複，則它們在記憶體中皆為同一個 instance。</p><p>在 Student 實體類別中，是以 Set 資料結構來攜帶多個 Course 實體。根據其特性，即便新增原本就存在的課程資料進去，也不會造成重複（畢竟記憶體位置相同）。</p><p>綜上所述，JPA 會在將 Student 實體存回 repository 時，在中間表處理資料的關聯。並且只針對那些新資料，在中間表進行插入。</p><p>呼叫 API 後，JPA 在 console 印出的部份 SQL 指令，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    INSERT INTO student_course (student_id, course_id)    VALUES (?, ?)Hibernate:    INSERT INTO student_course (student_id, course_id)    VALUES (?, ?)</code></pre></div><p>若有 2 筆新的 Course 被添加到 Student 中，那麼就會在中間表插入 2 筆資料。</p><h3 id="（三）關聯刪除"><a href="#（三）關聯刪除" class="headerlink" title="（三）關聯刪除"></a>（三）關聯刪除</h3><p>以下的 API 是讓學生退選某個課程。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> CourseRepository courseRepository;        <span class="hljs-meta">@DeleteMapping(&quot;/students/&#123;studentId&#125;/courses/&#123;courseId&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;CourseResponse&gt;&gt; <span class="hljs-title function_">deleteStudentTakingCourses</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable</span> Long studentId, <span class="hljs-meta">@PathVariable</span> Long courseId</span><span class="hljs-params">    )</span> &#123;        Optional&lt;Student&gt; studentOp = studentRepository.findById(studentId);        <span class="hljs-keyword">if</span> (studentOp.isEmpty()) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();        &#125;        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> studentOp.get();        student.getCourses().removeIf(c -&gt; c.getId().equals(courseId));        studentRepository.save(student);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>此處是先將 Student 實體查詢出來，接著從它持有的 Course 集合中，移除指定 id 的資料。最後存回 repository 時，JPA 會針對 Course 集合所缺少的資料，從中間表刪除。</p><p>呼叫 API 後，JPA 在 console 印出的部份 SQL 指令，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    DELETE FROM student_course    WHERE student_id = ? AND course_id = ?</code></pre></div><p>讀者可看到，不論是插入還是刪除，JPA 都會根據資料的增減，對中間表進行維護。</p><h3 id="（四）關聯查詢"><a href="#（四）關聯查詢" class="headerlink" title="（四）關聯查詢"></a>（四）關聯查詢</h3><p>以下的 API，是查詢某位學生所選修的課程。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@GetMapping(&quot;/students/&#123;id&#125;/courses&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;CourseResponse&gt;&gt; <span class="hljs-title function_">getStudentTakingCourses</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;        Optional&lt;Student&gt; studentOp = studentRepository.findById(id);        <span class="hljs-keyword">if</span> (studentOp.isEmpty()) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();        &#125;        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> studentOp.get();        List&lt;CourseResponse&gt; courses = student.getCourses()                .stream()                .map(c -&gt; &#123;                    <span class="hljs-type">CourseResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CourseResponse</span>();                    res.setId(c.getId());                    res.setName(c.getName());                    <span class="hljs-keyword">return</span> res;                &#125;)                .toList();        <span class="hljs-keyword">return</span> ResponseEntity.ok(courses);    &#125;&#125;</code></pre></div><p>邏輯很單純，查詢出 Student 實體後，再從中查詢所關聯的多個 Course，將它們包裝為 response body 即可。</p><p>呼叫 API 後，JPA 在 console 印出的部份 SQL 指令，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    SELECT sc.student_id, c.id, c.name     FROM student_course sc    JOIN course c ON c.id = sc.course_id    WHERE sc.student_id = ?</code></pre></div><p>可看到查詢選修課程的方式，是將中間表與課程表做關聯，再以學生編號做為查詢條件。</p><h2 id="四、雙向關聯"><a href="#四、雙向關聯" class="headerlink" title="四、雙向關聯"></a>四、雙向關聯</h2><p>在多對多關聯中，同樣也能使用雙向關聯。以下是在 Course 實體類別進行配置，藉此取得所關聯的 Student 實體。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;course&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Course</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@ManyToMany(mappedBy = &quot;courses&quot;)</span>    <span class="hljs-keyword">private</span> Set&lt;Student&gt; students;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>此處添加了 <code>Set&lt;Student&gt;</code> 的欄位，並冠上 <code>@ManyToMany</code> 注解，表明了多對多關聯。該注解的 <code>mappedBy</code> 參數傳入了欄位名稱，是用來宣告這個 Course 實體，是被 Student 實體類別的哪個欄位所關聯。</p><p>以下的 API，是查詢某個課程的選修學生。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> CourseRepository courseRepository;        <span class="hljs-meta">@GetMapping(&quot;/courses/&#123;id&#125;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;StudentResponse&gt;&gt; <span class="hljs-title function_">getCourseTakingStudents</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;        Optional&lt;Course&gt; courseOp = courseRepository.findById(id);        <span class="hljs-keyword">if</span> (courseOp.isEmpty()) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();        &#125;        Set&lt;Student&gt; students = courseOp.get().getStudents();        List&lt;StudentResponse&gt; responses = students                .stream()                .map(s -&gt; &#123;                    <span class="hljs-type">StudentResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentResponse</span>();                    res.setId(s.getId());                    res.setName(s.getName());                    <span class="hljs-keyword">return</span> res;                &#125;)                .toList();        <span class="hljs-keyword">return</span> ResponseEntity.ok(responses);    &#125;&#125;</code></pre></div><p>邏輯很單純，查詢出 Course 實體後，再從中查詢所關聯的多個 Student，將它們其包裝為 response body 即可。</p><p>呼叫 API 後，JPA 在 console 印出的部份 SQL 指令，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    SELECT sc.course_id, s.id, s.name    FROM student_course sc    JOIN student s ON s.id = sc.student_id    WHERE sc.course_id = ?</code></pre></div><p>可看到查詢修課學生的方式，是將中間表與學生表做關聯，再以課程編號做為查詢條件。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch09.6-jpa-many-to-many-relationship-and-intermediary-table">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-jpa-one-to-many-relationship-and-bidirectional-association/" target="_blank">【Spring Boot】第9.5課－使用 JPA 建立一對多關聯，並配置雙向關聯</a></p><p>下一課：<a href="/articles/spring-boot-mockmvc-integration-test/" target="_blank">【Spring Boot】第10.1課 - 使用 MockMvc 進行 API 整合測試</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第9.5課－使用 JPA 建立一對多關聯，並配置雙向關聯</title>
    <link href="/articles/spring-boot-jpa-one-to-many-relationship-and-bidirectional-association/"/>
    <url>/articles/spring-boot-jpa-one-to-many-relationship-and-bidirectional-association/</url>
    
    <content type="html"><![CDATA[<p>在上一篇，已經示範過如何使用 JPA 建立兩張資料表的一對一關聯，並接觸加載策略與級聯的背景知識。本文將進一步以「學生」就讀「科系」為情境，建立一對多關聯，並撰寫 RESTful API 進行測試。</p><p>過程中，也會說明如何針對資料表中的現存資料添加關聯。最後則介紹雙向關聯，讓這兩個實體類別，都能取得所關聯的另一方的資料。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch09.4-jpa-one-to-one-relationship">點我</a>。</p><h2 id="一、程式專案準備"><a href="#一、程式專案準備" class="headerlink" title="一、程式專案準備"></a>一、程式專案準備</h2><h3 id="（一）實體類別介紹"><a href="#（一）實體類別介紹" class="headerlink" title="（一）實體類別介紹"></a>（一）實體類別介紹</h3><p>以下的「Student」類別，描述了學生資料，包含 id、名字與聯繫方式，共 3 個欄位。其中聯繫方式是上一篇示範的一對一關聯，在本文不會用到。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;            <span class="hljs-keyword">private</span> String name;        <span class="hljs-meta">@OneToOne(fetch = FetchType.LAZY, cascade = &#123;CascadeType.PERSIST, CascadeType.REMOVE&#125;)</span>    <span class="hljs-meta">@JoinColumn(name = &quot;contact_id&quot;, referencedColumnName = &quot;id&quot;, nullable = false, unique = true)</span>    <span class="hljs-keyword">private</span> Contact contact;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的「Department」類別，描述了科系，包含 id 與名稱這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;department&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>由於 Department 也是要儲存到資料庫的實體類別，因此需準備 repository。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DepartmentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Department, Long&gt; &#123;&#125;</code></pre></div><p>以下的「Contact」類別，描述了聯繫方式，包含信箱與電話這 2 個欄位。它是來自上一篇的程式碼，因此本文盡量不提及。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;contact&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contact</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String phone;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><h3 id="（二）準備測試資料"><a href="#（二）準備測試資料" class="headerlink" title="（二）準備測試資料"></a>（二）準備測試資料</h3><p>定義好實體類別後，讀者可啟動程式，讓 Spring Data JPA 建立 table。</p><p>接著執行以下 SQL 指令，建立科系的測試資料。畢竟使用情境中，必定是先有科系，才會有學生來就讀。</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `department` (`name`)<span class="hljs-keyword">VALUES</span> (&quot;資訊管理&quot;), (&quot;財務金融&quot;), (&quot;會計&quot;);</code></pre></div><h2 id="二、設計一對多關聯"><a href="#二、設計一對多關聯" class="headerlink" title="二、設計一對多關聯"></a>二、設計一對多關聯</h2><h3 id="（一）設計原則"><a href="#（一）設計原則" class="headerlink" title="（一）設計原則"></a>（一）設計原則</h3><p>所謂的一對多關聯，指的是其中一張 table 的 1 筆資料，可以對應到另一張 table 的多筆資料。</p><p>現在我們有「學生」與「科系」這兩張 table。每位學生都對應到一個科系，而一個科系可對應到許多學生。事實上，「一對多」和「多對一」是同樣的概念，端看讀者站在哪張 table 的角度。</p><p>這兩張 table 要如何關聯起來呢？若讀者學過資料庫的正規化，很直覺一定是在學生表添加額外的欄位做為外鍵（Foreign Key，FK），指向科系表的主鍵（Primary Key，PK）。</p><p>畢竟每位學生只會對應到一個科系，在 table 中用一個欄位來存科系 id 是沒問題的。然而科系表的一筆資料是無法儲存多位學生的 id，因此才將科系做為學生資料的一部份。<br><img src="https://chikuwacode.github.io/articles/spring-boot-jpa-one-to-many-relationship-and-bidirectional-association/one-to-many-relationship-student-department.png"></p><h3 id="（二）程式配置"><a href="#（二）程式配置" class="headerlink" title="（二）程式配置"></a>（二）程式配置</h3><p>回到程式專案，以下是在 Student 實體類別配置關聯。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-comment">// ...</span>        <span class="hljs-meta">@ManyToOne(fetch = FetchType.LAZY, cascade = &#123;CascadeType.PERSIST&#125;)</span>    <span class="hljs-meta">@JoinColumn(name = &quot;dept_id&quot;, referencedColumnName = &quot;id&quot;, nullable = false)</span>    <span class="hljs-keyword">private</span> Department department;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>這個 Department 欄位會以 FK 的形式儲存在學生表中，因此需使用 <code>@JoinColumn</code> 注解來取名。在 <code>name</code> 參數可傳入欄位名稱；在 <code>referencedColumnName</code> 參數則定義該欄位要關聯到科系表的 id 欄位，也就是 PK。另外，學生一定會有科系，故設為必填。</p><p><code>@ManyToOne</code> 注解的使用方式，與上一篇的一對一關聯相同。我們將加載策略設為 <code>FetchType.LAZY</code>，代表不要在查詢學生時，立刻查詢科系。而級聯設為 <code>CascadeType.PERSIST</code>，代表插入或更新學生時，能夠在 FK 欄位填入科系編號。</p><h3 id="（三）維護現有資料"><a href="#（三）維護現有資料" class="headerlink" title="（三）維護現有資料"></a>（三）維護現有資料</h3><p>若讀者在學生表中已經有一些現有的資料，那麼在啟動程式，讓 JPA 處理 table 的關聯前，需要先知道一件事。</p><p>我們雖然在 Student 類別中，有將科系編號的 FK（即 dept_id 欄位）設為必填，但目前學生資料的 FK 欄位並沒有值，違背了必填這項規則。因此啟動程式後，會出現如下的例外訊息：</p><div class="code-wrapper"><pre><code class="hljs text">java.sql.SQLIntegrityConstraintViolationException:    Cannot add or update a child row: a foreign key constraint fails</code></pre></div><p>如果讀者閱讀本文時是在練習，且願意捨棄現有資料，那麼可以刪除所有學生資料後再重啟。然而在工作上，我們不應該就這麼刪除資料，因此需要手動維護 table。</p><p>具體做法是先在學生表新增 FK 欄位，但不設為必填。接著再將科系編號更新上去，最後才將欄位設為必填。示意 SQL 指令如下：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> `dept_id` <span class="hljs-type">BIGINT</span>;<span class="hljs-comment">-- 更新一位學生</span><span class="hljs-keyword">UPDATE</span> `student`<span class="hljs-keyword">SET</span> `dept_id` <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> `id` <span class="hljs-keyword">FROM</span> `department` <span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> &quot;資訊管理&quot;)<span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> &quot;Vincent&quot;;<span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `student` CHANGE <span class="hljs-keyword">COLUMN</span> `dept_id` `dept_id` <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>;</code></pre></div><p>處理完現有資料後，再重新啟動程式，讓 JPA 在 FK 欄位建立約束（constraint）即可。往後新增的學生資料，也都必須能關聯到一個已存在的科系。</p><h2 id="三、儲存一對多關聯的資料"><a href="#三、儲存一對多關聯的資料" class="headerlink" title="三、儲存一對多關聯的資料"></a>三、儲存一對多關聯的資料</h2><p>為了確認一對多關聯的效果，我們會在 Controller 設計 RESTful API，透過 repository 存取資料庫。</p><h3 id="（一）Request-與-Response-body"><a href="#（一）Request-與-Response-body" class="headerlink" title="（一）Request 與 Response body"></a>（一）Request 與 Response body</h3><p>以下是用來建立學生的 request body。包含名字、科系編號，以及聯繫方式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentRequest</span> &#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Long departmentId;    <span class="hljs-keyword">private</span> Contact contact;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>在 request body 攜帶 Contact 物件，是為了在程式中直接賦予給 Student 實體物件，再透過級聯的機制，一起插入到 table。</p><p>而科系並非攜帶整個物件，而是編號。理由是科系資料應該早就在 table 準備好了，等著學生資料的 FK 來指向。</p><p>以下是學生資料的 response body，包含 id、名字、科系名稱、信箱與電話，共 5 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentResponse</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String departmentName;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String phone;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><h3 id="（二）關聯插入"><a href="#（二）關聯插入" class="headerlink" title="（二）關聯插入"></a>（二）關聯插入</h3><p>以下的 API 是用來建立學生。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> DepartmentRepository departmentRepository;        <span class="hljs-meta">@PostMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createStudent</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> StudentRequest request)</span> &#123;        Optional&lt;Department&gt; departmentOp = departmentRepository.findById(request.getDepartmentId());        <span class="hljs-keyword">if</span> (departmentOp.isEmpty()) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.unprocessableEntity().build();        &#125;        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();        student.setName(request.getName());        student.setContact(request.getContact());        student.setDepartment(departmentOp.get());        studentRepository.save(student);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>邏輯中，會先檢查該科系編號是否存在。是的話，便取出 request body 中的資料，建立出 Student 物件。</p><p>接著讓 Student 物件攜帶科系資料的實體，並呼叫 repository 的 <code>save</code> 方法來儲存。此時 JPA 會自動在學生資料的 FK，也就是 dept_id 欄位，填入科系編號。</p><h3 id="（三）關聯查詢"><a href="#（三）關聯查詢" class="headerlink" title="（三）關聯查詢"></a>（三）關聯查詢</h3><p>以下的 API，用途是透過學生名字的關鍵字來查詢。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> DepartmentRepository departmentRepository;        <span class="hljs-meta">@GetMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;StudentResponse&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;&quot;)</span> String name</span><span class="hljs-params">    )</span> &#123;        List&lt;Student&gt; students = studentRepository.findByNameLikeIgnoreCase(<span class="hljs-string">&quot;%&quot;</span> + name + <span class="hljs-string">&quot;%&quot;</span>);        Map&lt;Student, Department&gt; studentDepartmentMap = createStudentDepartmentMap(students);        Map&lt;Student, Contact&gt; studentContactMap = createStudentContactMap(students);        List&lt;StudentResponse&gt; responses = students                .stream()                .map(s -&gt; &#123;                    <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> studentDepartmentMap.get(s);                    <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> studentContactMap.get(s);                    <span class="hljs-keyword">return</span> StudentResponse.of(s, contact, department);                &#125;)                .toList();        <span class="hljs-keyword">return</span> ResponseEntity.ok(responses);    &#125;        <span class="hljs-keyword">private</span> Map&lt;Student, Department&gt; <span class="hljs-title function_">createStudentDepartmentMap</span><span class="hljs-params">(Collection&lt;Student&gt; students)</span> &#123;        Map&lt;Student, Long&gt; studentDepartmentIdMap = students                .stream()                .collect(Collectors.toMap(Function.identity(), s -&gt; s.getDepartment().getId()));        List&lt;Department&gt; departments = departmentRepository.findAllById(studentDepartmentIdMap.values());        Map&lt;Long, Department&gt; departmentMap = departments                .stream()                .collect(Collectors.toMap(Department::getId, Function.identity()));        Map&lt;Student, Department&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        students.forEach(s -&gt; &#123;            <span class="hljs-type">Long</span> <span class="hljs-variable">deptId</span> <span class="hljs-operator">=</span> studentDepartmentIdMap.get(s);            <span class="hljs-type">Department</span> <span class="hljs-variable">dept</span> <span class="hljs-operator">=</span> departmentMap.get(deptId);            map.put(s, dept);        &#125;);        <span class="hljs-keyword">return</span> map;    &#125;    <span class="hljs-keyword">private</span> Map&lt;Student, Contact&gt; <span class="hljs-title function_">createStudentContactMap</span><span class="hljs-params">(Collection&lt;Student&gt; students)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>首先呼叫 repository 查詢學生資料。由於 Department 欄位的加載策略設為 <code>FetchType.LAZY</code>，因此不會立刻查詢科系資料。</p><p>接著仿照上一篇的做法，為了避免 N + 1 問題，因此將科系編號收集起來，透過 repository 一次查詢出所有科系。最後把結果組裝成 response body。</p><h3 id="（四）托管狀態"><a href="#（四）托管狀態" class="headerlink" title="（四）托管狀態"></a>（四）托管狀態</h3><p>在上面建立學生資料的例子中，有件事要留意。儲存 Student 物件時，它所關聯的 Department 物件，必須是從 repository 查詢出的實體。</p><p>原因是從 repository 查詢出的實體，會被 JPA 的「實體管理器」（Entity Manager）所管理，我們稱它處於「托管狀態」（managed）。</p><p>只有攜帶托管狀態的實體一起儲存時，Entity Manager 才會知道要將這些資料關聯在一起。這也是為什麼在儲存 Student 物件時，JPA 可以自動處理關聯，在 FK 欄位填入科系編號的值。</p><p>如果我們自行建立要關聯的 Department 物件（即便內容與 table 現有的相同），並賦予給 Student 物件後儲存，那麼該 Department 物件是處於非托管狀態（detached）的。由於 Entity Manager 不認識它，因此會視為新資料，在科系表插入，形成重複資料。</p><h2 id="四、雙向關聯"><a href="#四、雙向關聯" class="headerlink" title="四、雙向關聯"></a>四、雙向關聯</h2><p>在目前的設計中，查詢到 Student 實體後，可以透過呼叫「getDepartment()」方法來取得科系的資料。</p><p>那麼換一個角度，如果在程式邏輯中已經查詢到 Department 實體了，當我們想取得就讀該科系的所有學生，該如何做呢？其中一種做法，是在 StudentRepository 宣告查詢方法，直接以 FK 欄位做為條件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;    <span class="hljs-meta">@Query(</span><span class="hljs-meta">            nativeQuery = true,</span><span class="hljs-meta">            value = &quot;SELECT * FROM `student` WHERE `dept_id` = ?1&quot;</span><span class="hljs-meta">    )</span>    List&lt;Student&gt; <span class="hljs-title function_">findByDepartmentId</span><span class="hljs-params">(Long id)</span>;&#125;</code></pre></div><p>但這麼做的話，程式就勢必依賴於 StudentRepository 這個元件。一般來說，我們會希望元件的耦合度低，也就是不要依賴太多元件。</p><p>透過配置「雙向關聯」，可以讓我們在任何一方的實體，皆能獲取所關聯的另一方實體。以本文的例子來看，意思就是在查詢到 Department 實體後，也能直接取得所有關聯的 Student 實體。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;department&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Department</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@OneToMany(fetch = FetchType.LAZY, mappedBy = &quot;department&quot;)</span>    <span class="hljs-keyword">private</span> Set&lt;Student&gt; students;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以上在 Department 類別添加了 <code>Set&lt;Student&gt;</code> 的欄位，並冠上 <code>@OneToMany</code> 注解，表明一對多關聯。該注解的 <code>mappedBy</code> 參數傳入了欄位名稱，是用來宣告這個實體，是被另一方實體的哪個欄位所關聯。</p><p>也就是說，在 Department 類別的欄位使用 <code>mappedBy</code> 參數，等於宣告 Student 類別的 FK 位於叫做「department」的欄位上。如此便完成了雙向關聯的配置。</p><p>附帶一提，使用 Set 資料結構來攜帶 Student 實體，用意是強調查詢結果沒有順序之分。</p><p>配置完後，讓我們看看效果。以下的 API，是取得指定科系的學生。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> DepartmentRepository departmentRepository;        <span class="hljs-meta">@GetMapping(&quot;/departments/&#123;id&#125;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;StudentResponse&gt;&gt; <span class="hljs-title function_">getStudentsByDepartment</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;        Optional&lt;Department&gt; departmentOp = departmentRepository.findById(id);        <span class="hljs-keyword">if</span> (departmentOp.isEmpty()) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();        &#125;        <span class="hljs-type">Department</span> <span class="hljs-variable">department</span> <span class="hljs-operator">=</span> departmentOp.get();        Set&lt;Student&gt; students = department.getStudents();        List&lt;StudentResponse&gt; responses = students                .stream()                .map(s -&gt; &#123;                    <span class="hljs-type">StudentResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentResponse</span>();                    res.setId(s.getId());                    res.setName(s.getName());                    <span class="hljs-keyword">return</span> res;                &#125;)                .toList();        <span class="hljs-keyword">return</span> ResponseEntity.ok(responses);    &#125;&#125;</code></pre></div><p>首先呼叫 repository 查詢科系。接著呼叫「getStudents()」方法的同時，JPA 便會進行查詢學生表。在 console 印出的 SQL 指令，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    SELECT s.id, s.name, s.dept_id    FROM student s    WHERE s.dept_id = ?</code></pre></div><p>由於 <code>mappedBy</code> 參數指定了 Student 的 department 欄位，且冠上的 <code>@JoinColumn</code> 注解已定義 FK 的欄位名稱為「dept_id」，因此 JPA 才知道要以什麼條件來查詢 Student。</p><p>要注意的是，透過雙向關聯取得關聯資料時，無法進行條件篩選、排序與分頁。不過若讀者沒有這項需求，配置雙向關聯依然是相當實用的做法。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch09.5-jpa-one-to-many-relationship-and-bidirectional-association">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-jpa-one-to-one-relationship/" target="_blank">【Spring Boot】第9.4課－使用 JPA 配置資料表關聯（以一對一關聯為例）</a></p><p>下一課：<a href="/articles/spring-boot-jpa-many-to-many-relationship-and-intermediary-table/" target="_blank">【Spring Boot】第9.6課－使用 JPA 建立多對多關聯，並配置中間表</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第9.4課－使用 JPA 配置資料表關聯（以一對一關聯為例）</title>
    <link href="/articles/spring-boot-jpa-one-to-one-relationship/"/>
    <url>/articles/spring-boot-jpa-one-to-one-relationship/</url>
    
    <content type="html"><![CDATA[<p>在上一篇，我們已經知道如何對單一資料表進行 CRUD，而本文將以「學生」與「聯繫方式」為情境，解說如何把兩張資料表關聯起來。並且也會撰寫 RESTful API，示範用法。</p><p>剛開始使用 JPA 進行配置時，會遇到許多新觀念。包含各種 annotation、加載策略、級聯，以及潛在的 N + 1 問題。本文會以最簡單的一對一關聯做為起點，往後學習其他關聯方式，將會更順利。</p><hr><h2 id="一、程式專案準備"><a href="#一、程式專案準備" class="headerlink" title="一、程式專案準備"></a>一、程式專案準備</h2><h3 id="（一）實體類別介紹"><a href="#（一）實體類別介紹" class="headerlink" title="（一）實體類別介紹"></a>（一）實體類別介紹</h3><p>以下的「Student」類別，描述了學生資料，包含 id 與名字這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的「Contact」類別，描述了聯繫方式，包含信箱與電話這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;contact&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contact</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String phone;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>它們在資料庫中，都會有自己的資料表（table）。</p><h3 id="（二）JPA-Repository"><a href="#（二）JPA-Repository" class="headerlink" title="（二）JPA Repository"></a>（二）JPA Repository</h3><p>上述的 Student 和 Contact 都是要儲存到資料庫的實體類別，因此需建立各自的 repository。</p><p>以下的「StudentRepository」宣告了一個方法，用來查詢 name 欄位包含某段字串的資料（不分大小寫）。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;    List&lt;Student&gt; <span class="hljs-title function_">findByNameLikeIgnoreCase</span><span class="hljs-params">(String name)</span>;&#125;</code></pre></div><p>以下是「ContactRepository」，無自定義方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ContactRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Contact, Long&gt; &#123;&#125;</code></pre></div><h3 id="（三）準備測試資料"><a href="#（三）準備測試資料" class="headerlink" title="（三）準備測試資料"></a>（三）準備測試資料</h3><p>啟動程式後，JPA 便會在資料庫中建立好 table。若讀者有需要，可執行以下 SQL 指令，產生測試資料。</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`)<span class="hljs-keyword">VALUES</span> (&quot;Vincent&quot;), (&quot;Ivy&quot;), (&quot;Linda&quot;);<span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `contact` (`email`, `phone`)<span class="hljs-keyword">VALUES</span>(&quot;vincent@school.com&quot;, &quot;0911&quot;),(&quot;ivy@school.com&quot;, &quot;0922&quot;),(&quot;linda@school.com&quot;, &quot;0933&quot;);<span class="hljs-keyword">UPDATE</span> `student`<span class="hljs-keyword">SET</span> `contact_id` <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> `id` <span class="hljs-keyword">FROM</span> `contact` <span class="hljs-keyword">WHERE</span> `phone` <span class="hljs-operator">=</span> &quot;0911&quot;)<span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> &quot;Vincent&quot;;<span class="hljs-keyword">UPDATE</span> `student`<span class="hljs-keyword">SET</span> `contact_id` <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> `id` <span class="hljs-keyword">FROM</span> `contact` <span class="hljs-keyword">WHERE</span> `phone` <span class="hljs-operator">=</span> &quot;0922&quot;)<span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> &quot;Ivy&quot;;<span class="hljs-keyword">UPDATE</span> `student`<span class="hljs-keyword">SET</span> `contact_id` <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> `id` <span class="hljs-keyword">FROM</span> `contact` <span class="hljs-keyword">WHERE</span> `phone` <span class="hljs-operator">=</span> &quot;0933&quot;)<span class="hljs-keyword">WHERE</span> `name` <span class="hljs-operator">=</span> &quot;Linda&quot;;</code></pre></div><h2 id="二、設計一對一關聯"><a href="#二、設計一對一關聯" class="headerlink" title="二、設計一對一關聯"></a>二、設計一對一關聯</h2><h3 id="（一）設計原則"><a href="#（一）設計原則" class="headerlink" title="（一）設計原則"></a>（一）設計原則</h3><p>所謂的一對一關聯，指的是其中一張 table 的 1 筆資料，只會對應到另一張 table 的 1 筆資料，反之亦然。</p><p>現在我們有「學生」與「聯繫方式」這兩張 table。在聯繫表中，有信箱和電話這 2 個欄位，每組資料都是屬於一位學生的。而每位學生都有對應的一組聯繫方式。</p><p>兩張 table 的關聯方式，是在其中一張 table 中添加額外的欄位做為外鍵（Foreign Key，FK），指向另一張 table 的主鍵（Primary Key，PK）。此時有兩種選擇：</p><ul><li>在學生表添加 FK 欄位，指向聯繫表的 PK。強調每位學生擁有一組聯繫方式。</li><li>在聯繫表添加 FK 欄位，指向學生表的 PK。強調每組聯繫方式都有它的擁有者。</li></ul><p>那麼要在哪一張 table 添加 FK 欄位呢？原則上會選擇商業邏輯中，更重要的 table，也就是學生表，因為聯繫方式是學生資料的一部份。<br><img src="https://chikuwacode.github.io/articles/spring-boot-jpa-one-to-one-relationship/one-to-one-relationship-student-contact.png"></p><h3 id="（二）程式配置"><a href="#（二）程式配置" class="headerlink" title="（二）程式配置"></a>（二）程式配置</h3><p>回到程式專案，以下是在 Student 實體類別配置一對一關聯。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@OneToOne</span>    <span class="hljs-meta">@JoinColumn(name = &quot;contact_id&quot;, referencedColumnName = &quot;id&quot;, nullable = false, unique = true)</span>    <span class="hljs-keyword">private</span> Contact contact;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>此處在實體類別添加了 Contact 欄位，並冠上 <code>@OneToOne</code> 注解，表明一對一關聯。</p><p>這個 Contact 欄位會以 FK 欄位的形式儲存在 table 中。為此，需使用 <code>@JoinColumn</code> 注解來取名。在 <code>name</code> 參數可傳入欄位名稱；而 <code>referencedColumnName</code> 參數，則定義該欄位要關聯到聯繫表的 id 欄位，也就是 PK。</p><p>若聯繫方式為必填資料，那麼可在 <code>nullable</code> 參數傳入 false，將 FK 設成「NOT NULL」。另外，聯繫方式是每位學生自己專屬的，不會與人共用，因此設為 unique。</p><p>當呼叫 StudentRepository 進行查詢時，每筆學生資料所關聯到的聯繫方式，會被載入到 Contact 欄位中，讓我們在程式碼中運用。</p><h3 id="（三）測試用-API"><a href="#（三）測試用-API" class="headerlink" title="（三）測試用 API"></a>（三）測試用 API</h3><p>為了確認一對一關聯的效果，我們會在 Controller 設計 RESTful API，透過 repository 存取資料庫。</p><p>以下提供了一支 API，用途是透過學生名字的關鍵字來查詢。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@GetMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;StudentResponse&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;&quot;)</span> String name</span><span class="hljs-params">    )</span> &#123;        List&lt;Student&gt; students = studentRepository.findByNameLikeIgnoreCase(<span class="hljs-string">&quot;%&quot;</span> + name + <span class="hljs-string">&quot;%&quot;</span>);        List&lt;StudentResponse&gt; responses = students                .stream()                .map(s -&gt; &#123;                    <span class="hljs-type">Contact</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> s.getContact();                    <span class="hljs-type">StudentResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentResponse</span>();                    res.setId(s.getId());                    res.setName(s.getName());                    res.setEmail(c.getEmail());                    res.setPhone(c.getPhone());                    <span class="hljs-keyword">return</span> res;                &#125;)                .toList();        <span class="hljs-keyword">return</span> ResponseEntity.ok(responses);    &#125;&#125;</code></pre></div><p>邏輯上是先呼叫 repository 查詢資料，接著將結果包裝成如下的 response body。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentResponse</span> &#123;    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String phone;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>在進行包裝的過程中，會從 Student 實體取出 Contact 物件。要注意的是，該物件實際上是 Hibernate 的「代理物件」（proxy），本身並不支援在 API 回傳時，被序列化成 JSON，所以此處才要另外取出欄位值。</p><h2 id="三、加載策略"><a href="#三、加載策略" class="headerlink" title="三、加載策略"></a>三、加載策略</h2><p>上一節最後有提到，查詢到的 Student 實體，其所關聯的 Contact 實體，是 Hibernate 的「代理物件」。我們可設定「加載策略」，控制在查詢 Student 時，是否要馬上將關聯的 Contact 一起查詢回來。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@OneToOne(fetch = FetchType.LAZY)</span>    <span class="hljs-meta">@JoinColumn(name = &quot;contact_id&quot;, referencedColumnName = &quot;id&quot;, nullable = false, unique = true)</span>    <span class="hljs-keyword">private</span> Contact contact;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>此處在 <code>@OneToOne</code> 注解傳入了 <code>fetch</code> 參數。<code>FetchType.EAGER</code> 代表立即查詢回來，同時也是 <code>@OneToOne</code> 注解的預設值。而 <code>FetchType.LAZY</code> 代表需要用到時，才會進行查詢。</p><p>為了觀察兩者的差別，請讀者在 application.properties 配置檔添加以下 2 個設定值。用途是讓 JPA 存取資料庫時，將執行的 SQL 指令印在 console 中，並做排版。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.jpa.properties.hibernate.show_sql</span>=<span class="hljs-string">true</span><span class="hljs-attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="hljs-string">true</span></code></pre></div><p>在上一節的 API 中，首先呼叫了 StudentRepository。假設加載策略設為 <code>FetchType.EAGER</code>，且查詢到的學生資料有 2 筆，那 JPA 會「立即」印出類似下面的內容：</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    SELECT s.id, s.name, s.contact_id    FROM student s    WHERE UPPER (s.name) LIKE UPPER (?)Hibernate:    SELECT c.id, c.email, c.phone    FROM contact c    WHERE c.id = ?Hibernate:    SELECT c.id, c.email, c.phone    FROM contact c    WHERE c.id = ?</code></pre></div><p>第一條指令是查詢所有學生資料，並取得 FK，也就是「contact_id」欄位的值。第二、三條指令則是分別查詢聯繫表，將 Contact 實體加載到兩個 Student 實體中。</p><p>若加載策略設為 <code>FetchType.LAZY</code>，則需等到呼叫「getContact()」方法取得關聯的實體時，JPA 才會實際查詢聯繫表。</p><p>特別的是，若直接以「getContact().getId()」的方式連續呼叫，是不會引發查詢的。相對地，只會取得學生表的 FK 欄位值。</p><h2 id="四、認識-N-1-問題"><a href="#四、認識-N-1-問題" class="headerlink" title="四、認識 N + 1 問題"></a>四、認識 N + 1 問題</h2><p>所謂的 N + 1 問題，大方向可以解釋成：一開始查詢到了 N 個資料實體（如 Student）。但它們所關聯的次要實體（如 Contact），是「一個一個」地分別查詢出來，於是又查詢了 N 次，形成對資料庫的大量存取。</p><p>這可能會在什麼情況發生呢？其實在第三節的例子中，我們就可以觀察到了。假設將加載策略設為 <code>FetchType.EAGER</code>，且又查詢出多筆 Student 資料，那 JPA 就會馬上逐一查詢他們的 Contact 資料。</p><p>又或者是將加載策略設為 <code>FetchType.LAZY</code>，且我們呼叫 Student 的「getContact()」方法，逐一取出所有 Contact 實體，那也會引發多次對資料庫的查詢，造成 N + 1 問題。</p><p>這裡提供一個解決的方式。首先選擇 <code>FetchType.LAZY</code> 做為加載策略，接著將取得 Contact 實體的做法，調整為用「IN」的方式一次查詢。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ContactRepository contactRepository;        <span class="hljs-meta">@GetMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;StudentResponse&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false, defaultValue = &quot;&quot;)</span> String name</span><span class="hljs-params">    )</span> &#123;        List&lt;Student&gt; students = studentRepository.findByNameLikeIgnoreCase(<span class="hljs-string">&quot;%&quot;</span> + name + <span class="hljs-string">&quot;%&quot;</span>);        <span class="hljs-comment">// 建立 Student 與 Contact 的對應關係</span>        Map&lt;Student, Contact&gt; studentContactMap = createStudentContactMap(students);        List&lt;StudentResponse&gt; responses = students                .stream()                .map(s -&gt; &#123;                    <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> studentContactMap.get(s);                    <span class="hljs-type">StudentResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentResponse</span>();                    res.setId(s.getId());                    res.setName(s.getName());                    res.setEmail(contact.getEmail());                    res.setPhone(contact.getPhone());                    <span class="hljs-keyword">return</span> res;                &#125;)                .toList();        <span class="hljs-keyword">return</span> ResponseEntity.ok(responses);    &#125;        <span class="hljs-keyword">private</span> Map&lt;Student, Contact&gt; <span class="hljs-title function_">createStudentContactMap</span><span class="hljs-params">(List&lt;Student&gt; students)</span> &#123;        <span class="hljs-comment">// Student 對應 FK (contact id)</span>        Map&lt;Student, Long&gt; studentContactIdMap = students                .stream()                .collect(Collectors.toMap(Function.identity(), s -&gt; s.getContact().getId()));        <span class="hljs-comment">// PK (contact id) 對應 Contact</span>        List&lt;Contact&gt; contacts = contactRepository.findAllById(studentContactIdMap.values());        Map&lt;Long, Contact&gt; contactMap = contacts                .stream()                .collect(Collectors.toMap(Contact::getId, Function.identity()));        Map&lt;Student, Contact&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();        students.forEach(s -&gt; &#123;            <span class="hljs-type">Long</span> <span class="hljs-variable">contactId</span> <span class="hljs-operator">=</span> studentContactIdMap.get(s);            <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> contactMap.get(contactId);            map.put(s, contact);        &#125;);        <span class="hljs-keyword">return</span> map;    &#125;&#125;</code></pre></div><p>以上的範例程式，會在查詢到學生後，將學生與 FK 的值整理成 Map 結構。即便加載策略為 <code>FetchType.LAZY</code>，但以「Student.getContact().getId()」的形式連續呼叫，並不會引發額外的查詢。</p><p>接著將學生的 FK，也就是聯繫方式的 PK，傳入 ContactRepository 的 <code>findAllById</code> 方法，一次查詢出所有 Contact 實體。最後將 PK 與實體也整理成 Map 結構。</p><p>如此一來，我們便可在程式碼的層級，將兩種實體關聯起來了。重新存取 API 後，在 console 印出的 SQL 指令，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    SELECT s.id, s.name, s.contact_id    FROM student s    WHERE UPPER (s.name) LIKE UPPER (?)Hibernate:    SELECT c.id, c.email, c.phone    FROM contact c    WHERE c.id IN (?, ?)</code></pre></div><p>可看出只對資料庫進行 2 次查詢而已。第一個指令是查詢學生資料，在此假設查到 2 筆。而第二個指令的 WHERE 子句出現了「IN」關鍵字，且有 2 個問號，代表 JPA 是透過這 2 位學生的 FK，一次查詢所有聯繫資料。</p><h2 id="五、級聯（Cascade）"><a href="#五、級聯（Cascade）" class="headerlink" title="五、級聯（Cascade）"></a>五、級聯（Cascade）</h2><h3 id="（一）前言"><a href="#（一）前言" class="headerlink" title="（一）前言"></a>（一）前言</h3><p>在目前的設計中，Student 實體持有了 Contact 實體，而學生表也有 FK 欄位去指向聯繫表的 PK 欄位。此時我們稱學生表為關聯的「維護方」，而聯繫表為「被維護方」。</p><p>JPA 提供一種叫做「級聯」的機制，它讓我們在插入、更新或刪除維護方所關聯的實體物件時，能自動同步到被維護方。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@OneToOne(fetch = FetchType.LAZY, cascade = &#123;CascadeType.PERSIST, CascadeType.REMOVE&#125;)</span>    <span class="hljs-meta">@JoinColumn(name = &quot;contact_id&quot;, referencedColumnName = &quot;id&quot;, nullable = false, unique = true)</span>    <span class="hljs-keyword">private</span> Contact contact;        <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>在 <code>@OneToOne</code> 的 <code>cascade</code> 參數，可設定哪些操作需要對被維護方的實體套用級聯。<code>CascadeType.PERSIST</code> 代表呼叫 repository 的 <code>save</code> 方法，插入或更新維護方的實體時會生效。<code>CascadeType.REMOVE</code> 代表刪除維護方的實體時會生效。</p><h3 id="（二）級聯插入"><a href="#（二）級聯插入" class="headerlink" title="（二）級聯插入"></a>（二）級聯插入</h3><p>以下是在 Controller 提供建立學生資料的 API。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@PostMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createStudent</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Student student)</span> &#123;        student.setId(<span class="hljs-literal">null</span>);        studentRepository.save(student);                <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>範例程式中，雖然只有將 Student 物件傳入 StudentRepository 的 <code>save</code> 方法進行儲存，但 JPA 也會自動在聯繫表插入其內部 Contact 物件的資料。</p><p>JPA 在 console 印出的指令內容，示意如下。可看到會先插入聯繫資料，再插入學生資料，並填入 FK 欄位的值。</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    INSERT INTO contact (email, phone)    VALUES (?, ?)Hibernate:    INSERT INTO student (name, contact_id)    VALUES (?, ?)</code></pre></div><h3 id="（三）級聯刪除"><a href="#（三）級聯刪除" class="headerlink" title="（三）級聯刪除"></a>（三）級聯刪除</h3><p>以下的 API 是刪除學生資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@DeleteMapping(&quot;/students/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;        studentRepository.deleteById(id);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>JPA 在 console 印出的指令內容，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    SELECT s.id, s.name, s.contact_id    FROM student s    WHERE s.id = ?Hibernate:    DELETE FROM student    WHERE id = ? Hibernate:    DELETE FROM contact    WHERE id= ?</code></pre></div><p>可看到第一步是根據學生 id 查詢資料，藉此取得 FK 的值，也就是聯繫表的 PK。接著在刪除過程中，會先刪除學生，才刪除聯繫方式，避免 FK 關聯不到 PK（違反約束）。</p><h3 id="（四）級聯更新"><a href="#（四）級聯更新" class="headerlink" title="（四）級聯更新"></a>（四）級聯更新</h3><p>以下的 API 是單獨更新學生的聯繫方式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@PutMapping(&quot;/students/&#123;id&#125;/contact&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateStudentContact</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@RequestBody</span> Contact request</span><span class="hljs-params">    )</span> &#123;        Optional&lt;Student&gt; studentOp = studentRepository.findById(id);        <span class="hljs-keyword">if</span> (studentOp.isEmpty()) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();        &#125;        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> studentOp.get();        <span class="hljs-type">Contact</span> <span class="hljs-variable">contact</span> <span class="hljs-operator">=</span> student.getContact();        contact.setEmail(request.getEmail());        contact.setPhone(request.getPhone());        studentRepository.save(student);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>範例程式中，在查詢出學生資料後，隨即取出關聯的 Contact 實體。由於它是 Hibernate 的代理物件，為了不影響級聯的運作，因此實作上是將 request body 的內容更新上去，而不是呼叫「setContact」方法，直接覆蓋掉 Student 實體的 Contact 內容。</p><p>JPA 在 console 印出的指令內容，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">Hibernate:    SELECT s.id, s.name, s.contact_id    FROM student s    WHERE s.id = ?Hibernate:    SELECT c.id, c.email, c.phone    FROM contact c     WHERE c.id = ?Hibernate:    UPDATE contact    SET email = ?,        phone = ?    WHERE id = ?</code></pre></div><p>可看到第一步是查詢學生資料。接著由於呼叫「getContact()」方法的緣故，又引發了對聯繫表的查詢。最後儲存 Student 實體時，才級聯更新 Contact。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch09.4-jpa-one-to-one-relationship">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-mysql-using-jpa-repository/" target="_blank">【Spring Boot】第9.3課－使用 JPA Repository 存取 MySQL 資料庫</a></p><p>下一課：<a href="/articles/spring-boot-jpa-one-to-many-relationship-and-bidirectional-association/" target="_blank">【Spring Boot】第9.5課－使用 JPA 建立一對多關聯，並配置雙向關聯</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第9.3課－使用 JPA Repository 存取 MySQL 資料庫</title>
    <link href="/articles/spring-boot-mysql-using-jpa-repository/"/>
    <url>/articles/spring-boot-mysql-using-jpa-repository/</url>
    
    <content type="html"><![CDATA[<p>為了在 Spring Boot 專案中存取 MySQL 資料庫，我們可借助 Spring Data JPA 框架所提供的 repository 介面。</p><p>本文除了透過內建的 CRUD 方法進行存取，也會設計自己的查詢條件，包含透過方法名稱及原生語法。最後說明如何排序與分頁。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch09.2-mysql-column-definition-with-jpa">點我</a>。</p><h2 id="一、實體類別介紹"><a href="#一、實體類別介紹" class="headerlink" title="一、實體類別介紹"></a>一、實體類別介紹</h2><p>讓我們快速回顧上一篇的實體類別。以下的「Student」類別描述了學生資料，會儲存到資料庫中。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-meta">@EntityListeners(AuditingEntityListener.class)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;        <span class="hljs-meta">@Column(name = &quot;grade&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> grade;    <span class="hljs-meta">@Column(name = &quot;blood_type&quot;)</span>    <span class="hljs-meta">@Enumerated(EnumType.STRING)</span>    <span class="hljs-keyword">private</span> BloodType bloodType;    <span class="hljs-meta">@Column(name = &quot;birthday&quot;, nullable = false)</span>    <span class="hljs-keyword">private</span> LocalDate birthday;        <span class="hljs-meta">@Enumerated(EnumType.STRING)</span>    <span class="hljs-keyword">private</span> BloodType bloodType;        <span class="hljs-meta">@Embedded</span>    <span class="hljs-meta">@AttributeOverride(name = &quot;email&quot;, column = @Column(name = &quot;contact_email&quot;))</span>    <span class="hljs-meta">@AttributeOverride(name = &quot;phone&quot;, column = @Column(name = &quot;contact_phone&quot;))</span>    <span class="hljs-keyword">private</span> Contact contact;        <span class="hljs-meta">@CreatedDate</span>    <span class="hljs-keyword">private</span> LocalDateTime createdTime;    <span class="hljs-meta">@LastModifiedDate</span>    <span class="hljs-keyword">private</span> LocalDateTime updatedTime;    <span class="hljs-meta">@CreatedBy</span>    <span class="hljs-keyword">private</span> String createdBy;    <span class="hljs-meta">@LastModifiedBy</span>    <span class="hljs-keyword">private</span> String updatedBy;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的「BloodType」是個列舉類別，包含 4 種血型。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">BloodType</span> &#123;    A, B, O, AB&#125;</code></pre></div><p>以下的「Contact」類別是描述聯繫方式，包含信箱與電話這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Embeddable</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contact</span> &#123;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String phone;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是<a href="/articles/spring-boot-mysql-column-definition-with-jpa/" target="_blank">上一篇</a>提到的 <code>AuditorAware</code> 元件。用途是當插入或更新資料時，能在實體類別中具有 <code>@CreatedBy</code> 或 <code>@LastModifiedBy</code> 注解的欄位，自動填入使用者資訊，此處以隨機字串代替。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuditorAwareImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuditorAware</span>&lt;String&gt; &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Optional&lt;String&gt; <span class="hljs-title function_">getCurrentAuditor</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">randomId</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();        <span class="hljs-keyword">return</span> Optional.of(randomId);    &#125;&#125;</code></pre></div><h2 id="二、認識-Spring-Data-的-Repository-介面"><a href="#二、認識-Spring-Data-的-Repository-介面" class="headerlink" title="二、認識 Spring Data 的 Repository 介面"></a>二、認識 Spring Data 的 Repository 介面</h2><h3 id="（一）建立-Repository-介面"><a href="#（一）建立-Repository-介面" class="headerlink" title="（一）建立 Repository 介面"></a>（一）建立 Repository 介面</h3><p>在<a href="/articles/spring-boot-bean-ioc-di-and-swap/" target="_blank">第 5 課</a>，我們有練習過建立一個「ProductRepository」介面，將其注入到商業邏輯中。還提供兩種實作類別，分別用 List 與 Map 結構來儲存範例資料。</p><p>本節會使用一個特殊的介面，它是由 Spring Data JPA 所提供，其定位與上述的 ProductRepository 相同。但我們不必親自實作它，而是交給框架處理。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;&#125;</code></pre></div><p>我們建立了叫做「StudentRepository」的介面，並繼承 <code>JpaRepository</code> 介面。繼承時，需在泛型分別傳入實體類別與主鍵類別。</p><h3 id="（二）查詢語法與物件對映"><a href="#（二）查詢語法與物件對映" class="headerlink" title="（二）查詢語法與物件對映"></a>（二）查詢語法與物件對映</h3><p>使用 Spring Data 時，我們最直接感受到的好處，就是「產生查詢語法」與「物件對映」。</p><p>在 <code>JpaRepository</code> 介面，以及它的父介面中，已經有內建一些基本方法。舉例來說，我們可以將 Student 物件傳入 repository 的 <code>save</code> 方法。</p><p>僅僅一個方法呼叫，Spring Data 就會產生類似下面的 MySQL 指令：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `student` (`name`, `grade`, `blood_type`, `birthday`)<span class="hljs-keyword">VALUE</span> (&quot;Vincent&quot;, <span class="hljs-number">4</span>, &quot;A&quot;, &quot;1996-01-01&quot;);</code></pre></div><p>此時該方法會回傳插入成功的資料，而且會包含由 MySQL 產生的 id。</p><p>又或者是呼叫 <code>findById</code> 方法，則會產生如下的指令：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> `student`<span class="hljs-keyword">WHERE</span> `id` <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;</code></pre></div><p>此時該方法除了回傳符合條件的結果，更重要的是資料會被轉換成 Java 物件，也就是 Student。資料庫中的資料，與程式物件互相轉換，這項技術在關聯式資料庫稱為「物件關聯對映」（Object-Relational Mapping，ORM）。</p><p>從上面這兩個例子，我們可看出 Spring Data 會解讀 repository 的方法名稱、傳入參數，以及回傳值型態，產生對應的資料庫語法。</p><p>這段過程是透過底層的 ORM 框架來完成，Spring Data JPA 預設是採用「Hibernate」。</p><h2 id="三、使用-JPA-Repository-進行-CRUD"><a href="#三、使用-JPA-Repository-進行-CRUD" class="headerlink" title="三、使用 JPA Repository 進行 CRUD"></a>三、使用 JPA Repository 進行 CRUD</h2><p>本節讓我們來實際使用 JPA Repository 提供的內建方法。</p><p>為了在程式中有地方呼叫 StudentRepository，讀者可在 Controller 準備 API，屆時便能搭配如 Postman 之類的工具，對後端發送 request。</p><h3 id="（一）插入資料"><a href="#（一）插入資料" class="headerlink" title="（一）插入資料"></a>（一）插入資料</h3><p>以下提供一支 API，用來建立學生資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@PostMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createStudent</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Student student)</span> &#123;        student.setId(<span class="hljs-literal">null</span>);        studentRepository.save(student);        <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> ServletUriComponentsBuilder                .fromCurrentRequestUri()                .path(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)                .build(Map.of(<span class="hljs-string">&quot;id&quot;</span>, student.getId()));        <span class="hljs-keyword">return</span> ResponseEntity.created(uri).build();    &#125;&#125;</code></pre></div><p>呼叫 repository 的 <code>save</code> 方法即可。若 Student 物件的 id 欄位值是 null，則視為插入。反之則視為更新。</p><p>插入資料時，一律由 MySQL 自行產生 id 值，我們無法自行給定。該方法最後會回傳含有 id 的資料，此處附加到 response header 中，讓 API 回傳。</p><p>此時讀者也可順道確認一下，Spring Data JPA 是否有自動在 createdTime、updatedTime、createdBy 與 updatedBy 欄位填入值。</p><h3 id="（二）取得資料"><a href="#（二）取得資料" class="headerlink" title="（二）取得資料"></a>（二）取得資料</h3><p>以下是查詢指定 id 的資料，呼叫 <code>findById</code> 方法即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@GetMapping(&quot;/students/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Student&gt; <span class="hljs-title function_">getStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;        Optional&lt;Student&gt; studentOp = studentRepository.findById(id);        <span class="hljs-keyword">return</span> studentOp.isPresent()                ? ResponseEntity.ok(studentOp.get())                : ResponseEntity.notFound().build();    &#125;&#125;</code></pre></div><p>以下是給予字串 List，查詢多筆指定 id 的資料。呼叫 <code>findAllById</code> 方法即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;            <span class="hljs-meta">@GetMapping(&quot;/students/ids&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Student&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;Long&gt; idList)</span> &#123;        List&lt;Student&gt; students = studentRepository.findAllById(idList);        <span class="hljs-keyword">return</span> ResponseEntity.ok(students);    &#125;&#125;</code></pre></div><p>攜帶 query string 存取此 API 的方式，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">GET /students/ids?idList=111,222,333</code></pre></div><h3 id="（三）更新資料"><a href="#（三）更新資料" class="headerlink" title="（三）更新資料"></a>（三）更新資料</h3><p>以下是更新指定 id 的資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@PutMapping(&quot;/students/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateStudent</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable</span> Long id, <span class="hljs-meta">@RequestBody</span> Student request</span><span class="hljs-params">    )</span> &#123;        Optional&lt;Student&gt; studentOp = studentRepository.findById(id);        <span class="hljs-keyword">if</span> (studentOp.isEmpty()) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();        &#125;        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> studentOp.get();        student.setName(request.getName());        student.setGrade(request.getGrade());        student.setBloodType(request.getBloodType());        student.setBirthday(request.getBirthday());        student.setContact(request.getContact());        studentRepository.save(student);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>在邏輯中，我們先判斷該筆資料是否存在。是的話，就將 request 中的資料更新上去，再呼叫 <code>save</code> 方法儲存。由於呼叫該方法時，table 已有該 id 的資料，因此會執行更新操作，而非插入。</p><h3 id="（四）刪除資料"><a href="#（四）刪除資料" class="headerlink" title="（四）刪除資料"></a>（四）刪除資料</h3><p>以下是刪除指定 id 的資料，呼叫 <code>deleteById</code> 方法即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@DeleteMapping(&quot;/students/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Long id)</span> &#123;        studentRepository.deleteById(id);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>其他內建方法尚有 <code>saveAll</code>、<code>deleteAllById</code>、<code>existsById</code>、<code>count</code> 等，讀者可自行探索。</p><h2 id="四、自定義查詢條件"><a href="#四、自定義查詢條件" class="headerlink" title="四、自定義查詢條件"></a>四、自定義查詢條件</h2><p>我們能在 repository 中，依照特定的方法命名規則，設計自己的查詢條件。</p><p>筆者在<a href="/articles/spring-boot-mongo-repository-customize-query/" target="_blank">第 8.3 課</a>已經設計過各種查詢 MongoDB 的方法，以及排序的方式。雖然是另一款資料庫，但 Spring Data 提供的 repository，其使用方式大致都相同。</p><p>本節僅挑選一部份做快速的示範。更多命名方式，讀者可參考 Spring Data JPA 官方文件。</p><h3 id="（一）相等條件"><a href="#（一）相等條件" class="headerlink" title="（一）相等條件"></a>（一）相等條件</h3><p>以下方法是以名字做為查詢條件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;    Student <span class="hljs-title function_">findByName</span><span class="hljs-params">(String name)</span>;&#125;</code></pre></div><p>方法名稱中，在 <code>findBy</code> 關鍵字後面緊接著實體類別的欄位名稱即可。</p><p>以下方法是查詢內部欄位，分別是將聯繫方式的信箱與電話當作條件。只要在方法名稱將欄位的「路徑」寫出即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;    Student <span class="hljs-title function_">findByContactEmail</span><span class="hljs-params">(String email)</span>;    Student <span class="hljs-title function_">findByContactPhone</span><span class="hljs-params">(String phone)</span>;&#125;</code></pre></div><h3 id="（二）範圍條件"><a href="#（二）範圍條件" class="headerlink" title="（二）範圍條件"></a>（二）範圍條件</h3><p>以下 2 個方法，分別是查詢年級大於等於，和小於等於某個值的資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;    List&lt;Student&gt; <span class="hljs-title function_">findByGradeGreaterThanEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> from)</span>;    List&lt;Student&gt; <span class="hljs-title function_">findByGradeLessThanEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> to)</span>;&#125;</code></pre></div><p>數值欄位可使用 <code>GreaterThanEqual</code>、<code>GreaterThan</code>、<code>LessThanEqual</code> 與 <code>LessThan</code> 關鍵字。</p><p>以下 2 個方法，分別是查詢生日在某天之後，和之前的資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;    List&lt;Student&gt; <span class="hljs-title function_">findByBirthdayAfter</span><span class="hljs-params">(LocalDate from)</span>;    List&lt;Student&gt; <span class="hljs-title function_">findByBirthdayBefore</span><span class="hljs-params">(LocalDate to)</span>;&#125;</code></pre></div><p>日期欄位是使用 <code>After</code> 與 <code>Before</code> 關鍵字。</p><h3 id="（三）組合多個條件"><a href="#（三）組合多個條件" class="headerlink" title="（三）組合多個條件"></a>（三）組合多個條件</h3><p>查詢條件可透過 <code>And</code> 或 <code>Or</code> 的邏輯組合起來。</p><p>以下的條件，是聯繫方式的信箱等於某個值，或電話等於某個值。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;    List&lt;Student&gt; <span class="hljs-title function_">findByContactEmailOrContactPhone</span><span class="hljs-params">(String email, String phone)</span>;&#125;</code></pre></div><h3 id="（四）原生語法"><a href="#（四）原生語法" class="headerlink" title="（四）原生語法"></a>（四）原生語法</h3><p>Spring Data 也支援我們直接撰寫原生語法，而方法可隨意取名。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;    <span class="hljs-meta">@Query(</span><span class="hljs-meta">            nativeQuery = true,</span><span class="hljs-meta">            value = &quot;&quot;&quot;</span><span class="hljs-meta">                SELECT *</span><span class="hljs-meta">                FROM `student`</span><span class="hljs-meta">                WHERE `contact_email` = ?1 OR `contact_phone` = ?2</span><span class="hljs-meta">            &quot;&quot;&quot;</span><span class="hljs-meta">    )</span>    List&lt;Student&gt; <span class="hljs-title function_">findByContact</span><span class="hljs-params">(String email, String phone)</span>;&#125;</code></pre></div><p>使用 <code>@Query</code> 注解，可以傳入字串提供語法。而當中的「?1」、「?2」等符號，代表要取用方法的第幾個參數（位置從 1 開始算）。並且 <code>nativeQuery</code> 參數需給予 true 值，代表這是原生語法。</p><p>要注意的是，SQL 語法結尾請不要加分號 ;，避免被認為語法有誤。例如上述的「?2」代表第二個參數，但 JPA 會看成「?2;」，並認為我們寫錯了，拋出「Ordinal parameter label was not an integer」的例外訊息。</p><p>又或者是本文第五節的排序，假設原生語法寫成 <code>SELECT * FROM student;</code>，則 JPA 會將排序語法直接附加在後，變成：</p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span><span class="hljs-keyword">FROM</span> `student`;<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> `grade` <span class="hljs-keyword">ASC</span></code></pre></div><p>此時底層的 Hibernate 在執行時，勢必會拋出語法錯誤的例外。</p><h2 id="五、排序與分頁"><a href="#五、排序與分頁" class="headerlink" title="五、排序與分頁"></a>五、排序與分頁</h2><h3 id="（一）排序"><a href="#（一）排序" class="headerlink" title="（一）排序"></a>（一）排序</h3><p>要透過 repository 的方法進行排序，首先得建立 <code>Sort</code> 物件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">private</span> Sort <span class="hljs-title function_">createSort</span><span class="hljs-params">(String field, String direction)</span> &#123;        <span class="hljs-keyword">if</span> (field == <span class="hljs-literal">null</span> &amp;&amp; direction == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> Sort.unsorted();        &#125;        <span class="hljs-keyword">if</span> (field == <span class="hljs-literal">null</span> ^ direction == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> Sort.unsorted();        &#125;        Sort.Order order;        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;asc&quot;</span>.equalsIgnoreCase(direction)) &#123;            order = Sort.Order.asc(field);        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;desc&quot;</span>.equalsIgnoreCase(direction)) &#123;            order = Sort.Order.desc(field);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> Sort.unsorted();        &#125;        <span class="hljs-keyword">return</span> Sort.by(List.of(order));    &#125;&#125;</code></pre></div><p>排序的欄位與方向必須一起提供，或兩者都不提供。若有不合理的值，便呼叫 <code>Sort.unsorted</code> 方法，視為不排序。</p><p>呼叫 <code>Sort.Order.asc</code> 或 <code>Sort.Order.desc</code> 方法，傳入欄位名稱，分別可建立遞增或遞減的排序方式，其型態為 <code>Order</code>。</p><p>將一至多個 <code>Order</code> 物件傳入 <code>Sort.by</code> 方法，可得到 <code>Sort</code> 物件。它代表整體的排序規則，實現多重排序也不成問題。</p><p>建立出 <code>Sort</code> 物件後，傳入 repository 的 <code>findAll</code> 方法即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@GetMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Student&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> String sortField,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> String sortDirection</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-type">Sort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> createSort(sortField, sortDirection);        List&lt;Student&gt; students = studentRepository.findAll(sort);        <span class="hljs-keyword">return</span> ResponseEntity.ok(students);    &#125;        <span class="hljs-keyword">private</span> Sort <span class="hljs-title function_">createSort</span><span class="hljs-params">(String field, String direction)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><h3 id="（二）分頁"><a href="#（二）分頁" class="headerlink" title="（二）分頁"></a>（二）分頁</h3><p>當資料量太多，實務上會在排序之後，藉由「分頁」（pagination）的做法，分批從資料庫取得資料，避免造成系統負擔。</p><p>要透過 repository 的方法進行排序與分頁，需在方法傳入 <code>Pageable</code> 型態的參數，提供分頁的方式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Student, Long&gt; &#123;    <span class="hljs-meta">@Query(</span><span class="hljs-meta">            nativeQuery = true,</span><span class="hljs-meta">            value = &quot;SELECT * FROM `student`&quot;</span><span class="hljs-meta">    )</span>    List&lt;Student&gt; <span class="hljs-title function_">find</span><span class="hljs-params">(Pageable pageable)</span>;&#125;</code></pre></div><p>以下是建立 <code>Pageable</code> 物件的方式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">private</span> Pageable <span class="hljs-title function_">createPageable</span><span class="hljs-params">(Integer page, Integer size, Sort sort)</span> &#123;        <span class="hljs-keyword">if</span> (page == <span class="hljs-literal">null</span> &amp;&amp; size == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> Pageable.unpaged(sort);        &#125;        <span class="hljs-keyword">if</span> (page == <span class="hljs-literal">null</span> ^ size == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> Pageable.unpaged(sort);        &#125;        <span class="hljs-keyword">return</span> PageRequest.of(page, size, sort);    &#125;&#125;</code></pre></div><p>這個 <code>Pageable</code> 是一個介面，而 Spring Data 內建了叫做 <code>PageRequest</code> 的實作類別。</p><p>分頁的頁數與每頁筆數必須一起提供，或兩者都不提供。若有不合理的值，便呼叫 <code>Pageable.unpaged</code> 方法，視為不分頁。</p><p>呼叫 <code>PageRequest.of</code> 方法，依序傳入「第幾頁」、「每頁筆數」，以及前面提到的 <code>Sort</code> 物件，就能建立出 <code>PageRequest</code> 物件。</p><p>最後將 <code>Pageable</code> 物件傳入 repository 的方法即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@GetMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Student&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> String sortField,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> String sortDirection,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> Integer page,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> Integer size</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-type">Sort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> createSort(sortField, sortDirection);        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> createPageable(page, size, sort);        List&lt;Student&gt; students = studentRepository.find(pageable);        <span class="hljs-keyword">return</span> ResponseEntity.ok(students);    &#125;        <span class="hljs-keyword">private</span> Sort <span class="hljs-title function_">createSort</span><span class="hljs-params">(String field, String direction)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;        <span class="hljs-keyword">private</span> Pageable <span class="hljs-title function_">createPageable</span><span class="hljs-params">(Integer page, Integer size, Sort sort)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>本文示範了使用 JPA Repository 對單一 table 進行 CRUD。接下來讓我們進入 2 張 table 的範疇，學習如何配置資料表的關聯。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch09.3-mysql-using-jpa-repository">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-mysql-column-definition-with-jpa/" target="_blank">【Spring Boot】第9.2課－使用 JPA 設計實體類別與 MySQL 資料表欄位</a></p><p>下一課：<a href="/articles/spring-boot-jpa-one-to-one-relationship/" target="_blank">【Spring Boot】第9.4課－使用 JPA 配置資料表關聯（以一對一關聯為例）</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第9.2課－使用 JPA 設計實體類別與 MySQL 資料表欄位</title>
    <link href="/articles/spring-boot-mysql-column-definition-with-jpa/"/>
    <url>/articles/spring-boot-mysql-column-definition-with-jpa/</url>
    
    <content type="html"><![CDATA[<p>在上一篇，我們了解可藉由定義實體類別，讓 Spring Data JPA 建立出資料表。而本文會介紹各種設定資料表欄位的方式，包含欄位名稱、長度與唯一性等。</p><p>此外也會重複運用具有相同設定的欄位，包含嵌入物件與繼承基底類別。最後說明如何在插入或更新資料時，自動在欄位填入日期時間與使用者資料。</p><hr><h2 id="一、實體類別介紹"><a href="#一、實體類別介紹" class="headerlink" title="一、實體類別介紹"></a>一、實體類別介紹</h2><p>Spring Data JPA 允許我們在程式中，透過定義實體類別的方式，來設計資料表（table）。所謂的實體類別，指的是要儲存到資料庫的資料類別。</p><p>以下建立一個實體類別，描述了學生資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.persistence.*;<span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> grade;    <span class="hljs-keyword">private</span> BloodType bloodType;    <span class="hljs-keyword">private</span> LocalDate birthday;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>該類別叫做「Student」，目前包含 id、名字、年級、血型與生日，共 5 個欄位。</p><p>其中的「BloodType」是個「列舉」（enumeration）類別，包含 4 種血型。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">BloodType</span> &#123;    A, B, O, AB&#125;</code></pre></div><h2 id="二、設計資料表欄位"><a href="#二、設計資料表欄位" class="headerlink" title="二、設計資料表欄位"></a>二、設計資料表欄位</h2><p>實體類別會對應到資料庫的 table，因此維護該類別，就相當於維護 table。在實體類別設計欄位時，會搭配使用 @Column 注解，透過它的參數進行設定。</p><table><thead><tr><th>參數</th><th>設定項目</th><th>補充說明</th></tr></thead><tbody><tr><td>name</td><td>欄位名稱</td><td>針對同一個欄位，我們可以在實體類別與 table，分別使用不同的名稱。</td></tr><tr><td>length</td><td>字串長度</td><td>超出的部份會被截斷（truncate）。</td></tr><tr><td>nullable</td><td>值是否可為 null</td><td>Java 基本型態預設為 false；參考型態（如 String）預設為 true。</td></tr><tr><td>unique</td><td>值是否唯一</td><td>若為 true，會自動建立「唯一索引」。</td></tr><tr><td>precision</td><td>整數與小數的總位數</td><td>適用於 Java 的 BigDecimal 型態；MySQL 的 DECIMAL 型態。</td></tr><tr><td>scale</td><td>小數在 precision 所佔的位數</td><td>適用於 Java 的 BigDecimal 型態；MySQL 的 DECIMAL 型態。</td></tr></tbody></table><p>以下是將 <code>@Column</code> 注解用在實體類別上。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-meta">@Column(name = &quot;name&quot;, length = 30, unique = true, nullable = false)</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-meta">@Column(name = &quot;grade&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> grade;    <span class="hljs-meta">@Column(name = &quot;blood_type&quot;)</span>    <span class="hljs-meta">@Enumerated(EnumType.STRING)</span>    <span class="hljs-keyword">private</span> BloodType bloodType;    <span class="hljs-meta">@Column(name = &quot;birthday&quot;, nullable = false)</span>    <span class="hljs-keyword">private</span> LocalDate birthday;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>另外，如果欄位型態是一個「列舉」（Enum），不妨冠上 <code>@Enumerated</code> 注解，並設定以 Enum 值的名字來儲存。否則預設會以序數（ordinal）來儲存，可讀性較差。</p><p>在網路上其他文章中，讀者可能會注意到那些範例程式，即便實體類別的欄位名與 table 欄位一致，依然會再度使用 <code>@Column</code> 注解來設定 table 欄位名稱。筆者認為這樣的好處，是能避免日後在實體類別修改欄位名稱，無意間影響與 table 的對應關係。</p><p>設定完成後，請讀者啟動程式，讓 Spring Data JPA 自動在資料庫產生 table。下圖是在 MySQL 使用 <code>DESCRIBE</code> 指令，確認 table 的定義。<br><img src="https://chikuwacode.github.io/articles/spring-boot-mysql-column-definition-with-jpa/mysql-workbench-describe-table-with-more-fields.png"></p><p>在結果中，可看到欄位型態、是否為唯一欄位，或者是否允許 null 值等資訊。</p><h2 id="三、嵌入物件欄位"><a href="#三、嵌入物件欄位" class="headerlink" title="三、嵌入物件欄位"></a>三、嵌入物件欄位</h2><p>我們也可透過「嵌入」（embed）的方式，將自定義的物件放入實體類別中。</p><p>以下建立叫做「Contact」的類別，描述了聯繫方式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Embeddable</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contact</span> &#123;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String phone;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>此類別包含信箱與電話這 2 個欄位。為了將它嵌入到實體類別中，需冠上 <code>@Embeddable</code> 注解。這麼做的好處，是日後若有其他實體類別（如老師、員工、公司等），均可重複使用。</p><p>接著回到 Student 實體類別，使用 <code>@Embedded</code> 注解嵌入 Contact 類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Embedded</span>    <span class="hljs-meta">@AttributeOverride(name = &quot;email&quot;, column = @Column(name = &quot;contact_email&quot;))</span>    <span class="hljs-meta">@AttributeOverride(name = &quot;phone&quot;, column = @Column(name = &quot;contact_phone&quot;))</span>    <span class="hljs-keyword">private</span> Contact contact;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>為了在實體類別對嵌入的物件欄位進行設定，需使用 <code>@AttributeOverride</code> 注解。它具有兩個參數，name 是指向內部的欄位；而 <code>column</code> 則是傳入前面介紹過的 <code>@Column</code> 注解，進行設定。</p><h2 id="四、自動填入日期時間與使用者"><a href="#四、自動填入日期時間與使用者" class="headerlink" title="四、自動填入日期時間與使用者"></a>四、自動填入日期時間與使用者</h2><h3 id="（一）前言"><a href="#（一）前言" class="headerlink" title="（一）前言"></a>（一）前言</h3><p>我們可能會想記錄每一筆資料的異動資訊。比方說文章是何時發表的、何時修改的、誰建立的、誰更新的。透過 Spring Data 提供的「JPA Auditing」功能，可以幫助我們做這件事。</p><p>請先在啟動類別冠上 <code>@EnableJpaAuditing</code> 注解，以啟用此功能。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><span class="hljs-meta">@EnableJpaAuditing</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Application</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        SpringApplication.run(Application.class, args);    &#125;&#125;</code></pre></div><p>接著在實體類別類別冠上 <code>@EntityListeners</code> 注解，註冊這個功能。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-meta">@EntityListeners(AuditingEntityListener.class)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><h3 id="（二）填入日期時間"><a href="#（二）填入日期時間" class="headerlink" title="（二）填入日期時間"></a>（二）填入日期時間</h3><p>以下在 Student 實體類別中，添加了 2 個欄位，分別代表資料的建立與更新時間。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-meta">@EntityListeners(AuditingEntityListener.class)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-comment">// ...</span>        <span class="hljs-meta">@Column(name = &quot;created_time&quot;, nullable = false)</span>    <span class="hljs-meta">@CreatedDate</span>    <span class="hljs-keyword">private</span> LocalDateTime createdTime;    <span class="hljs-meta">@Column(name = &quot;updated_time&quot;, nullable = false)</span>    <span class="hljs-meta">@LastModifiedDate</span>    <span class="hljs-keyword">private</span> LocalDateTime updatedTime;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>只要在欄位分別冠上 <code>@CreatedDate</code> 和 <code>@LastModifiedDate</code> 注解即可。Spring Data JPA 會在插入或更新資料時，將日期時間的值賦予給這些欄位。</p><p>當插入資料時，具有 <code>@CreatedDate</code> 或 <code>@LastModifiedDate</code> 注解的欄位，都會同時被賦予值。而後續更新資料時，只會刷新 <code>@LastModifiedDate</code> 的欄位。</p><h3 id="（三）填入使用者"><a href="#（三）填入使用者" class="headerlink" title="（三）填入使用者"></a>（三）填入使用者</h3><p>以下在 Student 實體類別中，添加了 2 個欄位，分別代表資料的建立者與更新者。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-meta">@EntityListeners(AuditingEntityListener.class)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-comment">// ...</span>        <span class="hljs-meta">@Column(name = &quot;created_by&quot;, nullable = false)</span>    <span class="hljs-meta">@CreatedBy</span>    <span class="hljs-keyword">private</span> String createdBy;    <span class="hljs-meta">@Column(name = &quot;updated_by&quot;, nullable = false)</span>    <span class="hljs-meta">@LastModifiedBy</span>    <span class="hljs-keyword">private</span> String updatedBy;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>接著在欄位分別冠上 <code>@CreatedBy</code> 或 <code>@LastModifiedBy</code> 注解。Spring Data JPA 會在插入或更新資料時，將代表使用者的值賦予給這些欄位。</p><p>那麼使用者的資料從哪裡來呢？這時我們需要準備一個實作 <code>AuditorAware</code> 介面的元件，讓它告訴 Spring Data JPA。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuditorAwareImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AuditorAware</span>&lt;String&gt; &#123;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> Optional&lt;String&gt; <span class="hljs-title function_">getCurrentAuditor</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">randomId</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();        <span class="hljs-keyword">return</span> Optional.of(randomId);    &#125;&#125;</code></pre></div><p>這個 <code>AuditorAware</code> 介面接收一個泛型類別，它需要與那些冠上 <code>@CreatedBy</code> 和 <code>@LastModifiedBy</code> 注解的欄位型態相同。由於實體類別中的 createdBy 和 updatedBy 欄位是字串，因此泛型類別應傳入 String。</p><p>接著覆寫 <code>getCurrentAuditor</code> 方法，它會在資料正要被儲存時，由 Spring Data JPA 觸發。其回傳值會被賦予給具有這兩種注解的欄位。此處回傳隨機字串，當作使用者的 id。</p><p>附帶一提，若讀者所開發的專案有引進 Spring Security，那就可以從「Security Context」獲取當前使用者的資訊。</p><h2 id="五、共享相同的欄位設定"><a href="#五、共享相同的欄位設定" class="headerlink" title="五、共享相同的欄位設定"></a>五、共享相同的欄位設定</h2><h3 id="（一）用於嵌入欄位"><a href="#（一）用於嵌入欄位" class="headerlink" title="（一）用於嵌入欄位"></a>（一）用於嵌入欄位</h3><p>在本文第三節，我們在 Student 實體類別嵌入自定義的 Contact 類別，代表聯繫方式。</p><p>Spring Data JPA 並不支援直接在 Contact 類別內部使用 <code>@Column</code> 注解來設定。因此若將 Contact 也嵌入到其他實體類別，且內部欄位的設定均相同，那麼就會持續使用 <code>@AttributeOverride</code> 注解，寫出重複的設定。</p><p>但重複利用欄位設定這個想法，還是可以實現的。我們首先需建立一個父類別，將要共享的欄位抽離過去。此外，為了強調該父類別是「基底類別」，不會被用來建立物件，故宣告為抽象。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@MappedSuperclass</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseContact</span> &#123;        <span class="hljs-meta">@Column(name = &quot;contact_email&quot;, length = 50)</span>    <span class="hljs-keyword">private</span> String email;    <span class="hljs-meta">@Column(name = &quot;contact_phone&quot;, length = 50)</span>    <span class="hljs-keyword">private</span> String phone;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>該基底類別冠上了 <code>@MappedSuperclass</code> 注解，用途是讓子類別繼承後，能將父類別的欄位也連動到資料庫的 table 欄位上。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Embeddable</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contact</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseContact</span> &#123;&#125;</code></pre></div><p>如此一來，在 Student 實體類別就不必透過 <code>@AttributeOverride</code> 注解來設定欄位值了。除非有少數特例需個別設定，否則可將其移除。</p><h3 id="（二）用於實體類別"><a href="#（二）用於實體類別" class="headerlink" title="（二）用於實體類別"></a>（二）用於實體類別</h3><p>這個 <code>@MappedSuperclass</code> 注解，亦可用於那些實體類別都具備的欄位，例如 id、建立與更新資料的時間、建立與更新資料的人。</p><p>以下針對實體類別建立了一個基底類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@MappedSuperclass</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseEntity</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-meta">@Column(name = &quot;created_time&quot;, nullable = false)</span>    <span class="hljs-meta">@CreatedDate</span>    <span class="hljs-keyword">private</span> LocalDateTime createdTime;    <span class="hljs-meta">@Column(name = &quot;updated_time&quot;, nullable = false)</span>    <span class="hljs-meta">@LastModifiedDate</span>    <span class="hljs-keyword">private</span> LocalDateTime updatedTime;    <span class="hljs-meta">@Column(name = &quot;created_by&quot;, nullable = false)</span>    <span class="hljs-meta">@CreatedBy</span>    <span class="hljs-keyword">private</span> String createdBy;    <span class="hljs-meta">@Column(name = &quot;updated_by&quot;, nullable = false)</span>    <span class="hljs-meta">@LastModifiedBy</span>    <span class="hljs-keyword">private</span> String updatedBy;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>而實體類別只要留下自身特有的欄位，並繼承該基底類別即可。一旦基底類別的設計有改動，則所有實體類別都會生效。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-meta">@EntityListeners(AuditingEntityListener.class)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseEntity</span> &#123;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>本文介紹了如何透過實體類別，設計資料庫中 table 的欄位，讀者可透過重啟程式，印證 table 的變化。</p><p>我們尚未印證本文第三節的 <code>AuditorAware</code> 元件，在插入或更新資料時的效果。下一篇將使用 Spring Data JPA 提供的介面，實際進行 CRUD。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch09.2-mysql-column-definition-with-jpa">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-setup-mysql-and-introduce-jpa/" target="_blank">【Spring Boot】第9.1課－準備 MySQL 資料庫與認識 Spring Data JPA</a></p><p>下一課：<a href="/articles/spring-boot-mysql-using-jpa-repository/" target="_blank">【Spring Boot】第9.3課－使用 JPA Repository 存取 MySQL 資料庫</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第9.1課－準備 MySQL 資料庫與認識 Spring Data JPA</title>
    <link href="/articles/spring-boot-setup-mysql-and-introduce-jpa/"/>
    <url>/articles/spring-boot-setup-mysql-and-introduce-jpa/</url>
    
    <content type="html"><![CDATA[<p>在<a href="/articles/spring-boot-mongodb-introduction-and-setup/" target="_blank">第 8 課</a>系列，我們了解如何在 Spring Boot 操作 MongoDB。而第 9 課系列要學習的是操作 MySQL 資料庫，它是一種關聯式資料庫，具有嚴謹的性質。它除了是一般課程常見的題材，幾乎也是職缺的必備要求。</p><p>本文會啟動 MySQL 的服務，並在 Spring Boot 專案中配置各種參數，確認可以連線上。最後介紹「Spring Data JPA」這套框架，了解它的由來。</p><hr><h2 id="一、準備-MySQL-環境"><a href="#一、準備-MySQL-環境" class="headerlink" title="一、準備 MySQL 環境"></a>一、準備 MySQL 環境</h2><h3 id="（一）Docker-容器"><a href="#（一）Docker-容器" class="headerlink" title="（一）Docker 容器"></a>（一）Docker 容器</h3><p>讀者可在命令列（command line）環境下，透過 Docker 指令啟動 MySQL 的服務。</p><div class="code-wrapper"><pre><code class="hljs sh">docker run -d --name <span class="hljs-string">&quot;MySQL_8.2.0&quot;</span> -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 mongo:8.2.0</code></pre></div><p>以上取用的 MySQL 版本為 8.2.0。容器取名為「MySQL_8.2.0」，運行在 3306 的 port 號上。而 root 帳號的密碼設為「123456」。</p><p>其他版本可參考 <a href="https://hub.docker.com/_/mysql">Docker Hub</a>。關於 Docker 的操作，本文將不詳細介紹。</p><h3 id="（二）圖形化介面工具"><a href="#（二）圖形化介面工具" class="headerlink" title="（二）圖形化介面工具"></a>（二）圖形化介面工具</h3><p>為了在後續的練習中能夠查詢資料庫，直接確認裡面的資料，讀者可安裝圖形化介面（GUI）工具。本文選擇「<a href="https://dev.mysql.com/downloads/workbench/">Workbench</a>」。</p><p>開啟 GUI 後，點擊「MySQL Connections」字樣旁邊的「+」號，會出現資料庫連線設定的視窗。若讀者想存取不同伺服器上的資料庫，就能在這裡建立多個需要的連線。<br><img src="https://chikuwacode.github.io/articles/spring-boot-setup-mysql-and-introduce-jpa/mysql-workbench-setup-new-connection.png"></p><p>在上圖中，「Connection name」欄位是為這個連線命名，方便我們在 GUI 辨識。其他欄位則填寫資料庫的位址、port 號與帳號。至於密碼，需點擊「Store in Vault …」後，在小視窗輸入。</p><p>最後按下「OK」，即可建立連線。</p><h3 id="（三）建立資料庫"><a href="#（三）建立資料庫" class="headerlink" title="（三）建立資料庫"></a>（三）建立資料庫</h3><p>按下 GUI 上方的「SQL +」按鈕，可開啟查詢視窗。下圖撰寫了兩句語法，第一句是建立名稱為「school」的資料庫，第二句是切換過去。<br><img src="https://chikuwacode.github.io/articles/spring-boot-setup-mysql-and-introduce-jpa/mysql-workbench-use-query-to-create-database.png"></p><div class="code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE `school`;USE `school`;</code></pre></div><p>按下閃電符號後，就會執行視窗中的指令。以上這些操作，其實不透過指令，也能藉由 GUI 完成，讀者可自行探索。</p><h2 id="二、準備程式專案"><a href="#二、準備程式專案" class="headerlink" title="二、準備程式專案"></a>二、準備程式專案</h2><h3 id="（一）添加依賴"><a href="#（一）添加依賴" class="headerlink" title="（一）添加依賴"></a>（一）添加依賴</h3><p>本節讓我們在 Spring Boot 專案中串接資料庫。請在 pom.xml 檔案添加「Spring Data JPA」與「MySQL Connector」的依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>如果讀者有用過 JDBC（Java Database Connectivity），應該對存取資料庫的程式流程還留有一點印象，大致包含以下步驟：</p><ol><li>建立資料庫連線。</li><li>撰寫原生 SQL 語法，產生「Statement」物件。</li><li>將裝有查詢結果的「Result Set」物件，轉換成商業邏輯要用的程式物件。</li><li>釋放資源。</li></ol><p>由於太過繁瑣，於是「Spring Data JPA」這套框架封裝了此過程，讓開發者能更輕鬆地存取資料庫。</p><p>事實上，Spring Data JPA 或 JDBC 並非只能用來存取 MySQL 而已。其他常見的關聯式資料庫，如 SQL Server、Oracle 與 PostgreSQL 也都支援，因為這些資料庫廠商提供了「驅動程式」（Driver）。</p><h3 id="（二）配置參數"><a href="#（二）配置參數" class="headerlink" title="（二）配置參數"></a>（二）配置參數</h3><p>請在專案的「src\main\resources」路徑下，找到一個叫做「application.properties」的配置檔，並在裡頭撰寫設定值。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-comment"># 資料來源</span><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/school</span><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">123456</span><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.cj.jdbc.Driver</span><span class="hljs-comment"></span><span class="hljs-comment"># 資料庫資訊</span><span class="hljs-attr">spring.jpa.properties.hibernate.dialect</span>=<span class="hljs-string">org.hibernate.dialect.MySQLDialect</span><span class="hljs-attr">spring.jpa.properties.hibernate.dialect_version</span>=<span class="hljs-string">8</span><span class="hljs-attr">spring.jpa.properties.hibernate.dialect.storage_engine</span>=<span class="hljs-string">innodb</span><span class="hljs-comment"></span><span class="hljs-comment"># 資料表配置</span><span class="hljs-attr">spring.jpa.hibernate.ddl-auto</span>=<span class="hljs-string">update</span><span class="hljs-comment"></span><span class="hljs-comment"># 是否在 console 印出 SQL 指令並對其格式化</span><span class="hljs-attr">spring.jpa.properties.hibernate.show_sql</span>=<span class="hljs-string">true</span><span class="hljs-attr">spring.jpa.properties.hibernate.format_sql</span>=<span class="hljs-string">true</span></code></pre></div><p>首先提供資料來源（data source），包含 MySQL 的位址、帳密，以及驅動程式的 package 路徑。此處連線到叫做「school」的資料庫。而驅動程式是來自於前面添加的「mysql-connector-j」依賴。</p><p>若讀者未來要在 Docker 容器中運行 Spring Boot，可能需將網域從「localhost」改為「host.docker.internal」，如下：</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://host.docker.internal:3306/school</span></code></pre></div><p>Spring Data JPA 預設是先封裝另一個叫做「Hibernate」的框架，而它又封裝了 JDBC。Hibernate 提供了與資料庫互動的強大功能，本身可獨立使用。Spring Data JPA 只是將其整合進來，讓我們容易應用於 Spring Boot 程式中罷了。</p><p>為了讓 Hibernate 根據不同的資料庫執行正確的指令，我們需要提供代表資料庫種類的「方言」，以及資料庫的版本與儲存引擎。此處提供 <code>MySQLDialect</code> 方言、版本 8 與 InnoDB 儲存引擎。</p><p>Spring Data JPA 允許我們在程式中直接定義資料表（table），並於啟動 Spring Boot 程式時，讓 Hibernate 自動去資料庫中做配置。有以下幾個選項。</p><ul><li>create：重新建立 table，故原有的資料會遺失，請慎用。</li><li>create-drop：同 create，且程式關閉後，會自動刪除 table。</li><li>update：會根據我們的定義去更新 table，補上新欄位，但不刪除舊欄位。</li><li>validate：會檢查 table 是否缺少我們在程式中定義的欄位。若有，則拋出例外，具有提醒的效果。</li><li>none：不做自動配置。</li></ul><p>最後請啟動 Spring Boot。若 console 沒有出現 exception 訊息，代表有成功連線到 MySQL 的服務。</p><p>這份叫做 application.properties 的配置檔，在<a href="/articles/spring-boot-application-properties-configuration/" target="_blank">第 6 課</a>有專門介紹。讀者只要知道 Spring Data JPA 會從中讀取指定名稱的設定值即可。</p><h3 id="三、定義資料的實體類別"><a href="#三、定義資料的實體類別" class="headerlink" title="三、定義資料的實體類別"></a>三、定義資料的實體類別</h3><p>在資料庫中，每張 table 在程式中都對應到一個實體（entity）類別。比方說想儲存學生資料，那就在程式中設計對應的類別，如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.persistence.*;<span class="hljs-meta">@Entity</span><span class="hljs-meta">@Table(name = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>    <span class="hljs-keyword">private</span> Long id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> grade;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>該類別叫做「Student」，包含 id、名字與年級，共 3 個欄位。</p><p>使用 <code>@Entity</code> 注解，代表它是要儲存到資料庫的實體類別。而 <code>@Table</code> 注解，則設定它在資料庫中，要對應到叫做「student」的 table 。</p><p>在 id 欄位，冠上了 <code>@Id</code> 注解，代表它是 table 中的主鍵（Primary Key，PK）。而 <code>@GeneratedValue</code> 注解，則設定主鍵值的產生方式。由於 MySQL 支援自增長（auto increment）的流水號 id，因此選擇 <code>GenerationType.IDENTITY</code>。</p><p>重新啟動 Spring Boot，讀者便可在 GUI 中看到建立好的 table 了。<br><img src="https://chikuwacode.github.io/articles/spring-boot-setup-mysql-and-introduce-jpa/mysql-workbench-describe-table-with-few-fields.png"></p><h2 id="四、Spring-Data-JPA-介紹"><a href="#四、Spring-Data-JPA-介紹" class="headerlink" title="四、Spring Data JPA 介紹"></a>四、Spring Data JPA 介紹</h2><p>在本文第二節，我們添加了「Spring Data JPA」的依賴，本節將進一步介紹。</p><h3 id="（一）JDBC-使用範例"><a href="#（一）JDBC-使用範例" class="headerlink" title="（一）JDBC 使用範例"></a>（一）JDBC 使用範例</h3><p>當 JDBC 結合對應的驅動程式，便可存取 MySQL 等關聯式資料庫，以下為示意程式：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://localhost:3306/school&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;        List&lt;Student&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();                <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 建立連線，用原生語法查詢</span>            connection = DriverManager.getConnection(url, username, password);            statement = connection.createStatement();            resultSet = statement.executeQuery(<span class="hljs-string">&quot;SELECT * FROM `student`;&quot;</span>);                        <span class="hljs-comment">// 轉換成商業邏輯物件</span>            <span class="hljs-keyword">while</span> (resultSet.next()) &#123;                <span class="hljs-type">Long</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;id&quot;</span>);                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getString(<span class="hljs-string">&quot;name&quot;</span>);                <span class="hljs-type">int</span> <span class="hljs-variable">grade</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-string">&quot;grade&quot;</span>);                students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(id, name, grade));            &#125;        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;            <span class="hljs-comment">// ...</span>        &#125; <span class="hljs-keyword">finally</span> &#123;            <span class="hljs-comment">// 釋放 Connection、Statement、ResultSet 的資源 ...</span>        &#125;                <span class="hljs-comment">// 運用商業邏輯物件 ...</span>    &#125;&#125;</code></pre></div><p>由於使用程式碼操作的過程太繁瑣，因此有些框架將它封裝起來。</p><h3 id="（二）物件關聯對映（ORM）"><a href="#（二）物件關聯對映（ORM）" class="headerlink" title="（二）物件關聯對映（ORM）"></a>（二）物件關聯對映（ORM）</h3><p>示意程式中，有個環節是將商業邏輯物件與資料庫的資料互相轉換。比方說查詢時，需取出結果中的每個欄位值，在程式中建立出物件；插入或更新時，則需拼湊出 SQL 語法。</p><p>因此，「物件關聯對映」（Object-Relational Mapping，ORM）這項技術出現了，為的就是封裝這段轉換過程。其中 Hibernate、MyBatis、EclipseLink 等 ORM 框架就有提供這項功能，可單獨引進使用。</p><p>這些 ORM 框架，並不是只有提供物件和資料之間的轉換功能而已，它們本身就是對整個使用 JDBC 的過程進行封裝。</p><h3 id="（三）Spring-Data-JPA-框架"><a href="#（三）Spring-Data-JPA-框架" class="headerlink" title="（三）Spring Data JPA 框架"></a>（三）Spring Data JPA 框架</h3><p>Spring 為了讓我們在程式中更容易存取資料庫，於是推出 Spring Data JPA，將 ORM 框架整合進來。但它只整合那些有實現 JPA（Java Persistance API）規範的 ORM 框架，如 Hibernate、EclipseLink。</p><p>所謂的 JPA 規範，其實我們在本文第三節建立 Student 類別時已經接觸到了，例如「jakarta.persistence」套件下的 <code>@Entity</code>、<code>@Table</code> 與 <code>@Id</code> 等注解。後續文章也會使用 <code>@Column</code> 注解，進行欄位的細部設定；或透過 <code>@OneToOne</code> 注解，設計一對一關聯。</p><p>Spring Data JPA 預設採用 Hibernate 框架來存取資料庫，讓我們在操作上，能夠以 Java 程式語言為導向，不必依賴於不同資料庫種類的原生 SQL 語法。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch09.1-setup-mysql-and-introduce-jpa">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-mongo-repository-customize-query/" target="_blank">【Spring Boot】第8.3課－在 MongoRepository 定義查詢條件與排序方式</a></p><p>下一課：<a href="/articles/spring-boot-mysql-column-definition-with-jpa/" target="_blank">【Spring Boot】第9.2課－使用 JPA 設計實體類別與 MySQL 資料表欄位</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第8.2課－使用 Spring Data 存取 MongoDB 資料庫，進行基本 CRUD 操作</title>
    <link href="/articles/spring-boot-data-mongodb-repository-crud/"/>
    <url>/articles/spring-boot-data-mongodb-repository-crud/</url>
    
    <content type="html"><![CDATA[<p>準備好 MongoDB 的環境後，就能在 Spring Boot 中存取資料庫了。本文首先會展示要儲存的資料內容，接著介紹「Spring Data」框架的特色。</p><p>隨後透過「MongoRepository」內建的 CRUD 方法存取資料庫，而下一篇才會介紹自定義查詢條件的方式。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch08.1-mongodb-introduction-and-setup">點我</a>。</p><h2 id="一、資料類別"><a href="#一、資料類別" class="headerlink" title="一、資料類別"></a>一、資料類別</h2><p>以下是自定義的類別，叫做「Student」，用來描述學生資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Document(collection = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> grade;    <span class="hljs-keyword">private</span> LocalDate birthday;    <span class="hljs-keyword">private</span> Contact contact;    <span class="hljs-keyword">private</span> List&lt;Certificate&gt; certificates;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>這個類別冠上了 <code>@Document</code> 注解，代表它是資料庫中的「文件」。並透過 <code>collection</code> 參數，指定「集合」的名稱。參數請不要誤寫成「collation」了。</p><p>類別中包含 id、名字、年級、生日、聯繫方式與證照，共 6 個欄位。其中 id 欄位冠上了 <code>@Id</code> 注解，代表它在資料庫中對應到文件的主鍵欄位。</p><p>以下的「Contact」類別是描述聯繫方式，包含信箱與電話這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contact</span> &#123;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String phone;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Contact <span class="hljs-title function_">of</span><span class="hljs-params">(String email, String phone)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>();        c.email = email;        c.phone = phone;        <span class="hljs-keyword">return</span> c;    &#125;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的「Certificate」類別是描述證照，包含種類、分數與等級這 3 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Certificate</span> &#123;    <span class="hljs-keyword">private</span> String type;    <span class="hljs-keyword">private</span> Integer score;    <span class="hljs-keyword">private</span> String level;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Certificate <span class="hljs-title function_">of</span><span class="hljs-params">(String type, Integer score, String level)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Certificate</span>();        c.type = type;        c.score = score;        c.level = level;        <span class="hljs-keyword">return</span> c;    &#125;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>本文會將 Student 類別的物件，儲存到 MongoDB 資料庫。</p><h2 id="二、認識-Spring-Data-框架"><a href="#二、認識-Spring-Data-框架" class="headerlink" title="二、認識 Spring Data 框架"></a>二、認識 Spring Data 框架</h2><h3 id="（一）建立-Repository-介面"><a href="#（一）建立-Repository-介面" class="headerlink" title="（一）建立 Repository 介面"></a>（一）建立 Repository 介面</h3><p>如果讀者有用過 JDBC（Java Database Connectivity），應該對存取資料庫的程式流程還留有一點印象，大致包含以下步驟：</p><ol><li>建立資料庫連線。</li><li>撰寫原生 SQL 語法。</li><li>將查詢結果（Result Set），轉換成商業邏輯要用的程式物件。</li><li>釋放資源。</li></ol><p>由於太過繁瑣，於是「Spring Data」這套框架封裝了此過程，讓開發者能更輕鬆地存取資料庫。上一篇在 pom.xml 檔案中添加的「spring-boot-starter-data-mongodb」依賴，就是 Spring Data 的產品之一。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>在<a href="/articles/spring-boot-bean-ioc-di-and-swap/" target="_blank">第 5 課</a>，我們有練習建立一個「ProductRepository」介面，將其注入到商業邏輯中。該介面有 2 種實作類別，分別用 List 與 Map 結構來儲存測試資料。</p><p>本節會建立一個特殊的介面，定位與上述的 ProductRepository 相同。但我們不必親自實作它，而是交給框架處理。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;&#125;</code></pre></div><p>這個「StudentRepository」介面繼承了 <code>MongoRepository</code> 介面，且傳入兩個泛型類別，分別是文件與主鍵的類別。其中主鍵的類別，必須與上述 Student 資料類別中的 id 欄位相同。</p><h3 id="（二）查詢語法與物件對映"><a href="#（二）查詢語法與物件對映" class="headerlink" title="（二）查詢語法與物件對映"></a>（二）查詢語法與物件對映</h3><p>使用 Spring Data 時，我們最直接感受到的好處，就是「產生查詢語法」與「物件對映」。</p><p>在 <code>MongoRepository</code> 介面，以及它的父介面中，已經有內建一些基本方法。舉例來說，我們可以將 Student 物件傳入 repository 的 <code>insert</code> 方法。</p><p>僅僅一句程式，Spring Data 就會產生如下的 MongoDB 操作：</p><div class="code-wrapper"><pre><code class="hljs javascript">db.<span class="hljs-property">student</span>.<span class="hljs-title function_">insert</span>(    &#123;        <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Vincent&quot;</span>,        <span class="hljs-string">&quot;grade&quot;</span>: <span class="hljs-number">2</span>        <span class="hljs-string">&quot;contact&quot;</span>: &#123;            <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;vincent@school.com&quot;</span>,            <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-string">&quot;0911111111&quot;</span>        &#125;    &#125;);</code></pre></div><p>此時該方法會回傳插入成功的文件資料，且包含由 MongoDB 產生的 id。</p><p>又或者是呼叫 <code>findById</code> 方法，則會產生如下的操作：</p><div class="code-wrapper"><pre><code class="hljs javascript">db.<span class="hljs-property">student</span>.<span class="hljs-title function_">find</span>(    &#123;        <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-title class_">ObjectId</span>(<span class="hljs-string">&quot;...&quot;</span>)    &#125;);</code></pre></div><p>此時該方法除了回傳符合條件的結果，更重要的是文件資料會被轉換成 Java 物件，也就是 Student。</p><p>資料庫中的資料，與程式物件互相轉換，這項技術在關聯式資料庫稱為「物件關聯對映」（Object-Relational Mapping，ORM）。而在 MongoDB 則稱為「物件文件對映」（Object-Document Mapping，ODM）。</p><p>從上面這兩個例子，我們可看出 Spring Data 會解讀 repository 的方法定義，產生對應的資料庫語法。而在下一篇，讀者也能依照命名規則，設計出自己的查詢方法，讓操作更簡單。</p><h2 id="三、使用-MongoRepository"><a href="#三、使用-MongoRepository" class="headerlink" title="三、使用 MongoRepository"></a>三、使用 MongoRepository</h2><p>本節讓我們來實際使用 <code>MongoRepository</code> 提供的內建方法。</p><p>為了在程式中有地方呼叫 StudentRepository，讀者可在 Controller 準備 API，屆時便能搭配如 Postman 之類的工具，對後端發送 request。</p><h3 id="（一）插入資料"><a href="#（一）插入資料" class="headerlink" title="（一）插入資料"></a>（一）插入資料</h3><p>以下提供一支 API，用來建立學生資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@PostMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createStudent</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Student student)</span> &#123;        student.setId(<span class="hljs-literal">null</span>);        studentRepository.insert(student);        <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> ServletUriComponentsBuilder                .fromCurrentRequestUri()                .path(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)                .build(Map.of(<span class="hljs-string">&quot;id&quot;</span>, student.getId()));        <span class="hljs-keyword">return</span> ResponseEntity.created(uri).build();    &#125;&#125;</code></pre></div><p>呼叫 <code>insert</code> 方法即可插入資料。若該資料沒有 id 的值，則 MongoDB 將自行產生。若 id 發生重複，則會拋出 <code>DuplicatedKeyException</code> 例外。</p><p>該方法最後會回傳含有 id 的資料，此處組出 <code>URI</code>，附加到 response header，讓 API 回傳。</p><h3 id="（二）取得資料"><a href="#（二）取得資料" class="headerlink" title="（二）取得資料"></a>（二）取得資料</h3><p>以下是查詢指定 id 的資料，呼叫 <code>findById</code> 方法即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;            <span class="hljs-meta">@GetMapping(&quot;/students/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Student&gt; <span class="hljs-title function_">getStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;        Optional&lt;Student&gt; studentOp = studentRepository.findById(id);        <span class="hljs-keyword">return</span> studentOp.isPresent()                ? ResponseEntity.ok(studentOp.get())                : ResponseEntity.notFound().build();    &#125;&#125;</code></pre></div><p>以下是給予 List，查詢多筆指定 id 的資料。呼叫 <code>findAllById</code> 方法即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;            <span class="hljs-meta">@GetMapping(&quot;/students/ids&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Student&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> List&lt;String&gt; idList)</span> &#123;        List&lt;Student&gt; students = studentRepository.findAllById(idList);        <span class="hljs-keyword">return</span> ResponseEntity.ok(students);    &#125;&#125;</code></pre></div><p>攜帶 query string 存取此 API 的方式，示意如下：</p><div class="code-wrapper"><pre><code class="hljs text">GET /students/ids?idList=111,222,333</code></pre></div><p>雖然在資料庫中，文件主鍵的欄位名稱為「_id」，且型態是 Object Id，但 MongoDB 會做這部份的轉換，所以讀者不用特別做處理。</p><h3 id="（三）更新資料"><a href="#（三）更新資料" class="headerlink" title="（三）更新資料"></a>（三）更新資料</h3><p>以下是更新指定 id 的資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@PutMapping(&quot;/students/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateStudent</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable</span> String id, <span class="hljs-meta">@RequestBody</span> Student request</span><span class="hljs-params">    )</span> &#123;        Optional&lt;Student&gt; studentOp = studentRepository.findById(id);        <span class="hljs-keyword">if</span> (studentOp.isEmpty()) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();        &#125;        <span class="hljs-type">Student</span> <span class="hljs-variable">student</span> <span class="hljs-operator">=</span> studentOp.get();        student.setName(request.getName());        student.setGrade(request.getGrade());        student.setBirthday(request.getBirthday());        student.setContact(request.getContact());        student.setCertificates(request.getCertificates());        studentRepository.save(student);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>在邏輯中，我們先判斷該筆資料是否存在。是的話，就將 request 中的資料更新上去，最後呼叫 <code>save</code> 方法儲存。</p><p>這個 <code>save</code> 方法，其實是「upsert」的性質。也就是說，若 id 所對應的資料存在，便進行覆蓋，否則視為插入新資料。</p><h3 id="（四）刪除資料"><a href="#（四）刪除資料" class="headerlink" title="（四）刪除資料"></a>（四）刪除資料</h3><p>以下是刪除指定 id 的資料，呼叫 <code>deleteById</code> 方法即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;    <span class="hljs-meta">@DeleteMapping(&quot;/students/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteStudent</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;        studentRepository.deleteById(id);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><h2 id="四、測試資料"><a href="#四、測試資料" class="headerlink" title="四、測試資料"></a>四、測試資料</h2><p>以下提供一支 API，用途是在資料庫插入 3 筆測試資料。若讀者有需要，可以先準備起來，方便下一篇的練習，</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@PostMapping(&quot;/students/reset&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">resetStudents</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();        s1.setName(<span class="hljs-string">&quot;Vincent&quot;</span>);        s1.setGrade(<span class="hljs-number">2</span>);        s1.setBirthday(LocalDate.of(<span class="hljs-number">1996</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));        s1.setContact(Contact.of(<span class="hljs-string">&quot;vincent@school.com&quot;</span>, <span class="hljs-string">&quot;0911111111&quot;</span>));        s1.setCertificates(List.of(                Certificate.of(<span class="hljs-string">&quot;GEPT&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;Medium&quot;</span>),                Certificate.of(<span class="hljs-string">&quot;TOEIC&quot;</span>, <span class="hljs-number">990</span>, <span class="hljs-string">&quot;Gold&quot;</span>)        ));        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();        s2.setName(<span class="hljs-string">&quot;Dora&quot;</span>);        s2.setGrade(<span class="hljs-number">3</span>);        s2.setBirthday(LocalDate.of(<span class="hljs-number">1995</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));        s2.setContact(Contact.of(<span class="hljs-string">&quot;dora@school.com&quot;</span>, <span class="hljs-string">&quot;0922222222&quot;</span>));        s2.setCertificates(List.of(                Certificate.of(<span class="hljs-string">&quot;TOEFL&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-literal">null</span>),                Certificate.of(<span class="hljs-string">&quot;TOEIC&quot;</span>, <span class="hljs-number">900</span>, <span class="hljs-string">&quot;Gold&quot;</span>)        ));        <span class="hljs-type">Student</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();        s3.setName(<span class="hljs-string">&quot;Ivy&quot;</span>);        s3.setGrade(<span class="hljs-number">4</span>);        s3.setBirthday(LocalDate.of(<span class="hljs-number">1994</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>));        s3.setContact(Contact.of(<span class="hljs-string">&quot;ivy@school.com&quot;</span>, <span class="hljs-string">&quot;0933333333&quot;</span>));        s3.setCertificates(List.of(                Certificate.of(<span class="hljs-string">&quot;IELTS&quot;</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">null</span>)        ));        studentRepository.deleteAll();        studentRepository.insert(List.of(s1, s2, s3));        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>此處會呼叫 <code>deleteAll</code> 方法，刪除 collection 中的所有資料。接著再呼叫另一個多載的 <code>insert</code> 方法，插入多筆資料。</p><p>下圖是透過 GUI 工具「NoSQLBooster」查詢到的內容。<br><img src="https://chikuwacode.github.io/articles/spring-boot-data-mongodb-repository-crud/nosqlbooster-find-documents.png"></p><p>可確認到 MongoDB 會自動產生「_id」欄位，其型態為 Object Id。</p><p>到目前為止，都是使用 <code>MongoRepository</code> 內建的方法存取資料庫。下一篇將說明如何設計自己的查詢條件，以及排序方式。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch08.2-mongodb-repository-crud">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-mongodb-introduction-and-setup/" target="_blank">【Spring Boot】第8.1課－MongoDB 介紹與準備資料庫環境</a></p><p>下一課：<a href="/articles/spring-boot-mongo-repository-customize-query/" target="_blank">【Spring Boot】第8.3課－在 MongoRepository 定義查詢條件與排序方式</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第12.3課－在 Spring Security 使用 HTTP Basic 認證</title>
    <link href="/articles/spring-boot-security-http-basic-authentication/"/>
    <url>/articles/spring-boot-security-http-basic-authentication/</url>
    
    <content type="html"><![CDATA[<p>在前兩篇文章，我們都是在 Spring Security 的登入畫面通過認證後，利用瀏覽器存取 Controller 的 GET API。但其他如 POST、PUT 與 DELETE 方法的請求，就無法透過這種方式了。特別是在前後端分離的系統，是完全要獨立於 Spring Boot 來存取。</p><p>本文會介紹一種叫做「HTTP Basic」的認證方式，經由在 request header 攜帶帳密的方式，取代在登入畫面的認證。</p><hr><h2 id="一、準備-RESTful-API"><a href="#一、準備-RESTful-API" class="headerlink" title="一、準備 RESTful API"></a>一、準備 RESTful API</h2><p>本節會在 Controller 設計多支 RESTful API，目的是用來測試不同權限的帳號，能否被 Spring Security 授權存取。列出如下：</p><table><thead><tr><th>API</th><th>用途</th><th>授權對象</th></tr></thead><tbody><tr><td>GET &#x2F;home</td><td>回傳「系統首頁」字串</td><td>所有人，包含尚未通過認證的人</td></tr><tr><td>GET &#x2F;courses</td><td>回傳「課程列表」字串</td><td>所有通過認證的人</td></tr><tr><td>POST &#x2F;select-course</td><td>回傳「選課成功」字串</td><td>學生</td></tr><tr><td>PUT &#x2F;courses</td><td>回傳「更新課程成功」字串</td><td>老師</td></tr></tbody></table><p>範例程式中，使用者將具有「學生」或「老師」其中一個權限，在本文第二節建立測試使用者時可以見到。</p><p>以下為 Controller 的程式碼。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@GetMapping(&quot;/home&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;系統首頁&quot;</span>;    &#125;    <span class="hljs-meta">@GetMapping(&quot;/courses&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCourses</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;課程列表&quot;</span>;    &#125;    <span class="hljs-meta">@PostMapping(&quot;/select-course&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">selectCourse</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;選課成功&quot;</span>;    &#125;    <span class="hljs-meta">@PutMapping(&quot;/courses&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">updateCourse</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;更新課程成功&quot;</span>;    &#125;&#125;</code></pre></div><p>為求範例程式簡單，故 API 僅回傳字串。</p><h2 id="二、配置-Spring-Security"><a href="#二、配置-Spring-Security" class="headerlink" title="二、配置 Spring Security"></a>二、配置 Spring Security</h2><h3 id="（一）設計-API-授權規則"><a href="#（一）設計-API-授權規則" class="headerlink" title="（一）設計 API 授權規則"></a>（一）設計 API 授權規則</h3><p>本節進行 Spring Security 的配置，請確認 pom.xml 檔案已經添加以下依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>以下是進行 Spring Security 相關配置的類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> httpSecurity                .authorizeHttpRequests(requests -&gt; requests                        .requestMatchers(HttpMethod.GET, <span class="hljs-string">&quot;/home&quot;</span>).permitAll()                        .requestMatchers(HttpMethod.POST, <span class="hljs-string">&quot;/select-course&quot;</span>).hasAuthority(<span class="hljs-string">&quot;STUDENT&quot;</span>)                        .requestMatchers(HttpMethod.PUT, <span class="hljs-string">&quot;/courses&quot;</span>).hasAuthority(<span class="hljs-string">&quot;TEACHER&quot;</span>)                        .anyRequest().authenticated()                )                .csrf(csrf -&gt; csrf.disable())                .httpBasic(Customizer.withDefaults())                .build();    &#125;&#125;</code></pre></div><p>呼叫 <code>authorizeHttpRequests</code> 方法，可進一步設計各個 API 的授權規則。這裡依照本文第一節的說明進行實作。</p><p>呼叫 <code>csrf</code> 方法，可進一步停用對於 CSRF 攻擊的保護機制，讓 Postman 順利存取 API。停用的理由已在上一篇說明，在此不贅述。</p><p>呼叫 <code>httpBasic</code> 方法，可啟用「HTTP Basic」的認證方式。我們能在 request header 攜帶帳密，取代在 Spring Security 登入畫面進行認證。</p><h3 id="（二）準備測試使用者"><a href="#（二）準備測試使用者" class="headerlink" title="（二）準備測試使用者"></a>（二）準備測試使用者</h3><p>以下準備了 2 個測試使用者。</p><table><thead><tr><th>帳號</th><th>密碼</th><th>權限</th></tr></thead><tbody><tr><td>user1</td><td>111</td><td>學生</td></tr><tr><td>user2</td><td>222</td><td>老師</td></tr></tbody></table><p>以下是透過 <code>InMemoryUserDetailsManager</code> 元件，來準備測試使用者。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">inMemoryUserDetailManager</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user1&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;111&quot;</span>)                .authorities(<span class="hljs-string">&quot;STUDENT&quot;</span>)                .build();        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user2&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;222&quot;</span>)                .authorities(<span class="hljs-string">&quot;TEACHER&quot;</span>)                .build();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(List.of(user1, user2));    &#125;&#125;</code></pre></div><p>附帶一提，<code>InMemoryUserDetailsManager</code> 本身就有實作 <code>UserDetailsService</code> 介面。若讀者想改為串接真實的資料庫，只要基於此介面進行抽換即可，做法可參考<a href="/articles/spring-boot-security-authentication-integrating-with-mongodb-database/" target="_blank">第 12.2 課</a>。</p><h2 id="三、HTTP-Basic-認證方式"><a href="#三、HTTP-Basic-認證方式" class="headerlink" title="三、HTTP Basic 認證方式"></a>三、HTTP Basic 認證方式</h2><h3 id="（一）簡介"><a href="#（一）簡介" class="headerlink" title="（一）簡介"></a>（一）簡介</h3><p>在先前的文章中，都是在瀏覽器經由 Spring Security 的登入畫面進行認證，隨後再前往特定網址，存取 Controller 中的 GET API。</p><p>但 RESTful API 並非只有 GET 方法而已。因此在前後端分離的開發上，仍然要獨立於 Spring Boot 之外來存取 API，也就是透過前端程式或 Postman 之類的工具。</p><p>Spring Security 支援一種叫做「HTTP Basic」的認證方式。其做法是在「Authorization」這個 request header 攜帶帳號與密碼，就像在登入畫面輸入帳密一樣。而後端會在每次接收到 request 時，就先進行認證。</p><h3 id="（二）攜帶-request-header"><a href="#（二）攜帶-request-header" class="headerlink" title="（二）攜帶 request header"></a>（二）攜帶 request header</h3><p>那麼具體上要如何攜帶 header 以存取 API 呢？首先我們要將帳號與密碼的值，轉換為 Base64 編碼。<a href="https://zh-tw.rakko.tools/tools/24/">這裡</a>提供 Base64 編碼與解碼的工具。</p><p>舉例來說，帳號為「user1」，密碼為「111」，則取 <code>user1:111</code> 的編碼（以冒號隔開帳密），即 <code>dXNlcjE6MTEx</code>。而 <code>user2:222</code> 的編碼為 <code>dXNlcjI6MjIy</code>。</p><p>接著使用 Postman 工具存取 API 時，請切換到「Authorization」頁籤，在下拉式選單選擇「Basic Auth」，並填寫帳號與密碼。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-http-basic-authentication/spring-security-postman-basic-auth-interface.png"></p><p>此時再切換到「Headers」頁籤，讀者可看到 Postman 已經幫我們自動添加 Authorization 的 header 了。它的值是「Basic」加一個半形空格，再加 Base64 編碼。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-http-basic-authentication/spring-security-postman-basic-auth-header.png"></p><p>而前端程式也是如此，每次存取 API 時，都必須在 header 攜帶這種可以證明自己身份的資料。以生活情境來比喻，就像搭乘公司的電梯，會刷門禁卡來確認身份一樣。</p><h3 id="（三）優缺點"><a href="#（三）優缺點" class="headerlink" title="（三）優缺點"></a>（三）優缺點</h3><p>要向後端證明自己的身份，終究是來自帳號與密碼。HTTP Basic 認證的優點就是簡單方便，將帳密做個編碼，放在 request header 即可。</p><p>若程式專案採用其他認證方式，勢必有其他前置作業。比方說使用<a href="/articles/spring-boot-security-implement-authentication-filter-with-jwt/" target="_blank">第 12.6 課</a>會介紹的 JWT 認證，需撰寫 JWT 的產生與解析程式；使用 OAuth 認證，則需串接第三方登入。</p><p>相對而言，HTTP Basic 適合用於較不嚴謹的場合，例如自我練習、課程作業。或者開發中的新系統已經有雛形，要示範操作功能給別人看，也能考慮暫時使用簡易的 HTTP Basic 認證。</p><p>至於缺點，筆者認為有 2 點。第一點是 Base64 的編碼資料，是可以被還原成原文的。因此當 header 的值外洩，盜用者便可一直存取 API，直到密碼被更換。這也意味著，需使用「HTTPS」對整個 request 加密，才更加安全。</p><p>第二點是延續前面所述，我們在 header 攜帶的 HTTP Basic 認證資料，是沒有時效性的。與同樣是在 header 攜帶的 JWT 相比，JWT 可設置有效期限。即便洩漏出去，盜用者也只有在一小段時間內（由開發者決定）能用而已。</p><p>我們在本文已經脫離瀏覽器來存取 RESTful API。那麼在後端 API 的程式邏輯中，要如何知道是誰在存取呢？下一篇將介紹「Security Context」，向 Spring Security 取得使用者的認證資訊。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch12.3-security-http-basic-authentication">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-security-authentication-integrating-with-mongodb-database/" target="_blank">【Spring Boot】第12.2課－在 Spring Security 整合資料庫進行認證</a></p><p>下一課：<a href="/articles/spring-boot-security-context-authentication-info/" target="_blank">【Spring Boot】第12.4課－從 Security Context 取得 API 存取方的認證資訊</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
      <category>Spring Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第12.4課－從 Security Context 取得 API 存取方的認證資訊</title>
    <link href="/articles/spring-boot-security-context-authentication-info/"/>
    <url>/articles/spring-boot-security-context-authentication-info/</url>
    
    <content type="html"><![CDATA[<p>在開發商業邏輯時，我們經常需要知道 API 存取方的身份。舉例來說，在網路發表文章、按讚和留言，理論上都要在資料庫中紀錄「誰發的文」、「誰按的讚」和「誰留的言」，亦即資料的建立者。</p><p>本文將以 HTTP Basic 認證方式為例，示範如何從「Security Context」取得 API 存取方的使用者資料。接著準備自定義的使用者類別，以便在程式邏輯中能有更多的資料可運用。</p><p>最後透過觀察原始碼，認識 Spring Security 進行 HTTP Basic 認證的原理，讓讀者知道該認證資訊從何而來。</p><hr><h2 id="一、配置-Spring-Security"><a href="#一、配置-Spring-Security" class="headerlink" title="一、配置 Spring Security"></a>一、配置 Spring Security</h2><h3 id="（一）一般配置"><a href="#（一）一般配置" class="headerlink" title="（一）一般配置"></a>（一）一般配置</h3><p>本節進行 Spring Security 的配置，請確認 pom.xml 檔案已經添加以下依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>以下是進行 Spring Security 相關配置的類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> httpSecurity                .httpBasic(Customizer.withDefaults())                .csrf(csrf -&gt; csrf.disable())                .authorizeHttpRequests(requests -&gt; requests.anyRequest().permitAll())                .build();    &#125;&#125;</code></pre></div><p>呼叫 <code>httpBasic</code> 方法，可啟用「HTTP Basic」的認證方式。這樣在發送 request 時，就能在「Authorization」這個 header 攜帶帳密，讓 Spring Security 知道我們的身份。詳情可參考<a href="/articles/spring-boot-security-http-basic-authentication/" target="_blank">第 12.3 課</a>。</p><p>呼叫 <code>csrf</code> 方法，可進一步停用對於 CSRF 攻擊的保護機制，讓 Postman 工具能順利存取 API。</p><p>呼叫 <code>authorizeHttpRequests</code> 方法，可進一步定義各個 RESTful API 的授權規則。此處設定為 API 不需通過認證也可存取。</p><h3 id="（二）準備使用者"><a href="#（二）準備使用者" class="headerlink" title="（二）準備使用者"></a>（二）準備使用者</h3><p>以下準備了 1 個測試使用者，帳號為「user1」，密碼為「111」，權限為「學生」與「助理」。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">inMemoryUserDetailsManager</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user1&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;111&quot;</span>)                .authorities(<span class="hljs-string">&quot;STUDENT&quot;</span>, <span class="hljs-string">&quot;ASSISTANT&quot;</span>)                .build();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(List.of(userDetails));    &#125;&#125;</code></pre></div><p>附帶一提，<code>InMemoryUserDetailsManager</code> 本身就有實作 <code>UserDetailsService</code> 介面。若讀者想改為串接真實的資料庫，只要基於此介面進行抽換即可，做法可參考<a href="/articles/spring-boot-security-authentication-integrating-with-mongodb-database/" target="_blank">第 12.2 課</a>。</p><h2 id="二、取得-Security-Context-的認證資訊"><a href="#二、取得-Security-Context-的認證資訊" class="headerlink" title="二、取得 Security Context 的認證資訊"></a>二、取得 Security Context 的認證資訊</h2><p>以下是在 Controller 中準備一支 RESTful API，用途是存取時，能得到自身的使用者資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@GetMapping(&quot;/home&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();        <span class="hljs-type">Authentication</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> context.getAuthentication();        <span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> auth.getPrincipal();        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;anonymousUser&quot;</span>.equals(principal)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你尚未經過身份認證&quot;</span>;        &#125;                <span class="hljs-type">UserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> (UserDetails) principal;        <span class="hljs-keyword">return</span> String.format(                <span class="hljs-string">&quot;你好，%s，你的權限是：%s&quot;</span>,                userDetails.getUsername(),                userDetails.getAuthorities()        );    &#125;&#125;</code></pre></div><p>在 API 的程式邏輯中，第一行呼叫了 <code>SecurityContextHolder</code> 類別的靜態方法，取得了 <code>SecurityContext</code> 物件。第二行從 <code>SecurityContext</code> 物件取得 <code>Authentication</code> 物件。</p><p>呼叫 <code>Authentication.getPrincipal</code> 方法，可得到 API 存取方的使用者資料。但該值會隨著認證情況的不同而有差異，所以回傳值型態是 <code>Object</code>。</p><p>若尚未通過認證，principal 的值固定會是「anonymousUser」字串。若通過認證，則為 <code>UserDetails</code> 物件。在範例程式中，我們取出帳號與權限的值進行運用。</p><p>下圖是使用 Postman，以 HTTP Basic 認證方式在 request header 攜帶帳密後存取 API。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-context-authentication-info/spring-security-context-postman-get-simple-info.png"></p><p>而下圖是以未認證的身份，匿名存取 API。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-context-authentication-info/spring-security-context-postman-get-anonymous-user.png"></p><p>上面見到了許多類別與介面，到了本文第五節，筆者會介紹相關的原始碼，讓讀者了解原理。</p><h2 id="三、自定義使用者資料"><a href="#三、自定義使用者資料" class="headerlink" title="三、自定義使用者資料"></a>三、自定義使用者資料</h2><h3 id="（一）設計使用者類別"><a href="#（一）設計使用者類別" class="headerlink" title="（一）設計使用者類別"></a>（一）設計使用者類別</h3><p>上一節的範例程式，取用了使用者的帳號與權限這兩項資料。然而在實務上，「使用者」這種資料通常還會有更多欄位，例如 id、名字或信箱等。</p><p>接下來讓我們準備自定義的使用者類別，取名為「Member」。它除了基本的帳號、密碼與權限，還包含了 id、暱稱與信箱，共 6 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> String nickname;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> List&lt;MemberAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">MemberAuthority</span> &#123;    STUDENT, ASSISTANT&#125;</code></pre></div><p>在 Spring Security 中，會以 <code>UserDetails</code> 介面來傳遞使用者資料。若想攜帶自定義的資料，我們也需準備一個實作該介面的類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberUserDetails</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Member member;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MemberUserDetails</span><span class="hljs-params">(Member member)</span> &#123;        <span class="hljs-built_in">this</span>.member = member;    &#125;    <span class="hljs-keyword">public</span> Member <span class="hljs-title function_">getMember</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> member;    &#125;    <span class="hljs-comment">// 回傳自定義內容</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> member.getId();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNickname</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> member.getNickname();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> member.getEmail();    &#125;    <span class="hljs-comment">// 實作介面規範的方法</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> member.getUsername();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> member.getPassword();    &#125;    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;        <span class="hljs-keyword">return</span> member.getAuthorities()                .stream()                .map(Enum::name)                .map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>)                .toList();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;&#125;</code></pre></div><p>這個「MemberUserDetails」類別實作了 <code>UserDetails</code> 介面，並完成介面所規範的方法。此外還提供其他自定義的方法，以取得使用者的 id、暱稱與信箱。這些資料都源自於從建構子傳入的 Member 物件。</p><h3 id="（二）實作認證程式"><a href="#（二）實作認證程式" class="headerlink" title="（二）實作認證程式"></a>（二）實作認證程式</h3><p>本文第一節的 <code>InMemoryUserDetailsManager</code> 所「回傳」的 <code>UserDetails</code>，它的實作類別固定是內建的 <code>User</code>，我們無法使它回傳先前設計好的 MemberUserDetails。</p><p>因此請讀者準備另一個實作 <code>UserDetailsService</code> 介面的類別來代替，讓它在 Spring Security 進行認證時被使用。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;    <span class="hljs-comment">// 模擬在資料庫儲存使用者資料</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Member&gt; memberMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDetailsServiceImpl</span><span class="hljs-params">(List&lt;Member&gt; members)</span> &#123;        members.forEach(member -&gt; memberMap.put(member.getUsername(), member));    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;        <span class="hljs-type">Member</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> memberMap.get(username);        <span class="hljs-keyword">if</span> (member == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;Can&#x27;t find username: &quot;</span> + username);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberUserDetails</span>(member);    &#125;&#125;</code></pre></div><p>接著在 Spring Security 的配置類別中，將它建立為元件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">Member</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Member</span>();        member.setId(<span class="hljs-string">&quot;1&quot;</span>);        member.setUsername(<span class="hljs-string">&quot;user1&quot;</span>);        member.setPassword(<span class="hljs-string">&quot;111&quot;</span>);        member.setNickname(<span class="hljs-string">&quot;One&quot;</span>);        member.setEmail(<span class="hljs-string">&quot;user1@gmail.com&quot;</span>);        member.setAuthorities(List.of(MemberAuthority.STUDENT, MemberAuthority.ASSISTANT));        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDetailsServiceImpl</span>(List.of(member));    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();    &#125;&#125;</code></pre></div><p>此處同時將自定義的 Member 物件傳入，模擬出在資料庫中儲存使用者。如此就能把 <code>UserDetails</code> 介面的實作類別，換成自定義的 MemberUserDetails 了。</p><p>另外也需建立 <code>PasswordEncoder</code> 元件，以指定密碼的加密方式，筆者選擇不加密。</p><h2 id="四、封裝取得認證資訊的邏輯"><a href="#四、封裝取得認證資訊的邏輯" class="headerlink" title="四、封裝取得認證資訊的邏輯"></a>四、封裝取得認證資訊的邏輯</h2><p>在第二節的 Controller 範例程式中，我們呼叫 <code>SecurityContextHolder</code> 的方法取得 <code>SecurityContext</code>，接著再取得 <code>Authentication</code>，最後取得認證資訊 principal。</p><p>由於太繁瑣了，因此本節的目的是將這段過程封裝成一個元件。筆者取名為「UserIdentity」，代表用途是取得身份。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserIdentity</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">MemberUserDetails</span> <span class="hljs-variable">ANONYMOUS_USER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberUserDetails</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Member</span>());    <span class="hljs-keyword">private</span> MemberUserDetails <span class="hljs-title function_">getMemberUserDetails</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext();        <span class="hljs-type">Authentication</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> context.getAuthentication();        <span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> auth.getPrincipal();        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;anonymousUser&quot;</span>.equals(principal)                ? ANONYMOUS_USER                : (MemberUserDetails) principal;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAnonymous</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> getMemberUserDetails() == ANONYMOUS_USER;    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> getMemberUserDetails().getId();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> getMemberUserDetails().getUsername();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNickname</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> getMemberUserDetails().getNickname();    &#125;    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmail</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> getMemberUserDetails().getEmail();    &#125;    <span class="hljs-keyword">public</span> List&lt;MemberAuthority&gt; <span class="hljs-title function_">getAuthorities</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> getMemberUserDetails().getMember().getAuthorities();    &#125;&#125;</code></pre></div><p>類別中宣告了「getMemberUserDetails」方法，將取得認證資訊 principal 的過程封裝起來。若認證成功，便轉型為 MemberUserDetails，供其他方法呼叫。</p><p>若為匿名存取 API，則回傳空值的物件。此處運用了「Null Object Pattern」設計模式，避免其他方法取用 MemberUserDetails 物件時，意外導致「Null Pointer Exception」例外。</p><p>此元件提供了取得 id、帳號、信箱、權限以及是否匿名等使用者資料的方法。讓我們將其注入到 Controller 中，在程式邏輯取得這些資料做運用。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserIdentity userIdentity;    <span class="hljs-meta">@GetMapping(&quot;/home&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">if</span> (userIdentity.isAnonymous()) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你尚未經過身份認證&quot;</span>;        &#125;        <span class="hljs-keyword">return</span> String.format(                <span class="hljs-string">&quot;嗨，你的編號是%s%n帳號：%s%n暱稱：%s%n信箱：%s%n權限：%s&quot;</span>,                userIdentity.getId(),                userIdentity.getUsername(),                userIdentity.getNickname(),                userIdentity.getEmail(),                userIdentity.getAuthorities()        );    &#125;&#125;</code></pre></div><p>下圖是以「user1」的使用者身份存取 API。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-context-authentication-info/spring-security-context-postman-get-customized-info.png"></p><p>如此一來，讀者在開發商業邏輯時，不論是要在資料庫儲存文章的建立者，還是將暱稱寫入訊息文字，又或者是寄送郵件，都能更輕鬆地取得當前 API 存取方的使用者資料。</p><h2 id="五、HTTP-Basic-認證的原理"><a href="#五、HTTP-Basic-認證的原理" class="headerlink" title="五、HTTP Basic 認證的原理"></a>五、HTTP Basic 認證的原理</h2><h3 id="（一）Filter-原始碼"><a href="#（一）Filter-原始碼" class="headerlink" title="（一）Filter 原始碼"></a>（一）Filter 原始碼</h3><p>我們已經知道如何取用 <code>SecurityContext</code> 中的認證資訊，而本節將介紹該內容是從何而來。</p><p>Spring Security 是透過 Java Servlet 的「Filter」，才能在 request 到達 Controller 前進行認證與授權。其中 <code>BasicAuthenticationFilter</code> 是專門處理 HTTP Basic 認證的 Filter。</p><p>以下是它的部份原始碼，供讀者參考。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BasicAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">AuthenticationConverter</span> <span class="hljs-variable">authenticationConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BasicAuthenticationConverter</span>();    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;    <span class="hljs-keyword">private</span> <span class="hljs-type">SecurityContextHolderStrategy</span> <span class="hljs-variable">securityContextHolderStrategy</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContextHolderStrategy();    <span class="hljs-comment">// ...</span>        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><span class="hljs-params">                                    FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-comment">// 把 HTTP request 轉換成等待認證的資料</span>            <span class="hljs-type">Authentication</span> <span class="hljs-variable">authRequest</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.authenticationConverter.convert(request);            <span class="hljs-keyword">if</span> (authRequest == <span class="hljs-literal">null</span>) &#123;                <span class="hljs-comment">// ...</span>            &#125;            <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> authRequest.getName();            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.authenticationIsRequired(username)) &#123;                <span class="hljs-comment">// 底層呼叫 UserDetailsService 與 PasswordEncoder 進行認證</span>                <span class="hljs-type">Authentication</span> <span class="hljs-variable">authResult</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.authenticationManager.authenticate(authRequest);                                <span class="hljs-comment">// 將認證成功的資訊放入 SecurityContext</span>                <span class="hljs-type">SecurityContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.securityContextHolderStrategy.createEmptyContext();                context.setAuthentication(authResult);                <span class="hljs-built_in">this</span>.securityContextHolderStrategy.setContext(context);                                <span class="hljs-comment">// ...</span>            &#125;        &#125; <span class="hljs-keyword">catch</span> (AuthenticationException var8) &#123;            <span class="hljs-comment">// ...</span>        &#125;        chain.doFilter(request, response);    &#125;        <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">authenticationIsRequired</span><span class="hljs-params">(String username)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>本節會提到該 Filter 中的 3 個重要元件：<code>AuthenticationConverter</code>、<code>AuthenticationManager</code> 與 <code>SecurityContextHolderStrategy</code>。接下來筆者將搭配 UML 的類別圖，分別進行說明。</p><h2 id="（二）AuthenticationConverter-解析帳密"><a href="#（二）AuthenticationConverter-解析帳密" class="headerlink" title="（二）AuthenticationConverter 解析帳密"></a>（二）AuthenticationConverter 解析帳密</h2><p>HTTP Basic 是一種經由在 request header 攜帶帳號與密碼，讓後端進行身份認證的方式。</p><p>Filter 接收到 request 後，首先 <code>AuthenticationConverter</code> 會從 <code>HttpServletRequest</code> 取出「Authorization」這個 header 的值，進行 Base64 解碼。解析出帳密後，封裝成 <code>Authentication</code> 物件。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-context-authentication-info/spring-boot-security-authentication-converter-class-diagram.jpg"></p><p>而 <code>AuthenticationConverter</code> 介面的實作類別是 <code>BasicAuthenticationConverter</code>，它會回傳 <code>Authentication</code> 介面的實作類別 <code>UsernamePasswordAuthenticationToken</code>。</p><p>解析出的帳號，會放在 <code>UsernamePasswordAuthenticationToken</code> 物件的 <code>principal</code> 欄位，而密碼放在 <code>credentials</code> 欄位。</p><h3 id="（三）AuthenticationManager-進行認證"><a href="#（三）AuthenticationManager-進行認證" class="headerlink" title="（三）AuthenticationManager 進行認證"></a>（三）AuthenticationManager 進行認證</h3><p>將帳號與密碼的值封裝成 <code>Authentication</code> 介面的物件後，接下來 <code>AuthenticationManager</code> 會進行身份認證，並回傳另一個新的 <code>Authentication</code> 物件。兩個物件的差別在於，新物件會包含認證後的結果，即使用者資料。</p><p>這個 <code>AuthenticationManager</code> 介面，有個實作類別叫做 <code>ProviderManager</code>，它擁有多個 <code>AuthenticationProvider</code> 介面的物件，讀者可理解成「認證功能的提供者」。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-context-authentication-info/spring-boot-security-authentication-manager-class-diagram.jpg"></p><p>在 HTTP Basic 認證的情況下，會由 <code>DaoAuthenticationProvider</code> 提供認證功能。它接收 <code>Authentication</code> 物件後，使用了 <code>UserDetailsService</code> 與 <code>PasswordEncoder</code> 進行帳號與密碼的認證。</p><p>認證成功後，<code>DaoAuthenticationProvider</code> 會將 <code>UserDetailsService</code> 回傳的 <code>UserDetails</code> 放入 <code>UsernamePasswordAuthenticationToken</code> 物件的 <code>principal</code> 欄位中，並以 <code>Authentication</code> 介面回傳。</p><h3 id="（四）SecurityContextHolderStrategy-管理認證資訊"><a href="#（四）SecurityContextHolderStrategy-管理認證資訊" class="headerlink" title="（四）SecurityContextHolderStrategy 管理認證資訊"></a>（四）SecurityContextHolderStrategy 管理認證資訊</h3><p>Spring Security 會將認證後的使用者資料儲存於記憶體，讓我們在程式邏輯中能使用。所以我們在第二節的 Controller 才能在取得 <code>UserDetails</code> 物件。</p><p>負責管理認證資訊的是 <code>SecurityContextHolder</code> 類別中的 <code>SecurityContextHolderStrategy</code>。後者是一個介面，代表管理的「策略」，Spring Security 內建數種實作好的策略。</p><p>而前者會在啟動程式時選擇其中一種管理策略。除此之外，就只是對外提供存取認證資訊的方法罷了。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-context-authentication-info/spring-boot-security-context-holder-class-diagram.jpg"></p><p>預設的管理策略是 <code>ThreadLocalSecurityContextHolderStrategy</code>，它採用了「ThreadLocal」的技術，讓每個執行緒只能取得屬於自己的資料。因此，即便 Spring Boot 同時處理許多 request，也不會遇到執行緒安全的問題，意外地取得他人的認證資訊。</p><p>回到 Filter 的邏輯。接下來會產生一個 <code>SecurityContext</code> 介面的物件，將認證後的 <code>Authentication</code> 物件封裝起來。</p><p>最後將 <code>SecurityContext</code> 存回 <code>SecurityContextHolderStrategy</code>，就完成 HTTP Basic 認證的流程。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch12.4-security-context-authentication-info">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-security-http-basic-authentication/" target="_blank">【Spring Boot】第12.3課－在 Spring Security 使用 HTTP Basic 認證</a></p><p>下一課：<a href="/articles/spring-boot-security-implement-login-api-with-jwt/" target="_blank">【Spring Boot】第12.5課－將 Spring Security 與 JWT 結合，實作登入 API</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
      <category>Spring Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第12.2課－在 Spring Security 整合資料庫進行認證</title>
    <link href="/articles/spring-boot-security-authentication-integrating-with-mongodb-database/"/>
    <url>/articles/spring-boot-security-authentication-integrating-with-mongodb-database/</url>
    
    <content type="html"><![CDATA[<p>在上一篇，我們建立了 Spring Security 認證與授權的概念，並利用 in-memory user 的功能準備測試帳號。然而實務開發中，是透過資料庫來儲存使用者的帳號與密碼。</p><p>本文首先會將專案串接上資料庫。接著向讀者介紹 Spring Security 認證的相關介面，並實作自定義的認證程式。藉此將資料庫所儲存的使用者帳號、密碼與權限資料，整合到認證流程中。最後介紹加密密碼的方式，以提高安全性。</p><hr><h2 id="一、串接資料庫"><a href="#一、串接資料庫" class="headerlink" title="一、串接資料庫"></a>一、串接資料庫</h2><h3 id="（一）準備-MongoDB-服務"><a href="#（一）準備-MongoDB-服務" class="headerlink" title="（一）準備 MongoDB 服務"></a>（一）準備 MongoDB 服務</h3><p>本文使用 MongoDB 作為資料庫，來儲存使用者的帳號、密碼與權限資料。</p><p>讀者可利用 Docker 啟動 MongoDB 的服務，預設的 port 號是 27017。</p><div class="code-wrapper"><pre><code class="hljs sh">docker run -d --name <span class="hljs-string">&quot;MongoDB_4.4.29&quot;</span> -p 27017:27017 mongo:4.4.29</code></pre></div><p>回到程式專案，請在 pom.xml 檔案添加 MongoDB 的依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>接著在「application.properties」配置檔中，添加連線字串。以下是連線到叫做「school」的資料庫。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.data.mongodb.uri</span>=<span class="hljs-string">mongodb://localhost:27017/school</span></code></pre></div><p>最後可以試著啟動 Spring Boot。若 console 沒有出現 exception 訊息，代表有成功連線到 MongoDB 的服務。</p><h3 id="（二）使用者-Model"><a href="#（二）使用者-Model" class="headerlink" title="（二）使用者 Model"></a>（二）使用者 Model</h3><p>為了將使用者資料儲存到資料庫，以下設計一個叫做「Member」的類別。其包含使用者的 id、帳號、密碼與權限，共 4 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Document(collection = &quot;member&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> List&lt;MemberAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>而一個使用者可能包含多個權限，本文設計有「學生」、「老師」與「管理員」這 3 個權限。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">MemberAuthority</span> &#123;    STUDENT, TEACHER, ADMIN&#125;</code></pre></div><p>上述的 Member 類別使用了 <code>@Document</code> 注解，讓該類別的物件在資料庫中，會被儲存到叫做「member」的集合（collection），概念上相當於資料表（table）。</p><p>至於 <code>@Id</code> 注解，則代表該欄位會對應到 MongoDB 為每一筆資料自動產生的唯一編號（類似主鍵），在此直接做為使用者 id。</p><h3 id="（三）Repository-層"><a href="#（三）Repository-層" class="headerlink" title="（三）Repository 層"></a>（三）Repository 層</h3><p>透過 Spring Data 框架，我們可以在程式碼中輕鬆存取資料庫。</p><p>以下建立一個叫做「MemberRepository」的介面。它繼承了 <code>MongoRepository</code> 介面，並傳入「Member」到泛型類別，代表與資料庫中的對應 collection 做串接。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MemberRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Member, String&gt; &#123;    Member <span class="hljs-title function_">findByUsername</span><span class="hljs-params">(String username)</span>;&#125;</code></pre></div><p>在 <code>MongoRepository</code> 介面中，已經內含 <code>findById</code>、<code>deleteById</code> 等多個方法。此處我們自行宣告了叫做「findByUsername」的方法，代表要查詢 username 欄位相等的資料。</p><p>Spring Data 會在啟動 Spring Boot 時，自動解讀方法名稱，背地產生能實現這些目的的程式。更多介紹可參考筆者的「<a href="/articles/spring-boot-data-mongodb-repository-crud/" target="_blank">【Spring Boot】第8.2課－使用 Spring Data 存取 MongoDB 資料庫，進行基本 CRUD 操作</a>」文章。</p><h2 id="二、準備-RESTful-API"><a href="#二、準備-RESTful-API" class="headerlink" title="二、準備 RESTful API"></a>二、準備 RESTful API</h2><p>本節會在 Controller 建立多支 RESTful API，目的是為了在本文第六節測試不同權限的帳號，能否被 Spring Security 授權存取。如下表：</p><table><thead><tr><th>API</th><th>用途</th><th>授權對象</th></tr></thead><tbody><tr><td>POST &#x2F;members</td><td>建立使用者，並回傳 id</td><td>所有人，無論是否登入</td></tr><tr><td>GET &#x2F;members</td><td>取得所有使用者</td><td>管理員</td></tr><tr><td>GET &#x2F;selected-courses</td><td>回傳「修課清單」字串</td><td>學生</td></tr><tr><td>GET &#x2F;course-feedback</td><td>回傳「課程回饋」字串</td><td>老師</td></tr><tr><td>GET &#x2F;home</td><td>回傳「系統首頁」字串</td><td>已登入的任何人</td></tr></tbody></table><p>以下為 Controller 的程式碼，部份 API 會呼叫本文第一節建立的 MemberRepository 來存取 MongoDB 資料庫。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> MemberRepository memberRepository;    <span class="hljs-meta">@PostMapping(&quot;/members&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createMember</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Member member)</span> &#123;        member.setId(<span class="hljs-literal">null</span>);        memberRepository.insert(member);        <span class="hljs-keyword">return</span> member.getId();    &#125;    <span class="hljs-meta">@GetMapping(&quot;/members&quot;)</span>    <span class="hljs-keyword">public</span> List&lt;Member&gt; <span class="hljs-title function_">getMembers</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> memberRepository.findAll();    &#125;    <span class="hljs-meta">@GetMapping(&quot;/selected-courses&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">selectedCourses</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;修課清單&quot;</span>;    &#125;    <span class="hljs-meta">@GetMapping(&quot;/course-feedback&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">courseFeedback</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;課程回饋&quot;</span>;    &#125;    <span class="hljs-meta">@GetMapping(&quot;/home&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;系統首頁&quot;</span>;    &#125;&#125;</code></pre></div><h2 id="三、配置-Spring-Security"><a href="#三、配置-Spring-Security" class="headerlink" title="三、配置 Spring Security"></a>三、配置 Spring Security</h2><h3 id="（一）一般配置"><a href="#（一）一般配置" class="headerlink" title="（一）一般配置"></a>（一）一般配置</h3><p>本節進行 Spring Security 的配置，請確認 pom.xml 檔案已經添加以下依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>以下是進行 Spring Security 相關配置的類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> httpSecurity                .authorizeHttpRequests(requests -&gt; requests                        .requestMatchers(HttpMethod.POST, <span class="hljs-string">&quot;/members&quot;</span>).permitAll()                        .requestMatchers(HttpMethod.GET, <span class="hljs-string">&quot;/members&quot;</span>).hasAuthority(<span class="hljs-string">&quot;ADMIN&quot;</span>)                        .requestMatchers(HttpMethod.GET, <span class="hljs-string">&quot;/selected-courses&quot;</span>).hasAuthority(<span class="hljs-string">&quot;STUDENT&quot;</span>)                        .requestMatchers(HttpMethod.GET, <span class="hljs-string">&quot;/course-feedback&quot;</span>).hasAnyAuthority(<span class="hljs-string">&quot;TEACHER&quot;</span>, <span class="hljs-string">&quot;ADMIN&quot;</span>)                        .anyRequest().authenticated()                )                .formLogin(Customizer.withDefaults())                .csrf(csrf -&gt; csrf.disable())                .build();    &#125;&#125;</code></pre></div><p>呼叫 <code>authorizeHttpRequests</code> 方法，可進一步設計各個 API 的授權規則。這裡依照本文第二節的說明進行實作，在此不贅述。</p><p>呼叫 <code>formLogin</code> 方法，可啟用內建的登入畫面，便於我們在瀏覽器做測試。</p><h3 id="（二）停用-CSRF-保護"><a href="#（二）停用-CSRF-保護" class="headerlink" title="（二）停用 CSRF 保護"></a>（二）停用 CSRF 保護</h3><p>呼叫 <code>csrf</code> 方法，可進一步停用對於「跨站請求偽造」（Cross-Site Request Forgery， CSRF）攻擊的保護機制。</p><p>所謂的 CSRF 攻擊，是指惡意網站利用瀏覽器存取外部網域的 API 時，會自動攜帶目標網域 Cookie 的特性，偷偷存取我們先前使用過的正常網站。</p><p>上一篇我們在登入畫面通過認證後，Spring Security 其實會儲存含有認證資訊的 Cookie 在瀏覽器中。之後存取其他 GET API 時，瀏覽器都會自動攜帶此 Cookie。</p><p>然而建立使用者的 <code>POST /members</code> 這支 API，是無法用瀏覽器存取，必須透過 Postman 或前端程式才行。雖然該 API 被設為公開，但簡單來說，由於 Postman 發送請求時缺少 Cookie，因此會遭到 Spring Security 的 CSRF 保護機制阻擋。</p><p>本系列文章中，為了能順利使用 Postman 存取 API，一律停用此機制。而實務開發中，若系統本來就不使用 Cookie，可以直接停用也無妨。但若有使用 Cookie，則需考慮進行另外的配置來防禦 CSRF 攻擊。</p><h2 id="四、UserDetailsService-認證服務"><a href="#四、UserDetailsService-認證服務" class="headerlink" title="四、UserDetailsService 認證服務"></a>四、UserDetailsService 認證服務</h2><h3 id="（一）UserDetails-介面"><a href="#（一）UserDetails-介面" class="headerlink" title="（一）UserDetails 介面"></a>（一）UserDetails 介面</h3><p>在上一篇，我們透過 <code>InMemoryUserDetailsManager</code> 元件，建立 in-memory 的測試使用者。示意程式如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> InMemoryUserDetailsManager <span class="hljs-title function_">inMemoryUserDetailManager</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user1&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;111&quot;</span>)                .authorities(<span class="hljs-string">&quot;STUDENT&quot;</span>)                .build();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(List.of(user1));    &#125;&#125;</code></pre></div><p>而本文的目的是在資料庫儲存使用者。在這之前，讓我們先認識 Spring Security 認證的相關介面，才能了解如何進行抽換。</p><p>首先根據上面的示意程式，<code>InMemoryUserDetailsManager</code> 的建構子接收了 <code>UserDetails</code> 物件。<code>UserDetails</code> 是一個介面，在 Spring Security 中都是透過該介面來傳遞使用者資料。</p><p>該介面提供了 7 個方法，如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDetails</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Serializable</span> &#123;    String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span>;    String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span>;    Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities();    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonExpired</span><span class="hljs-params">()</span>;    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAccountNonLocked</span><span class="hljs-params">()</span>;    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCredentialsNonExpired</span><span class="hljs-params">()</span>;    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEnabled</span><span class="hljs-params">()</span>;&#125;</code></pre></div><p>其中 <code>getUsername</code>、<code>getPassword</code> 與 <code>getAuthorities</code> 是最重要的 3 個方法，分別用來取得帳號、密碼與權限。關於權限的部份，是透過 <code>GrantedAuthority</code> 介面的物件來傳遞，到了本文第五節會有相關實作。</p><p>至於另外 4 個方法，從名稱便能看出是回傳使用者的各種「狀態」，包含帳號過期、帳號鎖定、密碼過期、是否啟用等。登入時，即便帳號與密碼正確，我們也能設計成請 Spring Security 不要讓具有異常狀態的使用者通過認證。</p><p>Spring Security 內建了一個實作 <code>UserDetails</code> 介面的類別，那就是 <code>User</code>。在建立物件時，我們也能賦予這些狀態，只要其中 1 個是 false（預設值為 true），則將導致認證失敗。</p><h3 id="（二）UserDetailsService-介面"><a href="#（二）UserDetailsService-介面" class="headerlink" title="（二）UserDetailsService 介面"></a>（二）UserDetailsService 介面</h3><p>若觀看 <code>InMemoryUserDetailsManager</code> 類別的原始碼，會發現它頂層實作了 <code>UserDetailsService</code> 介面。</p><p>該介面是 Spring Security 用來進行認證的重要元件。它提供一個叫做 <code>loadUserByUsername</code> 的方法，用途是接收帳號的值，並回傳內含使用者資料的 <code>UserDetails</code> 介面物件。</p><p>繼續追蹤 <code>InMemoryUserDetailsManager</code> 的原始碼，會發現它是用 Map 資料結構來儲存使用者。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsManager</span> &#123;    <span class="hljs-comment">// 用 Map 儲存使用者</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, MutableUserDetails&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;        <span class="hljs-comment">// 從 Map 取得使用者</span>        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (UserDetails) <span class="hljs-built_in">this</span>.users.get(username.toLowerCase());                <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(username);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(                user.getUsername(),                user.getPassword(),                user.isEnabled(),                user.isAccountNonExpired(),                user.isCredentialsNonExpired(),                user.isAccountNonLocked(),                user.getAuthorities()            );        &#125;    &#125;&#125;</code></pre></div><p>在上一篇的練習中，Spring Security 是將我們在登入畫面輸入的帳號，傳入 <code>UserDetailsService.loadUserByUsername</code> 方法。等到該方法將使用者資料包裝成 <code>UserDetails</code> 物件後回傳，其 <code>getPassword</code> 方法又會被呼叫，並與登入畫面的密碼進行比對。當帳號與密碼相符，則認證成功。</p><p>下圖以 UML 的類別圖，呈現這些介面與類別的關係。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-authentication-integrating-with-mongodb-database/spring-security-user-details-service-class-diagram.jpg"></p><p>從圖中下方，讀者可察覺只要提供作自定義的 <code>UserDetailsService</code>，就能調整認證方式。</p><h2 id="五、實作自定義認證服務"><a href="#五、實作自定義認證服務" class="headerlink" title="五、實作自定義認證服務"></a>五、實作自定義認證服務</h2><p>啟動程式時，Spring Security 會檢查專案中是否有 <code>UserDetailsService</code> 元件。若無，則自動建立一個 <code>InMemoryUserDetailsManager</code> 元件，並附帶一個使用者，帳號為「user」，密碼為隨機（可在 console 找到）。</p><p>若程式專案中存在我們自行提供的 <code>UserDetailsService</code> 元件，例如上一篇手動建立了 <code>InMemoryUserDetailsManager</code>，則 Spring Security 會自動採用。</p><p>同樣的道理，本文為了抽換成資料庫中的使用者資料，我們需要實作自己的 <code>UserDetailsService</code>。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> MemberRepository memberRepository;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;        <span class="hljs-type">Member</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> memberRepository.findByUsername(username);        <span class="hljs-keyword">if</span> (member == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;Can&#x27;t find member: &quot;</span> + username);        &#125;        List&lt;SimpleGrantedAuthority&gt; authorities = member.getAuthorities()                .stream()                .map(auth -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleGrantedAuthority</span>(auth.name()))                .toList();        <span class="hljs-keyword">return</span> User                .withUsername(username)                .password(member.getPassword())                .authorities(authorities)                .build();    &#125;&#125;</code></pre></div><p>範例程式中實作了 <code>loadUserByUsername</code> 方法，它的 <code>username</code> 參數，來自於登入畫面所輸入的帳號。</p><p>接著呼叫本文第一節實作的 MemberRepository 來查詢資料庫，得到我們自己設計的使用者資料。當找不到使用者，就拋出例外，代表認證失敗。最後將帳號、密碼與權限包裝成 <code>UserDetails</code> 物件，回傳給 Spring Security。</p><p>權限資料是透過 <code>GrantedAuthority</code> 介面來傳遞。Spring Security 內建了一個叫做 <code>SimpleGrantedAuthority</code> 的實作類別，此處在建構子中傳入權限的名稱，如本文第一節所設計的學生、老師與管理員。</p><p>以生活情境來比喻撰寫這段程式的過程，就像是求職時，即便我們準備了自製的履歷（Member 類別），但依然要填寫公司內部的制式履歷（<code>UserDetails</code> 介面），因公司只認制式的人事資料。</p><h2 id="六、密碼加密"><a href="#六、密碼加密" class="headerlink" title="六、密碼加密"></a>六、密碼加密</h2><h3 id="（一）PasswordEncoder-元件"><a href="#（一）PasswordEncoder-元件" class="headerlink" title="（一）PasswordEncoder 元件"></a>（一）PasswordEncoder 元件</h3><p>在使用資料庫儲存密碼時，實務上會先將密碼的原文加密後才儲存，稱之為「密文」。用意是為了保護客戶的資料，避免資料庫內容外洩，或者員工監守自盜。</p><p>本節的目標就是對密碼加密。讓我們先認識 Spring Security 的 <code>PasswordEncoder</code> 元件，請讀者建立該介面的元件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();    &#125;&#125;</code></pre></div><p>Spring Security 內建數個 <code>PasswordEncoder</code> 的實作類別。此處暫時選擇 <code>NoOpPasswordEncoder</code>，代表不加密。對應到上一篇建立的 <code>InMemoryUserDetailsManager</code> 元件，就相當於在密碼的值加上 <code>&#123;noop&#125;</code> 的前綴。</p><p>該介面提供 2 個重要的方法，如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">PasswordEncoder</span> &#123;    String <span class="hljs-title function_">encode</span><span class="hljs-params">(CharSequence rawPassword)</span>;    <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(CharSequence rawPassword, String encodedPassword)</span>;&#125;</code></pre></div><p>其中 <code>encode</code> 方法的用途，是將密碼原文透過某種演算法運算後，得到密文。而 <code>matches</code> 方法，則是將密碼原文進行運算後，與另外傳入的密文做比對，藉此確認密碼是否相符。</p><p>在登入畫面進行帳密認證時，Spring Security 會呼叫 <code>PasswordEncoder.matches</code> 方法，將我們輸入的密碼原文，加密成密文。接著再比對該值是否與 <code>UserDetailsService</code> 回傳 <code>UserDetails</code> 物件所包含的密碼密文相同。</p><p>讓我們在 Controller 注入 <code>PasswordEncoder</code>，並在建立使用者時對密碼做加密。由於目前的實作類別是 <code>NoOpPasswordEncoder</code>，因此密文就等於原文。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> MemberRepository memberRepository;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;    <span class="hljs-meta">@PostMapping(&quot;/members&quot;)</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createMember</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Member member)</span> &#123;        <span class="hljs-comment">// 加密密碼</span>        <span class="hljs-type">String</span> <span class="hljs-variable">encodedPwd</span> <span class="hljs-operator">=</span> passwordEncoder.encode(member.getPassword());        member.setPassword(encodedPwd);                member.setId(<span class="hljs-literal">null</span>);        memberRepository.insert(member);    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><h3 id="（二）建立測試使用者"><a href="#（二）建立測試使用者" class="headerlink" title="（二）建立測試使用者"></a>（二）建立測試使用者</h3><p>請透過 Postman 之類的工具，存取 <code>POST /members</code> 這個 API，分別建立 3 個測試使用者。Request body 如下：</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user1&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;111&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;authorities&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;STUDENT&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user2&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;222&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;authorities&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;TEACHER&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;user3&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;333&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;authorities&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;TEACHER&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;ADMIN&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>第一個使用者為學生身份；第二個為老師身份；第三個是兼具老師與管理員身份。</p><p>此時讀者可分別登入這些帳號，在瀏覽器前往 <code>/selected-courses</code>、<code>/course-feedback</code>、<code>/members</code> 與 <code>/home</code> 這 4 支 API，確認有符合在本文第二節所設計的授權規則。</p><h3 id="（三）使用-BCrypt-來加密密碼"><a href="#（三）使用-BCrypt-來加密密碼" class="headerlink" title="（三）使用 BCrypt 來加密密碼"></a>（三）使用 BCrypt 來加密密碼</h3><p>接下來讓我們抽換成另一種叫做「BCrypt」的加密方式。如此一來，新建立的使用者，其密碼就真的會被加密為看不懂的密文了。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;         <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BCryptPasswordEncoder</span>();    &#125;&#125;</code></pre></div><p>BCrypt 是相當流行的加密方式。它使用雜湊函數對資料進行運算，且運算後的結果無法被反推回原始資料。此外還透過隨機加鹽（salt）的方式，讓相同的原始資料，每次都能產生不同的結果，提升加密的安全性。</p><p>此時在登入畫面進行認證，由於我們所輸入密碼的原文也會被加密，因此資料庫中原本儲存的未加密密碼將隨之失效，畢竟比對方式的細節已經改變。</p><p>下圖是再建立一位有管理員權限的使用者後（帳號為 user4，密碼為 444），在瀏覽器查看所有使用者資料的示意畫面。可看見密碼已經是密文了。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-authentication-integrating-with-mongodb-database/spring-security-member-list.png"></p><p>到目前為止，我們都是透過 Spring Security 的登入畫面進行認證，藉此在瀏覽器存取 Controller 中的 GET API。但該畫面只是方便在學習時進行測試，一旦前後端分離，終究會獨立於 Spring Boot 之外，用各種 HTTP 方法對 API 發出 request。</p><p>下一篇會介紹「HTTP Basic」這項認證方式，經由在 request header 攜帶帳密，來存取受保護的 API。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch12.2-security-authentication-integrating-with-mongodb-database">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-security-authentication-and-authorization/" target="_blank">【Spring Boot】第12.1課－初探 Spring Security 的認證與授權</a></p><p>下一課：<a href="/articles/spring-boot-security-http-basic-authentication/" target="_blank">【Spring Boot】第12.3課－在 Spring Security 使用 HTTP Basic 認證</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
      <category>Spring Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第13課－使用 Swagger UI 製作 API 文件與呼叫介面</title>
    <link href="/articles/spring-boot-swagger-ui-openapi-documentation/"/>
    <url>/articles/spring-boot-swagger-ui-openapi-documentation/</url>
    
    <content type="html"><![CDATA[<p>當後端的 RESTful API 要開放給其他人串接時，我們通常會整理出一份文件。當中會列出 API 的規格，包含 HTTP 方法、參數、request 與 response body 等。每個組織提供文件的方式可能不太一樣，但共同的問題是，若沒有持續地更新，就會發生遺漏或不準確的情形。</p><p>本文將介紹一個叫「Swagger UI」的工具，它能夠偵測程式專案中的 RESTful API，產生美觀的文件。這份文件可在網頁上供人觀看，甚至能直接用來呼叫，十分便利。</p><p>文末也會提及如何在有使用 Spring Security 的程式專案中使用這項工具。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch13-start-swagger-openapi-specification">點我</a>。</p><h2 id="一、Swagger-UI-介紹"><a href="#一、Swagger-UI-介紹" class="headerlink" title="一、Swagger UI 介紹"></a>一、Swagger UI 介紹</h2><p>Swagger UI 是一個開源工具，能夠根據程式專案中定義的 RESTful API，產生文件網頁。若有人想要串接這些 API，可以前往像這樣的網頁進行「試用」。</p><p>下圖是中央氣象局開放資料平台的 API 文件。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/taiwan-cwa-open-data-api-swagger.png"></p><p>讀者可以看到，在使用時能夠填寫自己想要的參數，並呼叫 API。本文要產生的就是類似這樣子的文件。</p><h2 id="二、範例專案介紹"><a href="#二、範例專案介紹" class="headerlink" title="二、範例專案介紹"></a>二、範例專案介紹</h2><p>在範例專案中，筆者已經在 Controller 準備好 RESTful API。</p><p>以下的 Product 類別，會同時作為 request 與 response body。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Product <span class="hljs-title function_">of</span><span class="hljs-params">(String id, String name, <span class="hljs-type">int</span> price)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();        p.id = id;        p.name = name;        p.price = price;        <span class="hljs-keyword">return</span> p;    &#125;<span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的 SortDirection 類別，代表排序方向，可選擇遞增或遞減。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SortDirection</span> &#123;    ASC, DESC&#125;</code></pre></div><p>以下是 Controller，包含 5 支 API，並且準備了測試資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(value = &quot;/products&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> Product.of(<span class="hljs-string">&quot;101&quot;</span>, <span class="hljs-string">&quot;Coke&quot;</span>, <span class="hljs-number">30</span>);        <span class="hljs-type">var</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> Product.of(<span class="hljs-string">&quot;102&quot;</span>, <span class="hljs-string">&quot;Hamburger&quot;</span>, <span class="hljs-number">60</span>);        <span class="hljs-type">var</span> <span class="hljs-variable">p3</span> <span class="hljs-operator">=</span> Product.of(<span class="hljs-string">&quot;103&quot;</span>, <span class="hljs-string">&quot;Sandwich&quot;</span>, <span class="hljs-number">50</span>);        Stream.of(p1, p2, p3).forEach(p -&gt; productMap.put(p.getId(), p));    &#125;    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span>  productMap.get(id);        <span class="hljs-keyword">return</span> product == <span class="hljs-literal">null</span>                ? ResponseEntity.notFound().build()                : ResponseEntity.ok(product);    &#125;    <span class="hljs-meta">@GetMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(name = &quot;sortField&quot;, required = false)</span> String sortField,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(name = &quot;sortDirection&quot;, defaultValue = &quot;ASC&quot;)</span> SortDirection sortDirection</span><span class="hljs-params">    )</span> &#123;        Comparator&lt;Product&gt; comparator = (p1, p2) -&gt; <span class="hljs-number">0</span>;        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;name&quot;</span>.equalsIgnoreCase(sortField)) &#123;            comparator = Comparator.comparing(p -&gt; p.getName().toLowerCase());        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;price&quot;</span>.equalsIgnoreCase(sortField)) &#123;            comparator = Comparator.comparing(Product::getPrice);        &#125;        <span class="hljs-keyword">if</span> (sortDirection == SortDirection.DESC) &#123;            comparator = comparator.reversed();        &#125;        <span class="hljs-type">var</span> <span class="hljs-variable">products</span> <span class="hljs-operator">=</span> productMap.values().stream()                .sorted(comparator)                .toList();        <span class="hljs-keyword">return</span> ResponseEntity.ok(products);    &#125;    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;<span class="hljs-keyword">if</span> (!StringUtils.hasText(product.getId())) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.badRequest().build();        &#125;        <span class="hljs-type">var</span> <span class="hljs-variable">isIdExisting</span> <span class="hljs-operator">=</span> productMap.containsKey(product.getId());        <span class="hljs-keyword">if</span> (isIdExisting) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.unprocessableEntity().build();        &#125;        productMap.put(product.getId(), product);        <span class="hljs-keyword">return</span> ResponseEntity.ok().build();    &#125;    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">isIdExisting</span> <span class="hljs-operator">=</span> productMap.containsKey(id);        <span class="hljs-keyword">if</span> (!isIdExisting) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.notFound().build();        &#125;        product.setId(id);        productMap.put(product.getId(), product);        <span class="hljs-keyword">return</span> ResponseEntity.ok().build();    &#125;    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;        productMap.remove(id);        <span class="hljs-keyword">return</span> ResponseEntity.ok().build();    &#125;&#125;</code></pre></div><p>這些 API 的規格，包含 URL 路徑上的參數、request 與 response body，以及 query string。另外也會回傳各種 HTTP 狀態碼。</p><h2 id="三、引進-Swagger"><a href="#三、引進-Swagger" class="headerlink" title="三、引進 Swagger"></a>三、引進 Swagger</h2><p>請讀者在 pom.xml 檔案添加以下依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springdoc<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.8.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>啟動程式後，前往網址 <code>http://localhost:8080/swagger-ui/index.html</code>，就能看到 API 文件的網頁了！<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-document.png"></p><p>若讀者的專案有引進 Spring Security，可能無法順利看見網頁，這部份會在第八節處理。</p><p>點開其中一個 API，除了能看到規格，透過右上方的「Try it out」按鈕，我們還能實際呼叫它。</p><p>下圖是呼叫 PUT 方法的 API，可自行填寫 URL 上的參數，以及 request body。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-path-parameter-and-request-body.png"></p><p>下圖是呼叫 GET 方法的 API，除了能看見 response 的資料，Swagger 也會自動組出 Curl 指令與完整 URL。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-response-body.png"></p><p>附帶一提，若讀者的程式專案有使用 Spring Security，那就需要在「Authorization」這個 request header，攜帶認證用的資料才能呼叫。這部份我們留到第八節再來處理。</p><h2 id="四、說明-Controller"><a href="#四、說明-Controller" class="headerlink" title="四、說明 Controller"></a>四、說明 Controller</h2><p>Swagger 會產生基本的文件內容，而函式庫也提供許多注解，幫助我們做更詳細的說明。</p><h3 id="（一）說明-API"><a href="#（一）說明-API" class="headerlink" title="（一）說明 API"></a>（一）說明 API</h3><p>在 Controller 類別冠上 <code>@Tag</code> 注解，可以為 Controller 添加說明。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><span class="hljs-meta">@Tag(name = &quot;Product Controller&quot;, description = &quot;產品增刪改查相關的 API&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>我們把 Controller 想像成 API 的「群組」。那麼 <code>@Tag</code> 注解的 <code>name</code> 參數就是定義群組的「標題」，字體較大。而 <code>description</code> 參數則定義說明文字，字體較小。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-tag-annotation.png"></p><p>在 API 處理方法冠上 <code>@Operation</code> 注解，可以為 API 添加說明。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Operation(summary = &quot;取得一個產品&quot;, description = &quot;根據 id 取得指定產品資料。&quot;)</span>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;<span class="hljs-comment">// ...</span>&#125;    <span class="hljs-meta">@Operation(summary = &quot;取得多個產品&quot;, description = &quot;根據給予的參數（如排序）取得多筆產品資料。&quot;)</span>    <span class="hljs-meta">@GetMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(name = &quot;sortField&quot;, required = false)</span> String sortField,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(name = &quot;sortDirection&quot;, defaultValue = &quot;ASC&quot;)</span> SortDirection sortDirection</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;    <span class="hljs-meta">@Operation(summary = &quot;建立產品&quot;, description = &quot;建立一筆產品資料。&quot;)</span>    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Product&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;    <span class="hljs-meta">@Operation(summary = &quot;更新產品&quot;, description = &quot;更新指定 id 的產品資料。Request body 中的 id 會被忽略。&quot;)</span>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;    <span class="hljs-meta">@Operation(summary = &quot;刪除產品&quot;, description = &quot;刪除指定 id 的產品資料。&quot;)</span>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>該注解的 <code>summary</code> 參數，可簡要說明 API 的用途。而 <code>description</code> 參數，可做詳細一點的描述，點開 API 規格便能看到。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-operation-annotation-collapse.png"><br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-operation-annotation-expand.png"></p><h3 id="（二）說明-HTTP-狀態碼"><a href="#（二）說明-HTTP-狀態碼" class="headerlink" title="（二）說明 HTTP 狀態碼"></a>（二）說明 HTTP 狀態碼</h3><p>在 API 處理方法冠上 <code>@ApiResponses</code> 注解，並傳入一到多個 <code>@ApiResponse</code> 注解，可說明該 API 會回傳的 HTTP 狀態碼。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<span class="hljs-comment">// ...</span>    <span class="hljs-meta">@ApiResponses(value = &#123;</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;200&quot;, description = &quot;成功回傳產品資料&quot;),</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;404&quot;, description = &quot;找不到該產品&quot;, content = @Content)</span><span class="hljs-meta">    &#125;)</span>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;<span class="hljs-comment">// ...</span>&#125;<span class="hljs-comment">// ...</span>    <span class="hljs-meta">@ApiResponses(value = &#123;</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;200&quot;, description = &quot;成功回傳產品資料&quot;)</span><span class="hljs-meta">    &#125;)</span>    <span class="hljs-meta">@GetMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(name = &quot;sortField&quot;, required = false)</span> String sortField,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(name = &quot;sortDirection&quot;, defaultValue = &quot;ASC&quot;)</span> SortDirection sortDirection</span><span class="hljs-params">    )</span> &#123;<span class="hljs-comment">// ...</span>&#125;<span class="hljs-comment">// ...</span><span class="hljs-meta">@ApiResponses(value = &#123;</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;200&quot;, description = &quot;成功建立產品資料&quot;),</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;400&quot;, description = &quot;產品資料不合理&quot;, content = @Content),</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;422&quot;, description = &quot;已有相同 id 的產品資料&quot;, content = @Content)</span><span class="hljs-meta">    &#125;)</span>    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;<span class="hljs-comment">// ...</span>&#125;<span class="hljs-comment">// ...</span><span class="hljs-meta">@ApiResponses(value = &#123;</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;200&quot;, description = &quot;成功更新產品資料&quot;),</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;400&quot;, description = &quot;產品資料不合理&quot;, content = @Content),</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;404&quot;, description = &quot;找不到該產品&quot;, content = @Content)</span><span class="hljs-meta">    &#125;)</span>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(</span><span class="hljs-params"><span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;<span class="hljs-comment">// ...</span>&#125;<span class="hljs-comment">// ...</span><span class="hljs-meta">@ApiResponses(value = &#123;</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;200&quot;, description = &quot;成功刪除產品資料&quot;, content = @Content)</span><span class="hljs-meta">    &#125;)</span>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;<span class="hljs-comment">// ...</span>&#125;&#125;</code></pre></div><p>範例中用到的參數，介紹如下。</p><table><thead><tr><th>參數</th><th>說明</th></tr></thead><tbody><tr><td>responseCode</td><td>HTTP 狀態碼。</td></tr><tr><td>description</td><td>說明狀態碼。</td></tr><tr><td>content</td><td>提供 response body 的結構。</td></tr></tbody></table><p>關於 <code>content</code> 參數，若 API 沒有 response body，可提供「無參數的」<code>@Content</code> 注解。否則在 Swagger 上顯示的 response body，預設會是方法的回傳值。</p><p>下圖是 Swagger 上呈現的樣子。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-api-response-annotation.png"></p><p>若讀者想在不同的 HTTP 狀態碼提供不同的 response body，那就需要定義好 <code>@Content</code> 注解，這部份我們將在第五節處理。</p><h2 id="五、展示-response-body-的結構"><a href="#五、展示-response-body-的結構" class="headerlink" title="五、展示 response body 的結構"></a>五、展示 response body 的結構</h2><p>使用 <code>@ApiResponse</code> 注解，除了能對 API 會回傳的 HTTP 狀態碼做說明，也能提供 response body 的結構。</p><p>本節讓我們參考<a href="/articles/spring-boot-validate-request-body-and-query-string/" target="_blank">第 3.3 課</a>文末的情境。那篇文章透過 <code>@Valid</code> 注解，在 request body 的資料不合規定時，回傳 HTTP 400 狀態碼，並將錯誤訊息整理成 response body。</p><h3 id="（一）回傳物件"><a href="#（一）回傳物件" class="headerlink" title="（一）回傳物件"></a>（一）回傳物件</h3><p>若想讓 API 回傳的 response body 是一個物件，如下。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchValidationFailInfo</span> &#123;    <span class="hljs-keyword">private</span> List&lt;String&gt; invalidFields;<span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>將 <code>@Content</code> 注解傳入 <code>@ApiResponse</code> 注解的 <code>content</code> 參數，我們可進一步定義這個狀態碼，要回傳的 response body 是哪一個類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<span class="hljs-comment">// ...</span>    <span class="hljs-meta">@ApiResponses(value = &#123;</span><span class="hljs-meta">            // ...</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;400&quot;, description = &quot;產品資料不合理&quot;,</span><span class="hljs-meta">                    content = @Content(schema = @Schema(implementation = BatchValidationFailInfo.class)))</span><span class="hljs-meta">    &#125;)</span>    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;<span class="hljs-comment">// ...</span>    <span class="hljs-meta">@ApiResponses(value = &#123;</span><span class="hljs-meta">            // ...</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;400&quot;, description = &quot;產品資料不合理&quot;,</span><span class="hljs-meta">                    content = @Content(schema = @Schema(implementation = BatchValidationFailInfo.class)))</span><span class="hljs-meta">    &#125;)</span>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>此處將 <code>@Schema</code> 注解傳入 <code>schema</code> 參數，最後將類別傳入 <code>implementation</code> 參數即可。</p><p>下圖是 Swagger 上呈現的樣子，在對應 HTTP 狀態碼的區塊可看見規格。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-api-response-annotation-content-schema.png"></p><h3 id="（二）回傳-List"><a href="#（二）回傳-List" class="headerlink" title="（二）回傳 List"></a>（二）回傳 List</h3><p>若 API 回傳的 response body 是多個物件組成的 List，物件類別如下。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationFailInfo</span> &#123;    <span class="hljs-keyword">private</span> String field;    <span class="hljs-keyword">private</span> Object value;    <span class="hljs-keyword">private</span> String message;<span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>透過 <code>@Content</code> 注解的 <code>array</code> 參數，Swagger 會將 response body 的規格變成陣列。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<span class="hljs-comment">// ...</span>    <span class="hljs-meta">@ApiResponses(value = &#123;</span><span class="hljs-meta">            // ...</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;400&quot;, description = &quot;產品資料不合理&quot;,</span><span class="hljs-meta">                    content = @Content(array = @ArraySchema(schema = @Schema(implementation = ValidationFailInfo.class)))),</span><span class="hljs-meta">    &#125;)</span>    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;<span class="hljs-comment">// ...</span>    <span class="hljs-meta">@ApiResponses(value = &#123;</span><span class="hljs-meta">            // ...</span><span class="hljs-meta">            @ApiResponse(responseCode = &quot;400&quot;, description = &quot;產品資料不合理&quot;,</span><span class="hljs-meta">                    content = @Content(array = @ArraySchema(schema = @Schema(implementation = ValidationFailInfo.class)))),</span><span class="hljs-meta">    &#125;)</span>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id, <span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>下圖是 Swagger 上呈現的樣子。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-api-response-annotation-content-array-schema.png"></p><p>關於 request body 資料驗證的程式實作，並非本文重點。有興趣的讀者可參考文末附上的完成後專案。</p><h2 id="六、說明-URL-上的參數"><a href="#六、說明-URL-上的參數" class="headerlink" title="六、說明 URL 上的參數"></a>六、說明 URL 上的參數</h2><h3 id="（一）說明路徑參數"><a href="#（一）說明路徑參數" class="headerlink" title="（一）說明路徑參數"></a>（一）說明路徑參數</h3><p>使用 <code>@Parameter</code> 注解，可說明 API 路徑上的參數，例如 <code>/products/&#123;id&#125;</code> 路徑中的 <code>&#123;id&#125;</code>。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<span class="hljs-comment">// ...</span><span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@Parameter(description = &quot;產品 id&quot;, example = &quot;101&quot;, required = true)</span></span><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id</span><span class="hljs-params">    )</span> &#123;<span class="hljs-comment">// ...</span>&#125;<span class="hljs-comment">// ...</span><span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@Parameter(description = &quot;產品 id&quot;, example = &quot;101&quot;, required = true)</span></span><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id,</span><span class="hljs-params"></span><span class="hljs-params">            <span class="hljs-meta">@RequestBody</span> Product product</span><span class="hljs-params">    )</span> &#123;<span class="hljs-comment">// ...</span>&#125;<span class="hljs-comment">// ...</span><span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteProduct</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@Parameter(description = &quot;產品 id&quot;, example = &quot;101&quot;, required = true)</span></span><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id</span><span class="hljs-params">    )</span> &#123;<span class="hljs-comment">// ...</span>&#125;&#125;</code></pre></div><p>範例中用到的參數，介紹如下。</p><table><thead><tr><th>參數</th><th>說明</th></tr></thead><tbody><tr><td>description</td><td>提供說明文字。</td></tr><tr><td>example</td><td>提供範例值。</td></tr><tr><td>requiredMode</td><td>定義是否必填。呼叫 API 時，若必填欄位未給值，Swagger 會跳出提示訊息。</td></tr></tbody></table><p>下圖是 Swagger 上呈現的樣子。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-parameter-annotation-path-parameter.png"></p><p>在畫面中，可看見欄位旁有必填的標示。若呼叫 API 時未填，Swagger 會跳出提示訊息。</p><h3 id="（二）說明-query-string"><a href="#（二）說明-query-string" class="headerlink" title="（二）說明 query string"></a>（二）說明 query string</h3><p><code>@Parameter</code> 注解也能用來說明 query string。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// ...</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<span class="hljs-comment">// ...</span><span class="hljs-meta">@GetMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@Parameter(description = &quot;排序欄位&quot;, example = &quot;price&quot;)</span></span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(name = &quot;sortField&quot;, required = false)</span></span><span class="hljs-params">            String sortField,</span><span class="hljs-params"></span><span class="hljs-params">            <span class="hljs-meta">@Parameter(description = &quot;排序方向&quot;)</span></span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(name = &quot;sortDirection&quot;, defaultValue = &quot;ASC&quot;)</span></span><span class="hljs-params">            SortDirection sortDirection</span><span class="hljs-params">    )</span> &#123;<span class="hljs-comment">// ...</span>&#125;&#125;</code></pre></div><p>下圖是 Swagger 上呈現的樣子。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-parameter-annotation-request-parameter.png"></p><p>然而，如果接收 query string 時是使用 <code>@ModelAttribute</code> 注解，將接收到的值通通整理成一個物件，就不能透過 <code>@Parameter</code> 注解來說明了。要採取第七節與 request 和 response body 相同的方式。</p><h2 id="七、說明-request-與-response-Body"><a href="#七、說明-request-與-response-Body" class="headerlink" title="七、說明 request 與 response Body"></a>七、說明 request 與 response Body</h2><p>使用 <code>@Schema</code> 注解，可以在 request body、response body 與 query string 的類別，說明各個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-meta">@Schema(description = &quot;產品 id；建立資料時為必填，更新資料時會被忽略&quot;, example = &quot;101&quot;)</span>    <span class="hljs-keyword">private</span> String id;        <span class="hljs-meta">@Schema(description = &quot;產品名稱&quot;, example = &quot;Juice&quot;, requiredMode = Schema.RequiredMode.REQUIRED)</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-meta">@Schema(description = &quot;價格&quot;, example = &quot;10&quot;, requiredMode = Schema.RequiredMode.REQUIRED)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;<span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseRequestParameter</span> &#123;    <span class="hljs-meta">@Schema(description = &quot;排序欄位&quot;, example = &quot;price&quot;)</span>    <span class="hljs-keyword">private</span> String sortField;    <span class="hljs-meta">@Schema(description = &quot;遞增或遞減&quot;, example = &quot;ASC&quot;)</span>    <span class="hljs-keyword">private</span> SortDirection sortDirection;<span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>範例中用到的參數，介紹如下。</p><table><thead><tr><th>參數</th><th>說明</th></tr></thead><tbody><tr><td>description</td><td>提供說明文字。</td></tr><tr><td>example</td><td>提供範例值。</td></tr><tr><td>requiredMode</td><td>定義是否必填。但呼叫 API 時，Swagger 不會跳出未填的提示訊息。</td></tr></tbody></table><p>下圖是 Swagger 上呈現的樣子，在「Request body」的區塊，切換到「Schema」頁籤，便可看見規格。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/spring-boot-swagger-schema-annotation-request-body.png"></p><p><code>@Schema</code> 注解還提供了其他參數，方便我們給欄位進行更多的說明，舉例如下，讀者可自行探索。</p><table><thead><tr><th>參數</th><th>說明</th></tr></thead><tbody><tr><td><code>maximum</code>、<code>minimum</code></td><td>說明最大、最小值。</td></tr><tr><td><code>maxLength</code>、<code>minLength</code></td><td>說明最大、最小長度。</td></tr></tbody></table><p>但呼叫 API 時，Swagger 並不會進行資料驗證，所以不會像第五節那樣跳出提示訊息。</p><h2 id="八、與-Spring-Security-共處"><a href="#八、與-Spring-Security-共處" class="headerlink" title="八、與 Spring Security 共處"></a>八、與 Spring Security 共處</h2><h3 id="（一）開放存取-Swagger-頁面"><a href="#（一）開放存取-Swagger-頁面" class="headerlink" title="（一）開放存取 Swagger 頁面"></a>（一）開放存取 Swagger 頁面</h3><p>若讀者的程式專案有使用 Spring Security，可能會發現無法正常進入 Swagger 的頁面。這是因為 Spring Security 預設會保護所有的 API。</p><p>為了開放存取 Swagger 的頁面，我們需要在 Spring Security 的配置類別，進行以下設定。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;<span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String[] SWAGGER_URL_AUTH_WHITELIST = &#123;            <span class="hljs-string">&quot;/swagger-resources&quot;</span>,            <span class="hljs-string">&quot;/swagger-resources/**&quot;</span>,            <span class="hljs-string">&quot;/configuration/ui&quot;</span>,            <span class="hljs-string">&quot;/configuration/security&quot;</span>,            <span class="hljs-string">&quot;/swagger-ui.html&quot;</span>,            <span class="hljs-string">&quot;/webjars/**&quot;</span>,            <span class="hljs-string">&quot;/v3/api-docs/**&quot;</span>,            <span class="hljs-string">&quot;/api/public/**&quot;</span>,            <span class="hljs-string">&quot;/api/public/authenticate&quot;</span>,            <span class="hljs-string">&quot;/actuator/*&quot;</span>,            <span class="hljs-string">&quot;/swagger-ui/**&quot;</span>    &#125;;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> httpSecurity                .authorizeHttpRequests(requests -&gt; requests                        .requestMatchers(SWAGGER_URL_AUTH_WHITELIST).permitAll()                        .anyRequest().authenticated()                )                .csrf(AbstractHttpConfigurer::disable)                .build();    &#125;&#125;</code></pre></div><p>此處是將 Swagger 相關的 URL 設定成允許所有人存取。至於其他 Controller 中的 API，就維持保護起來。</p><h3 id="（二）開放-HTTP-Basic-認證"><a href="#（二）開放-HTTP-Basic-認證" class="headerlink" title="（二）開放 HTTP Basic 認證"></a>（二）開放 HTTP Basic 認證</h3><p>若讀者想存取受到 Spring Security 保護的 API，就必須在「Authorization」這個 request header 攜帶資料進行認證。</p><p>本段會以 HTTP Basic 認證為例，在 Swagger 的畫面上顯示填寫帳密的地方。</p><p>請先在 Spring Security 的配置類別，開放 HTTP Basic 認證，並準備一個使用者帳號，做為測試之用。此處的帳號為「user」，密碼為「123」。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> httpSecurity                .authorizeHttpRequests(requests -&gt; requests                        .requestMatchers(SWAGGER_URL_AUTH_WHITELIST).permitAll()                        .anyRequest().authenticated()                )                .csrf(AbstractHttpConfigurer::disable)                .httpBasic(Customizer.withDefaults())                .build();    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">inMemoryUserDetailManager</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;123&quot;</span>)                .build();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(List.of(user));    &#125;&#125;</code></pre></div><p>接著再建立 <code>OpenAPI</code> 的元件，它會被 Swagger 的函式庫掃描，並將配置的設定反應在文件上。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">openAPI</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">Info</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>()                .title(<span class="hljs-string">&quot;My Spring Boot API Document&quot;</span>)                .version(<span class="hljs-string">&quot;1.0.0&quot;</span>);        <span class="hljs-type">var</span> <span class="hljs-variable">basicSchemeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;HTTP Basic Auth&quot;</span>;        <span class="hljs-type">var</span> <span class="hljs-variable">securityRequirement</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityRequirement</span>()                .addList(basicSchemeName);        <span class="hljs-type">var</span> <span class="hljs-variable">components</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Components</span>()                .addSecuritySchemes(basicSchemeName,                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityScheme</span>()                                .name(basicSchemeName)                                .type(SecurityScheme.Type.HTTP)                                .scheme(<span class="hljs-string">&quot;basic&quot;</span>));        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>()                .info(info)                .addSecurityItem(securityRequirement)                .components(components);    &#125;&#125;</code></pre></div><p>在上面的範例程式中，先是定義了文件的標題，接著再開啟 HTTP Basic 認證的功能。</p><p>下圖是 Swagger 上呈現的樣子。可看見文件標題變成我們自己定義的。而且還出現了「Authorize」按鈕，點下去可填寫帳密。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/swagger-custom-title-and-authorize-button.png"><br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/swagger-authorize-http-basic.png"></p><p>填寫完帳密後，再按下「Authorize」按鈕。之後發出 request 時，Swagger 就會自動攜帶 Authorization 這個 request header，並加上「Basic」的前綴。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/swagger-http-basic-authentication-header.png"></p><h3 id="（三）開放-JWT-認證"><a href="#（三）開放-JWT-認證" class="headerlink" title="（三）開放 JWT 認證"></a>（三）開放 JWT 認證</h3><p>仿照前面的做法，以下的範例程式是額外配置 JWT 認證的功能。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwaggerConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> OpenAPI <span class="hljs-title function_">openAPI</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">Info</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Info</span>()                .title(<span class="hljs-string">&quot;My Spring Boot API Document&quot;</span>)                .version(<span class="hljs-string">&quot;1.0.0&quot;</span>);<span class="hljs-comment">// ...</span>        <span class="hljs-type">var</span> <span class="hljs-variable">jwtSchemeName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;JWT Auth&quot;</span>;        <span class="hljs-type">var</span> <span class="hljs-variable">securityRequirement</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityRequirement</span>()                <span class="hljs-comment">// ...</span>                .addList(jwtSchemeName);        <span class="hljs-type">var</span> <span class="hljs-variable">components</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Components</span>()<span class="hljs-comment">// ...</span>                .addSecuritySchemes(jwtSchemeName,                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecurityScheme</span>()                                .name(jwtSchemeName)                                .type(SecurityScheme.Type.HTTP)                                .scheme(<span class="hljs-string">&quot;bearer&quot;</span>)                                .bearerFormat(<span class="hljs-string">&quot;JWT&quot;</span>));        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenAPI</span>()                .info(info)                .addSecurityItem(securityRequirement)                .components(components);    &#125;&#125;</code></pre></div><p>重新打開 Swagger 文件，讀者便能看到填寫 JWT 的地方。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/swagger-authorize-jwt.png"></p><p>發出 request 時，Swagger 也會自動攜帶 request header，並加上「Bearer」的前綴。<br><img src="https://chikuwacode.github.io/articles/spring-boot-swagger-ui-openapi-documentation/swagger-jwt-authentication-header.png"></p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch13-fin-swagger-openapi-specification">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-security-implement-authentication-filter-with-jwt/" target="_blank">【Spring Boot】第12.6課－實作 Spring Security 的認證 Filter（以 JWT 為例）</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第12.6課－實作 Spring Security 的認證 Filter（以 JWT 為例）</title>
    <link href="/articles/spring-boot-security-implement-authentication-filter-with-jwt/"/>
    <url>/articles/spring-boot-security-implement-authentication-filter-with-jwt/</url>
    
    <content type="html"><![CDATA[<p>上一篇實作了建立與解析 JWT 的程式。JWT 經常被攜帶於 request header 中，用來表明自己的身份，與 HTTP Basic 認證需攜帶帳密的 Base64 編碼有異曲同工之妙。</p><p>本文將以 JWT 為基礎，實作一個性質與 HTTP Basic 相似的認證 Filter。首先會說明練習用專案大致有哪些程式。接著開發 Filter，將 header 中的 JWT 轉化為認證後的使用者資料。最後在 Controller 中取用。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch12.5-security-implement-login-api-with-jwt">點我</a>。</p><h2 id="一、程式專案概觀"><a href="#一、程式專案概觀" class="headerlink" title="一、程式專案概觀"></a>一、程式專案概觀</h2><p>本文的範例程式，是基於上一篇的完成後專案繼續實作。筆者僅展示比較重要的部份，而讀者也能下載專案，一邊對照著看。</p><h3 id="（一）使用者資料"><a href="#（一）使用者資料" class="headerlink" title="（一）使用者資料"></a>（一）使用者資料</h3><p>以下是自定義的使用者類別，可假想成對應到資料庫的表。它包含 id、帳號、密碼、暱稱與權限，共 5 個欄位。其中權限包含「學生」與「助理」這 2 種。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Member</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> String nickname;    <span class="hljs-keyword">private</span> List&lt;MemberAuthority&gt; authorities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">MemberAuthority</span> &#123;    STUDENT, ASSISTANT&#125;</code></pre></div><p>以下是自定義的 <code>UserDetails</code> 類別。它在建構子接收了上述的 Member 物件，將當中的值都複製進來。這些值會在後面存取「Security Context」時被使用。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberUserDetails</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetails</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-keyword">private</span> String nickname;    <span class="hljs-keyword">private</span> List&lt;MemberAuthority&gt; memberAuthorities;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MemberUserDetails</span><span class="hljs-params">()</span> &#123;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MemberUserDetails</span><span class="hljs-params">(Member member)</span> &#123;        <span class="hljs-built_in">this</span>.id = member.getId();        <span class="hljs-built_in">this</span>.username = member.getUsername();        <span class="hljs-built_in">this</span>.password = member.getPassword();        <span class="hljs-built_in">this</span>.nickname = member.getNickname();        <span class="hljs-built_in">this</span>.memberAuthorities = member.getAuthorities();    &#125;    <span class="hljs-keyword">public</span> Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.memberAuthorities                .stream()                .map(Enum::name)                .map(SimpleGrantedAuthority::<span class="hljs-keyword">new</span>)                .toList();    &#125;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是自定義的 <code>UserDetailsService</code> 類別，它在建構子可接收多個 Member 物件。但本文並未串接真實的資料庫，故以 Java 的 Map 資料結構來儲存。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserDetailsServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UserDetailsService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Member&gt; memberMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserDetailsServiceImpl</span><span class="hljs-params">(List&lt;Member&gt; members)</span> &#123;        members.forEach(m -&gt; memberMap.put(m.getUsername(), m));    &#125;    <span class="hljs-keyword">public</span> UserDetails <span class="hljs-title function_">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException &#123;        <span class="hljs-type">Member</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> memberMap.get(username);        <span class="hljs-keyword">if</span> (member == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernameNotFoundException</span>(<span class="hljs-string">&quot;Can&#x27;t find username: &quot;</span> + username);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberUserDetails</span>(member);    &#125;&#125;</code></pre></div><h3 id="（二）解析-JWT-的程式"><a href="#（二）解析-JWT-的程式" class="headerlink" title="（二）解析 JWT 的程式"></a>（二）解析 JWT 的程式</h3><p>以下是處理 JWT 相關事務的類別，其中用來解析 JWT 的方法名稱為「parseToken」。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SecretKey secretKey;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> validSeconds;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JwtParser jwtParser;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JwtService</span><span class="hljs-params">(String secretKeyStr, <span class="hljs-type">int</span> validSeconds)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> Claims <span class="hljs-title function_">parseToken</span><span class="hljs-params">(String jwt)</span> <span class="hljs-keyword">throws</span> JwtException &#123;        <span class="hljs-keyword">return</span> jwtParser.parseSignedClaims(jwt).getPayload();    &#125;&#125;</code></pre></div><p>該方法所回傳的 <code>Claims</code> 介面物件，包含了當初放進 JWT 的各種資料，在本文第二節實作認證 Filter 時會取用它們。</p><h3 id="（三）Spring-Security-配置"><a href="#（三）Spring-Security-配置" class="headerlink" title="（三）Spring Security 配置"></a>（三）Spring Security 配置</h3><p>以下是將 <code>UserDetailsService</code> 與 JwtService 建立成元件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">userDetailsService</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">Member</span> <span class="hljs-variable">member</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Member</span>();        member.setId(<span class="hljs-string">&quot;1&quot;</span>);        member.setUsername(<span class="hljs-string">&quot;user1&quot;</span>);        member.setPassword(<span class="hljs-string">&quot;111&quot;</span>);        member.setNickname(<span class="hljs-string">&quot;One&quot;</span>);        member.setAuthorities(List.of(MemberAuthority.STUDENT, MemberAuthority.ASSISTANT));        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserDetailsServiceImpl</span>(List.of(member));    &#125;        <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> JwtService <span class="hljs-title function_">jwtService</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@Value(&quot;$&#123;jwt.secret-key&#125;&quot;)</span> String secretKeyStr,</span><span class="hljs-params">            <span class="hljs-meta">@Value(&quot;$&#123;jwt.valid-seconds&#125;&quot;)</span> <span class="hljs-type">int</span> validSeconds</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtService</span>(secretKeyStr, validSeconds);    &#125;&#125;</code></pre></div><p>此處也建立一筆使用者資料，帳號為「user1」，密碼為「111」。我們會在本文第三節進行測試時，用來呼叫登入 API。</p><h2 id="二、實作認證-Filter"><a href="#二、實作認證-Filter" class="headerlink" title="二、實作認證 Filter"></a>二、實作認證 Filter</h2><h3 id="（一）前言"><a href="#（一）前言" class="headerlink" title="（一）前言"></a>（一）前言</h3><p>當 request 到達後端，Spring Security 背後會有許多 Filter 依序執行不同的工作。多個 Filter 合稱為「過濾鏈」（filter chain），其中也包含了認證與授權的流程。當 request 得到授權，才能進入 Controller。</p><p>在<a href="/articles/spring-boot-security-context-authentication-info/" target="_blank">第 12.4 課</a>，筆者介紹了 HTTP Basic 認證流程的原始碼，也就是 <code>BasicAuthenticationFilter</code>。讓我們先回顧一下該 Filter 的邏輯。</p><p>它獲取了「Authorization」這個 request header 的值，其為帳號與密碼的 Base64 編碼。經由解碼得到帳密的值後，隨即進行身份認證。</p><p>認證成功後，會得到內含使用者資料的 <code>UserDetails</code> 介面物件。將其放入 Security Context 後，即可供其他程式存取。</p><p>而本節也要實作相同目的的 Filter。我們會接收 JWT，進行解析後，將裡頭的使用者資料放入 Security Context，相當於完全取代 HTTP Basic 認證。到了本文第三節，將在 Controller 進行測試。</p><h3 id="（二）建立-Filter"><a href="#（二）建立-Filter" class="headerlink" title="（二）建立 Filter"></a>（二）建立 Filter</h3><p>首先請建立一個 Filter 類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;String&gt; EXCLUDED_PATHS = List.of(<span class="hljs-string">&quot;/login&quot;</span>, <span class="hljs-string">&quot;/who-am-i&quot;</span>);        <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><span class="hljs-params">                                    FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-comment">// TODO</span>        filterChain.doFilter(request, response);    &#125;        <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldNotFilter</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> ServletException &#123;        <span class="hljs-keyword">return</span> EXCLUDED_PATHS.contains(request.getServletPath());    &#125;&#125;</code></pre></div><p>該類別繼承自 <code>OncePerRequestFilter</code>，確保後端每次收到 request，該 Filter 只會執行一次。否則 Spring Security 執行第一次後，因為該 Filter 剛好是個元件（bean），於是 Spring Boot 又執行第二次。</p><p>此處特別覆寫了 <code>shouldNotFilter</code> 方法。範例程式的 Controller 中，有 <code>POST /login</code> 與 <code>GET /who-am-i</code> 這兩支 API。我們不預期在存取登入或測試用途的 API 時，還得經過身份認證。藉由在該方法中判斷 API 路徑，可避免 Filter 處理特定的 request。</p><h3 id="（三）處理收到的-JWT"><a href="#（三）處理收到的-JWT" class="headerlink" title="（三）處理收到的 JWT"></a>（三）處理收到的 JWT</h3><p>依照同樣的思路，以下會逐步實作出一個接收 header，並處理 JWT 的 Filter。為了進行解析，需注入前面提到的 JwtService。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BEARER_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Bearer &quot;</span>;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> JwtService jwtService;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><span class="hljs-params">                                    FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-comment">// 取得 header</span>        <span class="hljs-type">String</span> <span class="hljs-variable">authHeader</span> <span class="hljs-operator">=</span> request.getHeader(HttpHeaders.AUTHORIZATION);        <span class="hljs-keyword">if</span> (authHeader == <span class="hljs-literal">null</span>) &#123;            filterChain.doFilter(request, response);        &#125;        <span class="hljs-comment">// 解析 JWT</span>        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> authHeader.substring(BEARER_PREFIX.length());        Claims claims;        <span class="hljs-keyword">try</span> &#123;            claims = jwtService.parseToken(jwt);        &#125; <span class="hljs-keyword">catch</span> (JwtException e) &#123;            response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);            <span class="hljs-keyword">return</span>;        &#125;        <span class="hljs-comment">// TODO</span>        filterChain.doFilter(request, response);    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>首先從 Authorization 這個 request header 取出值。由於攜帶 JWT 的格式，是以「Bearer」加一個半形空格做為前綴，因此要進行字串的擷取，才能得到 JWT 的值。將其傳入 JwtService 進行解析後，得到 <code>Claims</code> 介面的物件。</p><p>如果 JWT 因為過期、格式錯誤等原因而導致解析失敗，則回傳 HTTP 401 的狀態碼，就不再將 request 往 Controller 送去了。</p><p>接下來筆者將 <code>Claims</code> 物件中所包含的使用者資料，轉換為 MemberUserDetails 類別的規格。好處是透過「getId」、「getNickname」等事先設計好的方法來取值，會讓我們更加直覺。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BEARER_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Bearer &quot;</span>;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> JwtService jwtService;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><span class="hljs-params">                                    FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-comment">// ...</span>        <span class="hljs-comment">// 建立 UserDetails 物件</span>        <span class="hljs-type">MemberUserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MemberUserDetails</span>();        userDetails.setId(claims.getSubject());        userDetails.setUsername(claims.get(<span class="hljs-string">&quot;username&quot;</span>, String.class));        userDetails.setNickname(claims.get(<span class="hljs-string">&quot;nickname&quot;</span>, String.class));        List&lt;MemberAuthority&gt; memberAuthorities = ((List&lt;String&gt;) claims.get(<span class="hljs-string">&quot;authorities&quot;</span>))                .stream()                .map(MemberAuthority::valueOf)                .toList();        userDetails.setMemberAuthorities(memberAuthorities);                <span class="hljs-comment">// TODO</span>        filterChain.doFilter(request, response);    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>呼叫 <code>Claims.get</code> 方法，傳入欄位名稱與要轉換成的型態，即可得到欄位值。要注意的是，該方法僅支援轉換成簡單的 String、Integer、Date 等型態。</p><p>若想轉換成其他型態，例如 List、陣列或自定義的類別等，請參考<a href="https://github.com/jwtk/jjwt?tab=readme-ov-file#parsing-of-custom-claim-types">文件</a>，實作反序列化（deserialize）的方式。</p><p>將 <code>Claims</code> 中的資料包裝成 MemberUserDetails 後，最後就是要放入 Security Context 了。放入的方式，是提供 <code>Authentication</code> 介面的物件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtAuthenticationFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span><span class="hljs-params">                                    FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;        <span class="hljs-comment">// ...</span>        <span class="hljs-comment">// 放入 Security Context</span>        <span class="hljs-type">Authentication</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(                userDetails,                <span class="hljs-literal">null</span>,                userDetails.getAuthorities()        );        SecurityContextHolder.getContext().setAuthentication(token);        filterChain.doFilter(request, response);    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>此處選擇的 <code>Authentication</code> 為 <code>UsernamePasswordAuthenticationToken</code>。它是一個方便的物件，能夠以 Object 型態攜帶使用者資料。也能以 Collection 介面，攜帶權限資料給 Spring Security。</p><h3 id="（四）配置到過濾鏈"><a href="#（四）配置到過濾鏈" class="headerlink" title="（四）配置到過濾鏈"></a>（四）配置到過濾鏈</h3><p>實作完 JWT 的認證 Filter 後，我們需要添加到 Spring Security 的 filter chain 中，認證的效果才能生效。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(</span><span class="hljs-params">            HttpSecurity httpSecurity,</span><span class="hljs-params">            JwtAuthenticationFilter jwtAuthFilter</span><span class="hljs-params">    )</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> httpSecurity                .csrf(AbstractHttpConfigurer::disable)                .authorizeHttpRequests(requests -&gt; requests.anyRequest().permitAll())                .addFilterBefore(jwtAuthFilter, BasicAuthenticationFilter.class)                .build();    &#125;&#125;</code></pre></div><p>Spring Security 的 filter chain 會比其他 Filter 還優先執行。而裡頭最後一個執行的 Filter 叫做 <code>AuthorizationFilter</code>，正是負責 API 的授權。</p><p>因此，若未將自定義的認證 Filter 添加到 Spring Security 中，那麼它就會比 <code>AuthorizationFilter</code> 還晚執行。即便程式碼中有提供權限資料給 Security Context，但早就先被判定為不允許授權了。</p><p>此處呼叫 <code>addFilterBefore</code> 方法，將 JwtAuthenticationFilter 放置在 <code>BasicAuthenticationFilter</code> 的前面。選擇相鄰位置的理由，是因為它們的性質相同，筆者認為較不會影響 filter chain 的運作。</p><h2 id="三、在-Controller-測試"><a href="#三、在-Controller-測試" class="headerlink" title="三、在 Controller 測試"></a>三、在 Controller 測試</h2><p>上一節實作出認證的 Filter 後，本節我們會在 Controller 取出 API 存取方的使用者資料進行運用。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@GetMapping(&quot;/home&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">Object</span> <span class="hljs-variable">principal</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication().getPrincipal();        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;anonymousUser&quot;</span>.equals(principal)) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你尚未經過身份認證&quot;</span>;        &#125;        <span class="hljs-type">MemberUserDetails</span> <span class="hljs-variable">userDetails</span> <span class="hljs-operator">=</span> (MemberUserDetails) principal;        <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;嗨，你的編號是%s%n帳號：%s%n暱稱：%s%n權限：%s&quot;</span>,                userDetails.getId(),                userDetails.getUsername(),                userDetails.getNickname(),                userDetails.getAuthorities()        );    &#125;&#125;</code></pre></div><p>上面的範例程式中，從 <code>SecurityContext</code> 取出了 principal 的資料。如果存取 API 時未攜帶 JWT，principal 的值固定會是「anonymousUser」字串。針對此情形，僅回傳簡單的字串。</p><p>若 JwtAuthenticationFilter 有將解析成功的結果轉換為 MemberUserDetails，並放入 <code>SecurityContext</code>，則 principal 的值將會是這份 <code>UserDetails</code>。</p><p>如果讀者對 Security Context 不太了解，可參考<a href="/articles/spring-boot-security-context-authentication-info/" target="_blank">第 12.4 課</a>。或者想將存取 Security Context 的過程封裝成元件，該文亦有範例程式。</p><p>下圖是使用 Postman 進行測試的結果。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-implement-authentication-filter-with-jwt/spring-security-postman-send-jwt-to-get-context.png"></p><p>可看到 API 回傳了 id、帳號、暱稱與權限，成功以 JWT 取代 HTTP Basic 的認證方式。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch12.6-security-implement-authentication-filter-with-jwt">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-security-implement-login-api-with-jwt/" target="_blank">【Spring Boot】第12.5課－將 Spring Security 與 JWT 結合，實作登入 API</a></p><p>下一課：<a href="/articles/spring-boot-swagger-ui-openapi-documentation/" target="_blank">【Spring Boot】第13課－使用 Swagger UI 製作 API 文件與呼叫介面</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
      <category>Spring Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第12.5課－將 Spring Security 與 JWT 結合，實作登入 API</title>
    <link href="/articles/spring-boot-security-implement-login-api-with-jwt/"/>
    <url>/articles/spring-boot-security-implement-login-api-with-jwt/</url>
    
    <content type="html"><![CDATA[<p>為了存取受到 Spring Security 保護的 RESTful API，前端發出請求時，必須出示某種「證明」，來得到後端的授權。例如先前介紹的 HTTP Basic 認證，會在「Authorization」這個 header 攜帶帳號與密碼的 Base64 編碼。</p><p>做為另一個方案，本文將實作叫做「JWT」的資料。首先會介紹 Token 的概念，以及 JWT 的組成。接著利用第三方函式庫，實作出產生與解析 JWT 的程式，藉此設計出登入用途的 API。</p><hr><h2 id="一、JWT-介紹"><a href="#一、JWT-介紹" class="headerlink" title="一、JWT 介紹"></a>一、JWT 介紹</h2><h3 id="（一）什麼是-Token"><a href="#（一）什麼是-Token" class="headerlink" title="（一）什麼是 Token"></a>（一）什麼是 Token</h3><p>讀者是否有在學校圖書館借書時要刷學生證，或者在公司搭電梯要刷門禁卡的經驗？由於這些設施不會開放給外人使用，因此需要出示類似「識別證」的物品，來表明自己是誰。</p><p>在 Web API 的範疇，Token 就如同識別證，後端可從中得到該人的身份。筆者在第 17.3 課介紹了 HTTP Basic 認證，我們存取 API 時，就有在「Authorization」這個 header 攜帶帳號與密碼的 Base64 編碼，這就是一種簡易的 Token。</p><p>若想實現更強大的身份認證，系統會設計成讓使用者登入後，得到以下 2 種不同用途的 Token，請前端保存在本地。</p><ul><li>Access Token：存取 API 時會攜帶於 request header，證明自己的身份。為了安全性，其有效期限較短，例如 1 小時。因此若外洩，則盜用者也無法使用太久的時間。</li><li>Refresh Token：在換發新的 Access Token 時提供。有效期限較長，例如 7 天。<br>透過 Refresh Token，就能在不重新登入的條件下，取得新的 Access Token，有助於使用者體驗。等到 Refresh Token 到期，就真的要重新登入，取得以上 2 種 Token 了。</li></ul><p>那麼如果 Refresh Token 被盜用怎麼辦？其實絕對安全是很難做到的。Access Token 雖然經常被攜帶，但有效期限短，而 Refresh Token 被攜帶的機會少很多。透過這樣的設計，來降低被盜用的風險與影響程度。</p><h3 id="（二）JWT-的內容"><a href="#（二）JWT-的內容" class="headerlink" title="（二）JWT 的內容"></a>（二）JWT 的內容</h3><p>JWT 的全名是「JSON Web Token」，它是一種將 JSON 資料進行編碼的標準，現今經常被當作證明身份的資料。</p><p>JWT 是由「標頭」（header）、「內容」（payload）與「簽名」（signature）這 3 個部份組成。因包含簽名，故又稱為 JWS（JSON Web Signature）。</p><p>標頭主要包含兩個欄位。「alg」代表簽名時使用的演算法，「typ」代表 token 的種類。</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>我們可以在 JWT 中存放各種資料，以下列舉幾種常見的標準欄位。</p><table><thead><tr><th>欄位名稱</th><th>全稱</th><th>意義</th></tr></thead><tbody><tr><td>iss</td><td>Issuer</td><td>JWT 的發行方</td></tr><tr><td>sub</td><td>Subject</td><td>這個 JWT 的主體是誰，通常是指使用者的唯一標識</td></tr><tr><td>iat</td><td>Issued At</td><td>JWT 的建立時間</td></tr><tr><td>nbf</td><td>Not Before</td><td>JWT 的生效時間</td></tr><tr><td>exp</td><td>Expiration Time</td><td>JWT 的到期時間</td></tr></tbody></table><p>除了標準欄位，也能存放自定義的欄位。例如使用者的信箱、權限、偏好等。要注意的是，JWT 中的所有資料都會經過 Base64 編碼的處理。然而這種編碼方式是可以被還原成原文的，因此請不要存放私密資料，如密碼或身份證字號等。</p><p>筆者撰寫本文時，注意到 ChatGPT 有舉例在自定義欄位存放使用者 id，心想與上述的「sub」欄位非常類似。進一步詢問後，得到的解釋是 sub 欄位可以是使用者在資料庫中的唯一 id，而自定義欄位可提供商業邏輯的 id。</p><p>以生活情境來比喻，假設某人大學畢業後，就讀同校的研究所。由於校方已有該人在大學時期的資料，因此資料庫中勢必有個 id 對應到他（如 MySQL 的流水號或 MongoDB 的 ObjectId）。而大學和研究所的「學號」可能會不同，這就屬於商業邏輯的 id。</p><h3 id="（三）JWT-的簽名"><a href="#（三）JWT-的簽名" class="headerlink" title="（三）JWT 的簽名"></a>（三）JWT 的簽名</h3><p>透過「簽名」，可以幫助驗證內容是否合法或遭竄改。簽名的產生過程，是將內容經過演算法與密鑰（secret key）的處理所得到。</p><p>為方便讀者理解，讓我們以簡單的「凱薩加密法」為例。凱薩加密法的原理，是將欲加密的內容（假設都是英文字母），偏移一定的量。假設偏移量為 3，則「apple」的加密結果為「dssoh」。此時密鑰為「3」，簽名為「dssoh」。</p><p>JWT 的內容與簽名是會一併傳遞的。驗證的方式，是將收到的內容，以相同的密鑰與演算法產生另一組簽名，並與收到的簽名比對是否相同。若不同，則代表內容是不合法的。</p><p>例如收到的內容是「peach」，而收到的偽造簽名是「qfbdi」（偏移量 1）。此時系統使用偏移量 3 所產生的簽名為「shdfk」。由於兩組簽名不同，故視為認證失敗。同時我們也意會到密鑰是不能外流的。</p><p>回到 JWT 的簽名。其產生過程，是將標頭與內容分別進行 Base64 編碼後串接起來，再透過特定演算法與密鑰的處理所產生。</p><p>JWT 的官網提供了<a href="https://jwt.io/#debugger-io">工具</a>，用來產生與驗證 JWT。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-implement-login-api-with-jwt/jwt-debugger.png"></p><p>整個 JWT 的組成，就是 <code>標頭的編碼.內容的編碼.簽名</code>。</p><h2 id="二、準備程式專案"><a href="#二、準備程式專案" class="headerlink" title="二、準備程式專案"></a>二、準備程式專案</h2><h3 id="（一）Spring-Security-配置"><a href="#（一）Spring-Security-配置" class="headerlink" title="（一）Spring Security 配置"></a>（一）Spring Security 配置</h3><p>認識了 JWT 後，本文讓我們在程式專案中實作出來。首先進行 Spring Security 的配置，請確認 pom.xml 檔案已經添加以下依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>以下是 Spring Security 的配置。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> httpSecurity                .csrf(csrf -&gt; csrf.disable())                .authorizeHttpRequests(requests -&gt; requests.anyRequest().permitAll())                .build();    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserDetailsService <span class="hljs-title function_">inMemoryUserDetailsManager</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user1&quot;</span>)                .password(<span class="hljs-string">&quot;111&quot;</span>)                .authorities(<span class="hljs-string">&quot;STUDENT&quot;</span>, <span class="hljs-string">&quot;ASSISTANT&quot;</span>)                .build();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(List.of(user));    &#125;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> PasswordEncoder <span class="hljs-title function_">passwordEncoder</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> NoOpPasswordEncoder.getInstance();    &#125;&#125;</code></pre></div><p>呼叫 <code>csrf</code> 方法，可進一步停用對於 CSRF 攻擊的保護機制，讓 Postman 工具能順利存取 API。</p><p>呼叫 <code>authorizeHttpRequests</code> 方法，可進一步定義各個 RESTful API 的授權規則。此處設定為 API 不需通過認證也可存取。</p><p>另外也準備了測試使用者，帳號為「user1」，密碼為「111」，權限為「學生」與「助理」。另外也需建立 <code>PasswordEncoder</code> 元件，以指定密碼的加密方式，筆者選擇不加密。</p><p>附帶一提，<code>InMemoryUserDetailsManager</code> 本身就有實作 <code>UserDetailsService</code> 介面。若讀者想改為串接真實的資料庫，只要基於此介面進行抽換即可，做法可參考<a href="/articles/spring-boot-security-authentication-integrating-with-mongodb-database/" target="_blank">第 12.2 課</a>。</p><h3 id="（二）設計登入-API"><a href="#（二）設計登入-API" class="headerlink" title="（二）設計登入 API"></a>（二）設計登入 API</h3><p>接下來讓我們設計一個登入用的 API，它會接收帳號與密碼，並於本文第三節完成後回傳 JWT。以下是用來當作 request body 的類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginRequest</span> &#123;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> String password;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是 Controller 的程式，注入了 <code>UserDetailsService</code> 與 <code>PasswordEncoder</code> 元件。此處提供了 <code>POST /login</code> 這支 API，邏輯很單純地是先查詢使用者，再比對密碼。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserDetailsService userDetailsService;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> PasswordEncoder passwordEncoder;    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginRequest request)</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDetailsService.loadUserByUsername(request.getUsername());        <span class="hljs-keyword">if</span> (!passwordEncoder.matches(request.getPassword(), user.getPassword())) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadCredentialsException</span>(<span class="hljs-string">&quot;Authentication fails because of incorrect password.&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;帳密正確，回傳 JWT&quot;</span>;    &#125;&#125;</code></pre></div><p>下圖是使用 Postman 進行測試的結果。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-implement-login-api-with-jwt/spring-boot-login-api-test.png"></p><p>若帳密有誤，則拋出 Spring Security 內建的 <code>BadCredentialsException</code> 例外。</p><h2 id="三、實作產生-JWT"><a href="#三、實作產生-JWT" class="headerlink" title="三、實作產生 JWT"></a>三、實作產生 JWT</h2><h3 id="（一）程式實作"><a href="#（一）程式實作" class="headerlink" title="（一）程式實作"></a>（一）程式實作</h3><p>這節讓我們實作產生 JWT 的程式。在 JWT 官網的 <a href="https://jwt.io/libraries">libraries</a> 頁面，可找到許多開源的 library。本文挑選「JJWT」，其操作方式簡單，且 GitHub 的星星數最多，相當知名。</p><p>根據該 library 的 <a href="https://github.com/jwtk/jjwt">GitHub</a> 頁面所寫，請在 pom.xml 檔案添加依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.12.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.12.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.jsonwebtoken<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jjwt-jackson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.12.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>以下建立一個叫做「JwtService」的類別，負責 JWT 相關的事務。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> io.jsonwebtoken.security.Keys;<span class="hljs-keyword">import</span> javax.crypto.SecretKey;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SecretKey secretKey;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> validSeconds;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JwtService</span><span class="hljs-params">(String secretKeyStr, <span class="hljs-type">int</span> validSeconds)</span> &#123;        <span class="hljs-built_in">this</span>.secretKey = Keys.hmacShaKeyFor(secretKeyStr.getBytes());        <span class="hljs-built_in">this</span>.validSeconds = validSeconds;    &#125;    <span class="hljs-comment">// TODO</span>&#125;</code></pre></div><p>在範例程式中，除了透過密鑰來簽名，也會設定 JWT 的有效時間。而密鑰的建立方式，是將一組自定義的字串傳入 <code>Keys.hmacShaKeyFor</code> 方法所產生，而這是不能外流的。</p><p>接著將 JwtService 建立為元件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> JwtService <span class="hljs-title function_">jwtService</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@Value(&quot;$&#123;jwt.secret-key&#125;&quot;)</span> String secretKeyStr,</span><span class="hljs-params">            <span class="hljs-meta">@Value(&quot;$&#123;jwt.valid-seconds&#125;&quot;)</span> <span class="hljs-type">int</span> validSeconds</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtService</span>(secretKeyStr, validSeconds);    &#125;&#125;</code></pre></div><p>關於用來建立密鑰的字串，以及 JWT 的有效時間，此處取自 application.properties 檔案的參數，因此請在該檔案中定義。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">jwt.secret-key</span>=<span class="hljs-string">1234567890abcdefghij1234567890ab</span><span class="hljs-attr">jwt.valid-seconds</span>=<span class="hljs-string">60</span></code></pre></div><p>以上兩個參數，讀者可自行取名和定義值。筆者設計成 JWT 的有效期限為 60 秒。附帶一提，這款 library 規定密鑰字串的長度至少要 256 位元，即 32 個字。</p><p>事前準備完成後，便能撰寫程式產生 JWT。以下宣告了一個叫做「createLoginAccessToken」的方法，它會接收 <code>UserDetails</code> 介面的物件，將裡面的資料附加到 JWT 中。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.Instant;<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SecretKey secretKey;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> validSeconds;    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">createLoginAccessToken</span><span class="hljs-params">(UserDetails user)</span> &#123;        <span class="hljs-comment">// 計算過期時間</span>        <span class="hljs-type">long</span> <span class="hljs-variable">expirationMillis</span> <span class="hljs-operator">=</span> Instant.now()                .plusSeconds(validSeconds)                .getEpochSecond()                * <span class="hljs-number">1000</span>;        <span class="hljs-comment">// 準備 payload 內容</span>        <span class="hljs-type">Claims</span> <span class="hljs-variable">claims</span> <span class="hljs-operator">=</span> Jwts.claims()                .issuedAt(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>())                .expiration(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(expirationMillis))                .add(<span class="hljs-string">&quot;username&quot;</span>, user.getUsername())                .add(<span class="hljs-string">&quot;authorities&quot;</span>, user.getAuthorities())                .build();        <span class="hljs-comment">// 簽名後產生 JWT</span>        <span class="hljs-keyword">return</span> Jwts.builder()                .claims(claims)                .signWith(secretKey)                .compact();    &#125;&#125;</code></pre></div><p>首先計算出 JWT 的過期時間，做法是將現在時間加上有效秒數，再換算為毫秒。</p><p>接著呼叫 <code>Jwts.claims</code> 方法，逐一添加 payload 的內容。JWT 的標準欄位如「iss」、「exp」等，都有對應的方法能直接呼叫。而自定義的欄位，可呼叫 <code>add</code> 方法來提供，此處傳入了 <code>UserDetails</code> 物件的帳號與權限。</p><p>最後呼叫 <code>Jwts.builder</code> 方法，將 payload 傳入。用密鑰簽名後，呼叫 <code>compact</code> 方法，終於產生 JWT 的字串。</p><h3 id="（二）在登入-API-應用"><a href="#（二）在登入-API-應用" class="headerlink" title="（二）在登入 API 應用"></a>（二）在登入 API 應用</h3><p>完成產生 JWT 的程式後，便可注入到 Controller，應用在登入的 API 了。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-comment">// ...</span>        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> JwtService jwtService;    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginRequest request)</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDetailsService.loadUserByUsername(request.getUsername());        <span class="hljs-keyword">if</span> (!passwordEncoder.matches(request.getPassword(), user.getPassword())) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadCredentialsException</span>(<span class="hljs-string">&quot;Authentication fails because of incorrect password.&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> jwtService.createLoginAccessToken(user);    &#125;&#125;</code></pre></div><p>在此將通過身份認證的 <code>UserDetails</code> 傳入 JwtService 中，產生 JWT 字串後回傳。</p><p>下圖是使用 Postman 進行測試的結果。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-implement-login-api-with-jwt/spring-boot-login-api-return-jwt.png"></p><p>範例為了方便，故以純文字回傳 JWT。若讀者想以 JSON 格式的 response body 回傳，也是可以的。</p><h2 id="四、實作解析-JWT"><a href="#四、實作解析-JWT" class="headerlink" title="四、實作解析 JWT"></a>四、實作解析 JWT</h2><h3 id="（一）程式實作-1"><a href="#（一）程式實作-1" class="headerlink" title="（一）程式實作"></a>（一）程式實作</h3><p>本節會實作解析 JWT 內容的程式。除了在本文確認 JWT 的內容是否與我們預期的相同，也為下一篇將解析出的使用者資料放入「Security Context」來做準備。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> SecretKey secretKey;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> validSeconds;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> JwtParser jwtParser;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JwtService</span><span class="hljs-params">(String secretKeyStr, <span class="hljs-type">int</span> validSeconds)</span> &#123;        <span class="hljs-built_in">this</span>.secretKey = Keys.hmacShaKeyFor(secretKeyStr.getBytes());        <span class="hljs-built_in">this</span>.jwtParser = Jwts.parser().verifyWith(secretKey).build();        <span class="hljs-built_in">this</span>.validSeconds = validSeconds;    &#125;    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> Claims <span class="hljs-title function_">parseToken</span><span class="hljs-params">(String jwt)</span> <span class="hljs-keyword">throws</span> JwtException &#123;        <span class="hljs-keyword">return</span> jwtParser.parseSignedClaims(jwt).getPayload();    &#125;&#125;</code></pre></div><p>在 JwtService 中，透過本文第三節建立的 <code>SecretKey</code> 密鑰物件，可再建立出 <code>JwtParser</code> 物件。它能夠解析 JWT 字串，並比對簽名來驗證是否合法。</p><p>範例程式中宣告了叫做「parseToken」的方法，它的用途是接收 JWT 字串，並使用 <code>JwtParser</code> 進行解析。若解析失敗，例如過期、不合法，或格式錯誤，則拋出 <code>JwtException</code>。</p><p>事實上，<code>JwtException</code> 並非 checked expection。筆者是希望呼叫這個方法的其他地方，都能留意這項例外的處理，所以才定義在方法上。</p><p>最後可得到 Claims 介面的物件，它就是在本文第三節產生 JWT 時，我們放入 payload 的內容。此外，該介面本身正好有繼承 <code>Map&lt;String, Object&gt;</code> 介面。</p><h3 id="（二）在-Controller-使用"><a href="#（二）在-Controller-使用" class="headerlink" title="（二）在 Controller 使用"></a>（二）在 Controller 使用</h3><p>為了實際確認解析的結果，讓我們回到 Controller 提供另一支 API。它會從「Authorization」這個 request header 讀取 JWT，並交由 JwtService 解析後回傳結果。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">BEARER_PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Bearer &quot;</span>;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> JwtService jwtService;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@GetMapping(&quot;/who-am-i&quot;)</span>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">whoAmI</span><span class="hljs-params">(<span class="hljs-meta">@RequestHeader(HttpHeaders.AUTHORIZATION)</span> String authorization)</span> &#123;        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> authorization.substring(BEARER_PREFIX.length());        <span class="hljs-keyword">try</span> &#123;            <span class="hljs-keyword">return</span> jwtService.parseToken(jwt);        &#125; <span class="hljs-keyword">catch</span> (JwtException e) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadCredentialsException</span>(e.getMessage(), e);        &#125;    &#125;&#125;</code></pre></div><p>在 request header 攜帶 JWT 時，格式是先以「Bearer」加一個半形空格做為前綴，才加上 JWT。因此後端接收到 header 後，要先排除該前綴，才能進行解析。</p><p>若解析發生問題，則對 <code>JwtException</code> 進行例外處理。此處再拋出 <code>BadCredentialsException</code>，讓 Spring Security 回傳 HTTP 401 的狀態碼。</p><p>下圖是使用 Postman 進行測試的結果。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-implement-login-api-with-jwt/spring-boot-api-parse-jwt.png"></p><p>操作方式是切換到 Authorization 頁籤，在下拉式選單選取「Bearer Token」，並填入 JWT。發送 request 時，Postman 會自動在「Authorization」這個 header 加上「Bearer」與一個半形空格的前綴，此為攜帶 Token 的格式。</p><p>本文到目前為止，已經完成 JWT 的產生與解析。後續小節將基於目前實作出的程式做優化。</p><h2 id="五、讓登入-API-回傳更多資料"><a href="#五、讓登入-API-回傳更多資料" class="headerlink" title="五、讓登入 API 回傳更多資料"></a>五、讓登入 API 回傳更多資料</h2><p>根據筆者在前公司的經驗，登入 API 除了回傳 JWT，還會附上其他資料，例如使用者的 id、名字、偏好設定等。目的是控制前端的行為，例如登入後要前往什麼畫面、如何顯示某些 HTML，或者將其攜帶於 query string，有各種用途。</p><p>本節讓我們在登入 API 多回傳一點資料。以下是用來當作 response body 的類別，叫做「LoginResponse」。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginResponse</span> &#123;    <span class="hljs-keyword">private</span> String jwt;    <span class="hljs-keyword">private</span> String username;    <span class="hljs-keyword">private</span> List&lt;String&gt; authorities;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LoginResponse <span class="hljs-title function_">of</span><span class="hljs-params">(String jwt, UserDetails user)</span> &#123;        <span class="hljs-type">LoginResponse</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoginResponse</span>();        res.jwt = jwt;        res.username = user.getUsername();        res.authorities = user.getAuthorities()                .stream()                .map(GrantedAuthority::getAuthority)                .toList();        <span class="hljs-keyword">return</span> res;    &#125;        <span class="hljs-comment">// getter ...</span>&#125;</code></pre></div><p>接下來調整 Controller 的程式，將 <code>UserDetails</code> 物件中的帳號與權限資料，放入 LoginResponse 物件後回傳。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>    <span class="hljs-keyword">public</span> LoginResponse <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginRequest request)</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userDetailsService.loadUserByUsername(request.getUsername());        <span class="hljs-keyword">if</span> (!passwordEncoder.matches(request.getPassword(), user.getPassword())) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BadCredentialsException</span>(<span class="hljs-string">&quot;Authentication fails because of incorrect password.&quot;</span>);        &#125;        <span class="hljs-type">String</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> jwtService.createLoginAccessToken(user);        <span class="hljs-keyword">return</span> LoginResponse.of(jwt, user);    &#125;&#125;</code></pre></div><p>下圖是使用 Postman 進行測試的結果。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-implement-login-api-with-jwt/spring-boot-login-api-return-json.png"></p><p>然而在本節的範例中，能夠從 <code>UserDetails</code> 物件取得的內容，就只有帳號與權限而已。若讀者想在 JWT 本身或登入 API 的 response body 攜帶更多使用者資料，不妨搭配實作自己的 <code>UserDetails</code> 和 <code>UserDetailsService</code>。詳情可參考<a href="/articles/spring-boot-security-context-authentication-info/" target="_blank">第 12.4 課</a>。</p><p>筆者在文末附上的完成後專案，也會融入這部份的實作。下圖是使用 Postman 測試登入 API 的結果。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-implement-login-api-with-jwt/spring-boot-login-api-return-more-data.png"></p><p>例子中可看到額外回傳了使用者的 id 與暱稱。</p><h2 id="六、使用-AuthenticationManager-元件進行認證"><a href="#六、使用-AuthenticationManager-元件進行認證" class="headerlink" title="六、使用 AuthenticationManager 元件進行認證"></a>六、使用 AuthenticationManager 元件進行認證</h2><p>還記得 <code>UserDetails</code> 介面所提供的方法，除了回傳帳號、密碼與權限，還包含一些狀態嗎？</p><table><thead><tr><th>方法名稱</th><th>意義</th></tr></thead><tbody><tr><td>isEnabled</td><td>帳號已啟用</td></tr><tr><td>isAccountNonLocked</td><td>帳號未被鎖定</td></tr><tr><td>isAccountNonExpired</td><td>帳號未過期</td></tr><tr><td>isCredentialsNonExpired</td><td>密碼未過期</td></tr></tbody></table><p>Spring Security 進行身份認證時，會一併檢查這 4 種狀態。若其中一個方法回傳 false，即便帳號與密碼正確，仍應視為認證失敗。</p><p>本文剛開始實作登入 API 時，我們只是很簡單地在 Controller 呼叫 <code>UserDetailsService</code> 與 <code>PasswordEncoder</code> 元件來確認帳密。若還想檢查狀態，勢必會寫出更多程式碼。事實上，可以請 Spring Security 幫忙做這些檢查工作。</p><p>在<a href="/articles/spring-boot-security-context-authentication-info/" target="_blank">第 12.4 課</a>，筆者介紹了 HTTP Basic 認證的原始碼，其中提到了介面為 <code>AuthenticationManager</code> 的物件。它的用途便是接收帳號與密碼，並在底層使用 <code>UserDetailsService</code> 與 <code>PasswordEncoder</code> 進行身份認證。此外也會檢查上述的帳號狀態。</p><p>本節的目的，就是要替換成使用 <code>AuthenticationManager</code> 來認證。然而 Spring Security 並不會在 IoC 容器自動建立它的元件，我們得自行建立。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> AuthenticationManager <span class="hljs-title function_">authenticationManager</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> httpSecurity.getSharedObject(AuthenticationManagerBuilder.class).build();    &#125;&#125;</code></pre></div><p>回到 Controller，我們將帳號與密碼的值，包裝成 <code>UsernamePasswordAuthenticationToken</code> 物件，再傳入 <code>AuthenticationManager.authenticate</code> 方法進行認證。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> AuthenticationManager authenticationManager;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@PostMapping(&quot;/login&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">login</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> LoginRequest request)</span> &#123;        <span class="hljs-type">Authentication</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UsernamePasswordAuthenticationToken</span>(            request.getUsername(),            request.getPassword()        );        <span class="hljs-type">Authentication</span> <span class="hljs-variable">auth</span> <span class="hljs-operator">=</span> authenticationManager.authenticate(auth);        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> (UserDetails) auth.getPrincipal();        <span class="hljs-keyword">return</span> jwtService.createAccessToken(user);    &#125;&#125;</code></pre></div><p>認證成功後，會得到新的 <code>Authentication</code> 物件，其 <code>principal</code> 欄位為 <code>UserDetails</code> 介面的物件。將它取出運用，就能接續原本的程式碼了。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch12.5-security-implement-login-api-with-jwt">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-security-context-authentication-info/" target="_blank">【Spring Boot】第12.4課－從 Security Context 取得 API 存取方的認證資訊</a></p><p>下一課：<a href="/articles/spring-boot-security-implement-authentication-filter-with-jwt/" target="_blank">【Spring Boot】第12.6課－實作 Spring Security 的認證 Filter（以 JWT 為例）</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
      <category>Spring Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第12.1課－初探 Spring Security 的認證與授權</title>
    <link href="/articles/spring-boot-security-authentication-and-authorization/"/>
    <url>/articles/spring-boot-security-authentication-and-authorization/</url>
    
    <content type="html"><![CDATA[<p>Spring Security 是一套框架，它能幫助我們開發有關認證與授權等有關安全管理的功能。</p><p>本文會進行 Spring Security 的初始配置。首先準備簡單的 RESTful API，並搭配 in-memory 的測試帳號，在瀏覽器登入存取 API。藉此讓讀者建立認證的概念。</p><p>至於授權的部份，則會設計帳號的權限，並定義 API 要開放給哪些權限。</p><hr><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>Spring Security 是一套可以保護 Spring Boot 應用程式的框架。它扮演著如同保全的角色，能夠管控人員的進出，以及誰可以去什麼地方。</p><p>那麼要保護什麼呢？假設我們有一個校務系統，已知有「學生」和「老師」兩種角色。使用情境中，老師可以建立課程資料、給學生打分數；而學生可以選課、給予課程回饋。當然，這些操作都要先登入系統才能進行。</p><p>基於這個情境，對學生而言，課程和分數的資料就只能查看，不能建立、修改或刪除。對老師而言，課程回饋只能查看，不能修改。</p><p>所以說，Spring Security 這套安全管理的框架，就是要保護服務、資料等各項資源，不會被任意存取。</p><p>Spring Security 提供了兩大功能，分別是認證（authentication）與授權（authorization）。認證就相當於前面提到的登入，向系統表示自己是個擁有帳號的使用者。而授權則是系統允許該使用者存取某服務，也就是存取 API。</p><h2 id="二、程式專案概觀"><a href="#二、程式專案概觀" class="headerlink" title="二、程式專案概觀"></a>二、程式專案概觀</h2><p>本系列文章的範例程式，使用的 Spring Boot 版本為 3.4.4。</p><p>請建立 Controller，準備一支簡單的 API，做為測試用途。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@GetMapping(&quot;/home&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;系統首頁&quot;</span>;    &#125;&#125;</code></pre></div><p>啟動程式後，讀者可在瀏覽器上前往 <code>http://localhost:8080/home</code>，確認有出現該 API 回傳的「系統首頁」字串。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-authentication-and-authorization/spring-security-call-api-in-browser.png"></p><p>接著請在 pom.xml 檔案添加 Spring Security 的依賴，並且重新整理，將函式庫下載到程式專案中。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>即便現在我們尚未做任何設定，但 Spring Security 預設將自動保護所有 API。此時重新啟動程式，讀者再前往該網址，便會看見內建的登入畫面。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-authentication-and-authorization/spring-security-login-page.png"></p><p>雖然在前後端分離的系統中，並不會使用這種登入畫面，然而在初學 Spring Security 時，它是用來測試認證與授權的好管道。</p><p>Spring Security 在每次程式啟動時，都會產生一個叫「user」的帳號。而密碼為隨機值，在 console 中可找到如下的訊息：</p><div class="code-wrapper"><pre><code class="hljs text">Using generated security password: 8698d55e-33dc-461c-80e4-a8e364b23a6c</code></pre></div><p>這時在登入畫面輸入該組帳密，就又能看見剛剛的「系統首頁」文字了。</p><p>而 Spring Security 也有內建登出畫面，網址為 <code>http://localhost:8080/logout</code>。<br><img src="https://chikuwacode.github.io/articles/spring-boot-security-authentication-and-authorization/spring-security-logout-page.png"></p><p>在本文第三節登入測試帳號後，可透過此畫面來登出，以切換不同帳號。</p><h2 id="三、實作認證功能"><a href="#三、實作認證功能" class="headerlink" title="三、實作認證功能"></a>三、實作認證功能</h2><h3 id="（一）準備測試帳號"><a href="#（一）準備測試帳號" class="headerlink" title="（一）準備測試帳號"></a>（一）準備測試帳號</h3><p>實務開發中，都是在資料庫儲存使用者的帳密。然而接下來的範例程式，若馬上引進資料庫，那我們就勢必得先準備資料庫的服務、設計使用者的資料表欄位，並在 Spring Boot 中串接。</p><p>為避免讀者在學習上分心，以及文章篇幅過長，筆者在本文會使用 Spring Security 提供的「in-memory user」功能，快速建立簡易的測試帳號。</p><p>待本文結束，對 Spring Security 的認證與授權有概念後，在<a href="/articles/spring-boot-security-authentication-integrating-with-mongodb-database/" target="_blank">第 12.2 課</a>會抽換成使用資料庫來儲存帳密。</p><p>以下建立了一個配置類別，並冠上 <code>@EnableWebSecurity</code> 注解。有關 Spring Security 的各項設定，都能在這裡透過程式碼來自定義。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> InMemoryUserDetailsManager <span class="hljs-title function_">inMemoryUserDetailManager</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user1&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;111&quot;</span>)                .build();        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user2&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;222&quot;</span>)                .build();        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user3&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;333&quot;</span>)                .build();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(List.of(user1, user2, user3));    &#125;&#125;</code></pre></div><p>上面建立了 <code>InMemoryUserDetailsManager</code> 元件，它會被 Spring Security 讀取。其用途顧名思義就是在記憶體中管理帳號，建構子接收了 <code>UserDetails</code> 型態的物件。</p><p>至於建立帳號的方式，則是呼叫 <code>User</code> 類別提供的靜態方法，傳入帳號與密碼。此處建立了三個使用者：</p><table><thead><tr><th>帳號</th><th>密碼</th></tr></thead><tbody><tr><td>user1</td><td>111</td></tr><tr><td>user2</td><td>222</td></tr><tr><td>user3</td><td>333</td></tr></tbody></table><p>重新啟動程式後，讀者可在瀏覽器分別用這些帳號前往 <code>http://localhost:8080/home</code>。若成功，則代表這些測試帳號是有用的。</p><h3 id="（二）密碼加密"><a href="#（二）密碼加密" class="headerlink" title="（二）密碼加密"></a>（二）密碼加密</h3><p>設定密碼時，在前面加上了 <code>&#123;noop&#125;</code> 的字串。原因是配置 in-memory user 的密碼時，需指定密碼的加密演算法。以下舉例其中幾項：</p><table><thead><tr><th>前綴</th><th>演算法</th><th>密碼原文</th><th>參數寫法</th></tr></thead><tbody><tr><td>{noop}</td><td>不加密</td><td>123</td><td>{noop}123</td></tr><tr><td>{bcrypt}</td><td>BCrypt</td><td>456</td><td>{bcrypt}$2a$12$YowIkLKzGwPjMt6jtCkvDuCA7Vxb&#x2F;81pQaJvGgtbKjMgVYtMs2DKK</td></tr><tr><td>{sha256}</td><td>SHA256</td><td>password</td><td>{sha256}97cde38028ad898ebc02e690819fa220e88c62e0699403e94fff291cfffaf8410849f27605abcbc0</td></tr></tbody></table><p>在實務上，我們會先將密碼的原文加密後，才儲存資料庫。其用意是為了保護客戶的資料，避免資料庫內容外洩，或者員工監守自盜。在範例程式中指定密碼的加密演算法，便是為了模擬出這個情境。</p><p>為了方便示範，筆者將以未加密的密碼來儲存。其中「noop」是「No Operation」的意思。若讀者有興趣，<a href="https://bcrypt-generator.com/">這裡</a>也提供 BCrypt 演算法的轉換與驗證工具。</p><h2 id="四、實作授權功能"><a href="#四、實作授權功能" class="headerlink" title="四、實作授權功能"></a>四、實作授權功能</h2><h3 id="（一）準備測試用-API"><a href="#（一）準備測試用-API" class="headerlink" title="（一）準備測試用 API"></a>（一）準備測試用 API</h3><p>上一節，我們已經做到建立測試帳號，並通過登入畫面的「認證」。不過 Spring Security 還有另一個環節，那就是「授權」。</p><p>授權指的是系統允許使用者存取某項服務。換句話說，一個人即便能夠登入，也不代表能使用所有的功能。正如同本文第一節所舉的例子，學生不能編輯課程資料，老師也不能選課。</p><p>在 Controller 中，請讀者準備其他 API。連同先前的「系統首頁」，現在共有 5 支 API。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@GetMapping(&quot;/register&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">register</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;註冊畫面&quot;</span>;    &#125;        <span class="hljs-meta">@GetMapping(&quot;/home&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">home</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;系統首頁&quot;</span>;    &#125;    <span class="hljs-meta">@GetMapping(&quot;/selected-courses&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">selectedCourses</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;修課清單&quot;</span>;    &#125;    <span class="hljs-meta">@GetMapping(&quot;/course-feedback&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">courseFeedback</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;課程回饋&quot;</span>;    &#125;    <span class="hljs-meta">@GetMapping(&quot;/members&quot;)</span>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">members</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;使用者列表&quot;</span>;    &#125;&#125;</code></pre></div><p>在這個例子中，我們希望「註冊畫面」不需登入即可存取；「系統首頁」需登入才能存取；「修課清單」只有學生能存取；「課程回饋」只有老師能存取；「使用者列表」只有管理員能存取。</p><h3 id="（二）添加權限"><a href="#（二）添加權限" class="headerlink" title="（二）添加權限"></a>（二）添加權限</h3><p>接著回到 Spring Security 的配置類別，為測試帳號設計「權限」（authority）。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> InMemoryUserDetailsManager <span class="hljs-title function_">inMemoryUserDetailManager</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user1</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user1&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;111&quot;</span>)                .authorities(<span class="hljs-string">&quot;STUDENT&quot;</span>)                .build();        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user2&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;222&quot;</span>)                .authorities(<span class="hljs-string">&quot;TEACHER&quot;</span>)                .build();        <span class="hljs-type">UserDetails</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> User                .withUsername(<span class="hljs-string">&quot;user3&quot;</span>)                .password(<span class="hljs-string">&quot;&#123;noop&#125;333&quot;</span>)                .authorities(<span class="hljs-string">&quot;ADMIN&quot;</span>, <span class="hljs-string">&quot;TEACHER&quot;</span>)                .build();        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InMemoryUserDetailsManager</span>(List.of(user1, user2, user3));    &#125;&#125;</code></pre></div><p>呼叫 <code>authorities</code> 方法，可以為 in-memory user 添加一至多個權限。至於權限的名稱，則是由我們自己取名，此處包含「學生」、「老師」與「管理員」。其中「user3」這個帳號同時具有老師與管理員權限。</p><h3 id="（三）授權規則"><a href="#（三）授權規則" class="headerlink" title="（三）授權規則"></a>（三）授權規則</h3><p>設計好帳號的權限後，接下來要對 Controller 的 API 進行保護，定義它們要開放給具有哪些權限的人存取。</p><p>請在 Spring Security 的配置類別，建立 <code>SecurityFilterChain</code> 元件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-meta">@EnableWebSecurity</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-keyword">return</span> httpSecurity                .formLogin(Customizer.withDefaults())                .authorizeHttpRequests(requests -&gt; requests                        .requestMatchers(HttpMethod.GET, <span class="hljs-string">&quot;/register&quot;</span>).permitAll()                        .requestMatchers(HttpMethod.GET, <span class="hljs-string">&quot;/selected-courses&quot;</span>).hasAuthority(<span class="hljs-string">&quot;STUDENT&quot;</span>)                        .requestMatchers(HttpMethod.GET, <span class="hljs-string">&quot;/course-feedback&quot;</span>).hasAnyAuthority(<span class="hljs-string">&quot;TEACHER&quot;</span>, <span class="hljs-string">&quot;ADMIN&quot;</span>)                        .requestMatchers(HttpMethod.GET, <span class="hljs-string">&quot;/members&quot;</span>).hasAuthority(<span class="hljs-string">&quot;ADMIN&quot;</span>)                        .anyRequest().authenticated()                )                .build();    &#125;&#125;</code></pre></div><p>Spring Security 會將 <code>HttpSecurity</code> 物件注入到建立元件的方法中。透過該物件的一系列方法呼叫，我們能站在安全管理的角度，自定義 request 到達後端時的應對方式。</p><p>一開始的 <code>formLogin</code> 方法，是啟用先前的登入畫面，便於我們繼續進行測試。</p><p>接下來的 <code>authorizeHttpRequests</code> 方法，其用途是設定要如何進行授權。定義時，需提供「API」與「授權規則」這兩個部份。</p><p>呼叫 <code>requestMatchers</code> 方法，可傳入 API 路徑與 HTTP 方法；呼叫 <code>anyRequests</code> 方法，代表要對「其餘」的 API 做設定。這是有先後順序之分的，就像 Java 語言的「if → else if → else」，是由上而下逐一判斷。</p><p>提供完 API 後，接著要定義授權規則。以下舉例幾個可用的方法：</p><table><thead><tr><th>方法名稱</th><th>意義</th></tr></thead><tbody><tr><td>permitAll</td><td>不必登入認證就能存取。</td></tr><tr><td>hasAuthority</td><td>需具備某一個權限才能存取。</td></tr><tr><td>hasAnyAuthority</td><td>只要具備任一個權限就能存取。</td></tr><tr><td>authenticated</td><td>需登入認證才能存取。</td></tr></tbody></table><p>除了上表列出的方法，讀者也可參考 <code>access</code> 方法，搭配 Spring 表達式（Spring Expression Language，SpEL）實現複雜的規則。下面的例子，是只有兼具管理員與老師權限的帳號才能存取 API，用到了「AND」邏輯的語法。</p><div class="code-wrapper"><pre><code class="hljs java">.access(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WebExpressionAuthorizationManager</span>(<span class="hljs-string">&quot;hasAuthority(&#x27;ADMIN&#x27;) AND hasAuthority(&#x27;TEACHER&#x27;)&quot;</span>))</code></pre></div><p>撰寫完設定後，讀者可重新啟動程式，在瀏覽器分別使用學生、老師與管理員的帳號存取這 5 支 API，確認是否符合規則。</p><p>最後補充，定義 API 授權規則時，路徑的部份除了精確地逐一寫出來，也能透過萬用字元來「模糊匹配」。下表是用法與範例：</p><table><thead><tr><th>萬用字元</th><th>意義</th><th>範例寫法</th><th>適用</th><th>不適用</th></tr></thead><tbody><tr><td>*</td><td>0 到多個字元</td><td>&#x2F;courses&#x2F;*</td><td>&#x2F;courses、&#x2F;courses&#x2F;123</td><td>&#x2F;courses&#x2F;123&#x2F;draft</td></tr><tr><td>**</td><td>0 到多個階層</td><td>&#x2F;courses&#x2F;**</td><td>任何「&#x2F;courses」開頭的路徑</td><td>-</td></tr><tr><td>?</td><td>1 個字元</td><td>&#x2F;courses&#x2F;?</td><td>&#x2F;courses&#x2F;1</td><td>&#x2F;courses&#x2F;123、&#x2F;courses</td></tr><tr><td>?* 或 *?</td><td>1 到多個字元</td><td>&#x2F;courses&#x2F;?*</td><td>&#x2F;courses&#x2F;1、&#x2F;courses&#x2F;123</td><td>&#x2F;courses</td></tr></tbody></table><p>到目前為止，測試帳號都是使用 in-memory user。下一篇將特別實作自定義的認證方式，抽換成使用資料庫來儲存帳號、密碼與權限。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch12.1-security-authentication-and-authorization">點我</a>。</p><p>下一課：<a href="/articles/spring-boot-security-authentication-integrating-with-mongodb-database/" target="_blank">【Spring Boot】第12.2課－在 Spring Security 整合資料庫進行認證</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
      <category>Spring Security</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第3.3課－在 Controller 驗證 request body 與 query string 的資料</title>
    <link href="/articles/spring-boot-validate-request-body-and-query-string/"/>
    <url>/articles/spring-boot-validate-request-body-and-query-string/</url>
    
    <content type="html"><![CDATA[<p>在網頁上填寫資料時，前端會對資料進行檢查，避免送出不合理的值。但若直接對 API 發出請求（如透過 Postman），不就可以繞過檢查了嗎？甚至還可能將非預期的值存進資料庫。</p><p>本文會介紹許多內建的注解，用來在 Controller 對接收到的 request body 與 query string 進行資料驗證。此外也會示範定義自己的驗證規則。</p><hr><h2 id="一、什麼是資料驗證"><a href="#一、什麼是資料驗證" class="headerlink" title="一、什麼是資料驗證"></a>一、什麼是資料驗證</h2><p>對開發過前端或行動 App 的人來說，使用者填寫完資料送出時，先對資料進行檢查是很正常的事。例如電子郵件地址不允許空白，或者價格不允許負數。</p><p>但有心人士只要知道 API 路徑和接受的資料格式，就能透過其他工具或途徑來發出請求（如 Postman）。</p><p>那麼 API 是如何得知的呢？舉例來說，讀者在 Chrome 瀏覽器按下 F12，可開啟開發者工具查看。下面是以在網路論壇「Dcard」發表文章為例子。<br><img src="https://chikuwacode.github.io/articles/spring-boot-validate-request-body-and-query-string/chrome-devtools-headers-general.png"><br><img src="https://chikuwacode.github.io/articles/spring-boot-validate-request-body-and-query-string/chrome-devtools-payload.png"></p><p>點擊最上方的「Network」頁籤，便能查看該分頁發出的請求。圖中的「Request URL」代表 API 路徑。再往下則是 request 與 response header。點擊「Payload」頁籤，則可看見 request body。</p><p>除了有心人士，一般開發者在串接 API 時，也可能不小心在 request 攜帶不合理的資料。如果後端沒有機制來阻擋，就可能影響業務邏輯的程式執行，或是儲存非預期的資料。</p><p>然而透過撰寫程式碼的方式來驗證每個資料，其實也不方便。因此，本文將使用注解（annotation）的方式來處理驗證的工作。</p><h2 id="二、範例專案準備"><a href="#二、範例專案準備" class="headerlink" title="二、範例專案準備"></a>二、範例專案準備</h2><h3 id="（一）Controller-介紹"><a href="#（一）Controller-介紹" class="headerlink" title="（一）Controller 介紹"></a>（一）Controller 介紹</h3><p>以下的 Product 與 Price 類別，會做為 request body。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Price price;    <span class="hljs-keyword">private</span> List&lt;String&gt; categories;<span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Price</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> amount;    <span class="hljs-keyword">private</span> String currencyType;<span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的 BaseParameter 類別，會用來接收 query string。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseParameter</span> &#123;    <span class="hljs-keyword">private</span> String sortField;    <span class="hljs-keyword">private</span> String sortDirection;    <span class="hljs-keyword">private</span> Integer page;    <span class="hljs-keyword">private</span> Integer size;<span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是 Controller。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(value = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;        <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product request)</span> &#123;        <span class="hljs-keyword">return</span> ResponseEntity.ok().build();    &#125;<span class="hljs-meta">@GetMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute</span> BaseParameter param)</span> &#123;        <span class="hljs-keyword">return</span> ResponseEntity.ok().build();    &#125;&#125;</code></pre></div><h3 id="（二）宣告驗證"><a href="#（二）宣告驗證" class="headerlink" title="（二）宣告驗證"></a>（二）宣告驗證</h3><p>我們會在這些接收 request body 與 query string 的類別中，於欄位上使用注解，來定義驗證規則。</p><p>請在 pom.xml 檔案添加依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-validation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>接著將 <code>@Valid</code> 注解冠在 API 處理方法的參數前面，代表要對這個資料進行驗證。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> jakarta.validation.Valid;<span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(value = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;        <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@RequestBody</span> Product request)</span> &#123;        <span class="hljs-keyword">return</span> ResponseEntity.ok().build();    &#125;<span class="hljs-meta">@GetMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(<span class="hljs-meta">@Valid</span> <span class="hljs-meta">@ModelAttribute</span> BaseParameter param)</span> &#123;        <span class="hljs-keyword">return</span> ResponseEntity.ok().build();    &#125;&#125;</code></pre></div><p>讀者可能還會找到另一個注解叫 <code>@Validated</code>，它是 Spring Boot 自帶的。雖然兩者都能用，但差別在於 <code>@Validated</code> 無法冠在欄位上。</p><p>這邊提醒一點，<code>@Valid</code> 注解只會針對類別中的第一層欄位進行驗證。因此在上述的 Product 類別中，price 欄位的內部資料並不會被驗證。這部份我們留到第七節再來處理。下一節先讓我們一一認識各種驗證注解。</p><h2 id="三，驗證空與非空"><a href="#三，驗證空與非空" class="headerlink" title="三，驗證空與非空"></a>三，驗證空與非空</h2><p>使用 <code>@NotNull</code>，可規定該欄位為「必填」，也就是不能為 null 值。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-meta">@NotNull</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-meta">@NotNull</span>    <span class="hljs-keyword">private</span> Price price;    <span class="hljs-meta">@NotNull</span>    <span class="hljs-keyword">private</span> List&lt;String&gt; categories;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>讀者可使用 Postman 發出 request，會發現得到 HTTP 400（Bad Request）的狀態碼。<br><img src="https://chikuwacode.github.io/articles/spring-boot-validate-request-body-and-query-string/postman-bad-request.png"></p><p>使用 <code>@NotEmpty</code>，可規定 String、Collection、Map 與陣列不能是空的，至少要有 1 個字或元素。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-meta">@NotEmpty</span>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-meta">@NotEmpty</span>    <span class="hljs-keyword">private</span> List&lt;String&gt; categories;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>使用 <code>@NotBlank</code>，可規定 String 除了要有字，而且不能全部都是半形空白。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-meta">@NotBlank</span>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseParameter</span> &#123;    <span class="hljs-meta">@NotBlank</span>    <span class="hljs-keyword">private</span> String sortField;    <span class="hljs-meta">@NotBlank</span>    <span class="hljs-keyword">private</span> String sortDirection;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>使用 <code>@Null</code>，可規定該欄位值必須是 null。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-meta">@Null</span>    <span class="hljs-keyword">private</span> String id;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>會用到 <code>@Null</code> 的時機，可能是後端想要自行給該欄位賦值。但筆者認為，該類別或許已經身兼多個用途了，比方說 request body 與資料庫的資料類別共用。</p><p>若後端能夠設計成將 request body（不含 id 欄位）轉換成另一個類別（含 id 欄位），那就不需要此注解了。</p><h2 id="四、驗證數值"><a href="#四、驗證數值" class="headerlink" title="四、驗證數值"></a>四、驗證數值</h2><p>接下來讓我們繼續認識其他驗證注解。要注意的是，它們都允許欄位值是 null。因此讀者可視需要，搭配 <code>@NotNull</code> 注解，確保欄位為必填。</p><h3 id="（一）最大與最小值"><a href="#（一）最大與最小值" class="headerlink" title="（一）最大與最小值"></a>（一）最大與最小值</h3><p>使用 <code>@Max</code> 與 <code>@Min</code>，分別可規定數值欄位的最大與最小值。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Price</span> &#123;        <span class="hljs-meta">@Min(0)</span>    <span class="hljs-meta">@Max(100000)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> amount;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseParameter</span> &#123;    <span class="hljs-meta">@NotNull</span>    <span class="hljs-meta">@Min(0)</span>    <span class="hljs-keyword">private</span> Integer page;    <span class="hljs-meta">@NotNull</span>    <span class="hljs-meta">@Min(1)</span>    <span class="hljs-keyword">private</span> Integer size;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><h3 id="（二）驗證位數"><a href="#（二）驗證位數" class="headerlink" title="（二）驗證位數"></a>（二）驗證位數</h3><p>使用 <code>@Digits</code>，可規定數值欄位的整數和小數位數。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Price</span> &#123;        <span class="hljs-meta">@Digits(integer = 6, fraction = 2)</span><span class="hljs-meta">@Min(0)</span>    <span class="hljs-meta">@Max(100000)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> amount;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>上面限制了欄位值的整數最多能有 6 位，而小數最多 2 位。</p><h2 id="五、驗證長度"><a href="#五、驗證長度" class="headerlink" title="五、驗證長度"></a>五、驗證長度</h2><p>使用 <code>@Size</code> 注解，可規定 String、Collection、Map 與陣列的長度或元素數量。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-meta">@Size(min = 1, max = 3)</span>    <span class="hljs-meta">@NotNull</span>    <span class="hljs-keyword">private</span> List&lt;String&gt; categories;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>上面限制了欄位值必須要有 1 ~ 3 個元素。</p><p>而下面限制了欄位值固定是 3 個字。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Price</span> &#123;    <span class="hljs-meta">@Size(min = 3, max = 3)</span>    <span class="hljs-meta">@NotNull</span>    <span class="hljs-keyword">private</span> String currencyType;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><h2 id="六、正則表達式"><a href="#六、正則表達式" class="headerlink" title="六、正則表達式"></a>六、正則表達式</h2><p>使用 <code>@Pattern</code> 注解，可使用正則表達式來驗證字串。</p><p>以下的例子，是限制欄位值需為 3 個大寫英文字母。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Price</span> &#123;    <span class="hljs-meta">@Pattern(regexp = &quot;[A-Z]&#123;3&#125;$&quot;)</span>    <span class="hljs-meta">@NotNull</span>    <span class="hljs-keyword">private</span> String currencyType;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>以下的例子，是限制欄位值只能包含大小寫英文字母、數字與半形空白。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-meta">@Pattern(regexp = &quot;^[A-Za-z0-9 ]*$&quot;)</span>    <span class="hljs-meta">@NotBlank</span>    <span class="hljs-keyword">private</span> String name;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><h2 id="七、嵌套驗證"><a href="#七、嵌套驗證" class="headerlink" title="七、嵌套驗證"></a>七、嵌套驗證</h2><h3 id="（一）驗證內部物件"><a href="#（一）驗證內部物件" class="headerlink" title="（一）驗證內部物件"></a>（一）驗證內部物件</h3><p>在第二節的第二段有提到，<code>@Valid</code> 注解只會驗證該類別的第一層欄位。所以剛剛在 Price 類別使用的驗證注解，是不會生效的。</p><p>此時讀者只要在想驗證的物件欄位上，也冠上 <code>@Valid</code> 注解即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-meta">@Valid</span>    <span class="hljs-meta">@NotNull</span>    <span class="hljs-keyword">private</span> Price price;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><h3 id="（二）驗證元素"><a href="#（二）驗證元素" class="headerlink" title="（二）驗證元素"></a>（二）驗證元素</h3><p>如果欄位的型態是 <code>List&lt;String&gt;</code>，當我們想驗證 List 中的 String 元素，該怎麼做呢？其實也很簡單，針對 List 的泛型類別冠上驗證注解就好。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-meta">@Size(min = 1, max = 3)</span>    <span class="hljs-meta">@NotNull</span>    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-meta">@NotBlank</span> String&gt; categories;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>再假設我們有如下的類別，其 List 欄位的元素，是我們自定義的物件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchProduct</span> &#123;    <span class="hljs-keyword">private</span> List&lt;<span class="hljs-meta">@Valid</span> Product&gt; products;<span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>只要在泛型類別冠上 <code>@Valid</code> 注解，就能驗證 List 裡面的物件元素了。</p><h2 id="八、自定義驗證邏輯"><a href="#八、自定義驗證邏輯" class="headerlink" title="八、自定義驗證邏輯"></a>八、自定義驗證邏輯</h2><p>接下來筆者會介紹更進階的用法。</p><h3 id="（一）建立驗證注解"><a href="#（一）建立驗證注解" class="headerlink" title="（一）建立驗證注解"></a>（一）建立驗證注解</h3><p>讓我們以第六節的 currencyType 欄位做延伸。生活中有許多縮寫都是由大寫英文字母組成，例如幣別（如 USD、JPY）、國碼（如 US、JP、KR），或是公司的部門代號。</p><p>本節將介紹如何建立自己的驗證注解。一來能夠實作複雜的驗證邏輯，二來也能將多個現有的驗證規則，整合成一個可讀性更好的注解。</p><p>以下建立一個叫 @UppercaseAlphabet 的注解，用途是讓被驗證的字串只能包含大寫字母，且可限制字串長度。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Constraint(validatedBy = UppercaseAlphabetValidator.class)</span><span class="hljs-meta">@Target(&#123;ElementType.FIELD&#125;)</span><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> UppercaseAlphabet &#123;    <span class="hljs-type">int</span> <span class="hljs-title function_">minLength</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;    <span class="hljs-type">int</span> <span class="hljs-title function_">maxLength</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> Integer.MAX_VALUE;    String <span class="hljs-title function_">message</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;Should be uppercase alphabet.&quot;</span>;    Class&lt;?&gt;[] groups() <span class="hljs-keyword">default</span> &#123;&#125;;    Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Payload</span>&gt;[] payload() <span class="hljs-keyword">default</span> &#123;&#125;;&#125;</code></pre></div><p>這邊有幾個重要的地方要知道。</p><ul><li><code>@Constraint</code> 注解：可設定驗證邏輯所在的類別，在本節第二段會介紹。</li><li>minLength、maxLength 參數：這是自定義的參數，冠上注解時可傳入。</li><li><code>message</code> 參數：這是驗證注解必須定義的參數之一，用途是提供驗證未通過的訊息，在第九節會介紹。</li></ul><h3 id="（二）實作驗證過程"><a href="#（二）實作驗證過程" class="headerlink" title="（二）實作驗證過程"></a>（二）實作驗證過程</h3><p>在 @UppercaseAlphabet 注解，有冠上了 <code>@Constraint</code> 注解。透過它的 <code>validatedBy</code> 參數，可提供實作 <code>ConstraintValidator</code> 介面的類別。進行資料驗證時，該介面所實作的方法會自動被呼叫。</p><p>以下是自定義的驗證邏輯類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UppercaseAlphabetValidator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ConstraintValidator</span>&lt;UppercaseAlphabet, String&gt; &#123;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> minLength;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxLength;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initialize</span><span class="hljs-params">(UppercaseAlphabet annotation)</span> &#123;        <span class="hljs-built_in">this</span>.minLength = annotation.minLength();        <span class="hljs-built_in">this</span>.maxLength = annotation.maxLength();        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.minLength &lt; <span class="hljs-number">0</span> || <span class="hljs-built_in">this</span>.minLength &gt; <span class="hljs-built_in">this</span>.maxLength) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>();        &#125;    &#125;    <span class="hljs-meta">@Override</span>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String value, ConstraintValidatorContext context)</span> &#123;        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;            value = <span class="hljs-string">&quot;&quot;</span>;        &#125;        <span class="hljs-keyword">if</span> (value.length() &lt; <span class="hljs-built_in">this</span>.minLength || value.length() &gt; <span class="hljs-built_in">this</span>.maxLength) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        <span class="hljs-keyword">return</span> value.matches(<span class="hljs-string">&quot;^[A-Z]*$&quot;</span>);    &#125;&#125;</code></pre></div><p>在實作 <code>ConstraintValidator</code> 介面時，需傳入兩個泛型類別，第一個是自定義的注解，第二個是要驗證的資料型態。</p><p>該介面有兩個方法要實作。</p><ul><li><code>initialize</code>：可進行初始化，在此取出注解中的參數備用，並檢查參數是否合理。</li><li><code>isValid</code>：要驗證的資料會被傳入 <code>value</code> 參數，我們在此檢查字串的長度，並透過正則表達式確認是否只包含大寫英文字母。</li></ul><p>實作完成後，將自定義的注解冠在 request body 的欄位上就行了。下面的例子是限制欄位值為 3 個大寫英文字母。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Price</span> &#123;        <span class="hljs-meta">@UppercaseAlphabet(minLength = 3, maxLength = 3)</span>    <span class="hljs-keyword">private</span> String currencyType;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>讀者也能自行作其他練習，例如將 <code>@Min</code> 與 <code>@Max</code> 注解合併成一個，允許數值在範圍內。</p><h2 id="九、驗證未過的訊息"><a href="#九、驗證未過的訊息" class="headerlink" title="九、驗證未過的訊息"></a>九、驗證未過的訊息</h2><p>當 <code>@Valid</code> 注解驗證失敗時，後端會回傳 HTTP 400 的狀態碼，但我們從 response 一時也看不出未通過的原因。其實從 Console 視窗可找到錯誤訊息。<br><img src="https://chikuwacode.github.io/articles/spring-boot-validate-request-body-and-query-string/spring-boot-validation-failed-log.png"></p><p>上圖是「name」和「price.amount」欄位值驗證失敗的 log。這樣的形式除了不易閱讀，而且前端的同事若遇到問題，一直向後端確認原因也很不方便。</p><p>本節的目的是將錯誤訊息整理好，並放在如下的 response body 回傳。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ValidationFailInfo</span> &#123;    <span class="hljs-keyword">private</span> String field;    <span class="hljs-keyword">private</span> Object value;    <span class="hljs-keyword">private</span> String message;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>從 log 可看出 request body 驗證失敗時，會發生 <code>MethodArgumentNotValidException</code> 例外。若 query string 驗證失敗，則會發生 <code>BindException</code>。</p><p>若想捕捉 Controller 所拋出的特定例外，可宣告冠有 <code>@ExceptionHandler</code> 注解的方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.validation.BindException;<span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(value = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<span class="hljs-comment">// ...</span>    <span class="hljs-meta">@ExceptionHandler(BindException.class)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;ValidationFailInfo&gt;&gt; <span class="hljs-title function_">handleValidationFail</span><span class="hljs-params">(BindException ex)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">infoList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ValidationFailInfo&gt;();        ex.getBindingResult().getFieldErrors().forEach(error -&gt; &#123;            <span class="hljs-type">var</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValidationFailInfo</span>();            info.setField(error.getField());            info.setValue(error.getRejectedValue());            info.setMessage(error.getDefaultMessage());            infoList.add(info);        &#125;);        <span class="hljs-keyword">return</span> ResponseEntity.badRequest().body(infoList);    &#125;&#125;</code></pre></div><p>關於 <code>@ExceptionHandler</code> 注解，在筆者以前的<a href="https://chikuwa-tech-study.blogspot.com/2023/02/spring-boot-controller-advice-handle-exception-and-query-string.html">文章</a>有專門介紹，本文就不贅述。巧合的是，<code>MethodArgumentNotValidException</code> 是 <code>BindException</code> 的子類別，所以這邊統一捕捉 <code>BindException</code> 即可。</p><p>這個方法的實作邏輯，簡單來說就是從捕捉到的例外取出資料做處理，再像 API 一樣回傳 response 給前端。完成後，用 Postman 確認結果如下：<br><img src="https://chikuwacode.github.io/articles/spring-boot-validate-request-body-and-query-string/postman-bad-request-with-validation-info-body.png"></p><p>若讀者想定義自己的錯誤訊息，在每個驗證注解都有提供叫 <code>message</code> 的參數可以傳入。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Price</span> &#123;    <span class="hljs-meta">@Digits(integer = 6, fraction = 2, message = &quot;最多整數6位，小數2位&quot;)</span>    <span class="hljs-meta">@Min(0)</span>    <span class="hljs-meta">@Max(10000)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> amount;    <span class="hljs-meta">@UppercaseAlphabet(minLength = 3, maxLength = 3, message = &quot;需為3個大寫字母&quot;)</span>    <span class="hljs-keyword">private</span> String currencyType;<span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>當我們為 request body 的許多欄位加上驗證規則，並且像這樣子回傳允許的值，某種程度上也是在暴露自己的 API 規格。</p><p>如果有安全上的疑慮，筆者認為可以在不同環境（如開發、測試、正式）的 application.properties 配置檔提供設定值，再透過 if 判斷來控制是否回傳錯誤訊息。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch03.3-validate-request-body-and-query-string">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-use-query-string-and-header-in-controller/" target="_blank">【Spring Boot】第3.2課－在 Controller 接收 query string 與操作 header</a></p><p>下一課：<a href="/articles/spring-boot-three-tier-architecture/" target="_blank">【Spring Boot】第4課－實作三層式架構的 Service 與 Repository</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第7課－手動進行元件的初始化</title>
    <link href="/articles/spring-boot-construct-bean-programmatically/"/>
    <url>/articles/spring-boot-construct-bean-programmatically/</url>
    
    <content type="html"><![CDATA[<p>在 Spring Boot 的 IOC 容器中，存放著各種元件。元件除了依賴其他元件，它們也可以擁有自己的資料成員。比方說建立 List、Map 或其它物件的全域變數，來儲存自己的資料，或者說狀態。</p><p>但這些用來儲存元件狀態的全域變數，可能需要先完成初始化，才能開始使用。本文將介紹 <code>@Bean</code> 注解，讓我們透過程式碼手動控制元件的初始化。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch07-start-construct-bean-programmatically">點我</a>。</p><h2 id="一、範例程式介紹"><a href="#一、範例程式介紹" class="headerlink" title="一、範例程式介紹"></a>一、範例程式介紹</h2><p>在本文的練習用專案，能找到筆者事先準備好的範例程式。</p><p>簡單來說，就是讓 controller 去呼叫 repository，存取使用者資料。而 repository 層又提供 2 種實作方式，分別透過 Map 與 List 資料結構來儲存資料。</p><p>以下是使用者的類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> User <span class="hljs-title function_">of</span><span class="hljs-params">(String id, String name)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();        u.id = id;        u.name = name;        <span class="hljs-keyword">return</span> u;    &#125;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是 repository 層的介面，提供新增、取得與刪除的方法。此介面會有 2 個類別分別去實作。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IUserRepository</span> &#123;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span>;    User <span class="hljs-title function_">findById</span><span class="hljs-params">(String id)</span>;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(String id)</span>;&#125;</code></pre></div><p>以下是透過 Map 結構來儲存資料的 repository。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, User&gt; userMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span> &#123;        <span class="hljs-keyword">if</span> (userMap.containsKey(user.getId())) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;User id &quot;</span> + user.getId() + <span class="hljs-string">&quot; is existing.&quot;</span>);        &#125;        userMap.put(user.getId(), user);    &#125;    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> userMap.get(id);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(String id)</span> &#123;        userMap.remove(id);    &#125;&#125;</code></pre></div><p>以下是透過 List 結構來儲存資料的 repository。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;User&gt; userList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(User user)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">isExisting</span> <span class="hljs-operator">=</span> userList                .stream()                .anyMatch(u -&gt; u.getId().equals(user.getId()));        <span class="hljs-keyword">if</span> (isExisting) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;User id &quot;</span> + user.getId() + <span class="hljs-string">&quot; is existing.&quot;</span>);        &#125;        userList.add(user);    &#125;    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> userList                .stream()                .filter(u -&gt; u.getId().equals(id))                .findFirst()                .orElse(<span class="hljs-literal">null</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(String id)</span> &#123;        userList.removeIf(u -&gt; u.getId().equals(id));    &#125;&#125;</code></pre></div><p>以下是 controller，它會依賴 IUserRepository，並透過介面提供的方法來操作。此處採用的實作類別為 MapUserRepository。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(path = &quot;/users&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-meta">@Qualifier(&quot;mapUserRepository&quot;)</span>    <span class="hljs-keyword">private</span> IUserRepository userRepository;    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user)</span> &#123;        <span class="hljs-keyword">try</span> &#123;            userRepository.insert(user);            <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();        &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.unprocessableEntity().build();        &#125;    &#125;    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;User&gt; <span class="hljs-title function_">getUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.findById(id);        <span class="hljs-keyword">return</span> user == <span class="hljs-literal">null</span>                ? ResponseEntity.notFound().build()                : ResponseEntity.ok(user);    &#125;    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteUser</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;        userRepository.deleteById(id);;        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><h2 id="二、簡易的初始化做法"><a href="#二、簡易的初始化做法" class="headerlink" title="二、簡易的初始化做法"></a>二、簡易的初始化做法</h2><p>在第一節的範例程式中，不論是 MapUserRepository 或 ListUserRepository，它們都透過全域變數來儲存資料。假設我們希望程式啟動時，裡面已經有預先準備好一些初始資料了，那可以怎麼做呢？</p><p>若讀者有看過筆者 Spring Boot 系列的前幾篇文章，就知道可以在類別中寫一個 <code>static</code> 區塊，如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, User&gt; userMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">static</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> List.of(                User.of(<span class="hljs-string">&quot;U1&quot;</span>, <span class="hljs-string">&quot;Vincent&quot;</span>),                User.of(<span class="hljs-string">&quot;U2&quot;</span>, <span class="hljs-string">&quot;Ivy&quot;</span>),                User.of(<span class="hljs-string">&quot;U3&quot;</span>, <span class="hljs-string">&quot;Dora&quot;</span>)        );        users.forEach(u -&gt; userMap.put(u.getId(), u));    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>或者我們也可宣告一個方法，並冠上 <code>@PostConstruct</code> 注解，如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, User&gt; userMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-meta">@PostConstruct</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> List.of(                User.of(<span class="hljs-string">&quot;U1&quot;</span>, <span class="hljs-string">&quot;Vincent&quot;</span>),                User.of(<span class="hljs-string">&quot;U2&quot;</span>, <span class="hljs-string">&quot;Ivy&quot;</span>),                User.of(<span class="hljs-string">&quot;U3&quot;</span>, <span class="hljs-string">&quot;Dora&quot;</span>)        );        users.forEach(u -&gt; userMap.put(u.getId(), u));    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>這兩種做法的差別，在於執行的時間點。<code>static</code> 區塊會在程式一啟動時就執行，並且只能使用類別中的 static 資料成員及方法。</p><p>而 <code>@PostConstruct</code> 方法，則是在物件建立完成後才會執行。它可以使用 static 與 non-static 的資料成員及方法。由於物件（或者說元件）已經建立完成了，所以當然也能使用注入進來的其他元件。</p><h2 id="三、使用-Bean-注解建立元件"><a href="#三、使用-Bean-注解建立元件" class="headerlink" title="三、使用 @Bean 注解建立元件"></a>三、使用 @Bean 注解建立元件</h2><h3 id="（一）認識-Bean-注解"><a href="#（一）認識-Bean-注解" class="headerlink" title="（一）認識 @Bean 注解"></a>（一）認識 @Bean 注解</h3><p>不論是 <code>static</code> 區塊，還是 <code>@PostConstruct</code> 所注解的方法，都能幫助我們完成全域變數的初始化。但這些做法，其實也會增加元件類別的程式碼。</p><p>本節將示範如何將元件的初始化過程，從自身的類別中分離出去。具體的做法是將元件所需要的資料或物件，先在外部初始化完成，再透過建構子傳入元件中。</p><p>Spring Boot 提供了 <code>@Bean</code> 注解，它會冠在元件類別中的方法上。其用途是將該方法的回傳值建立為元件，用法示意如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepositoryConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> IUserRepository <span class="hljs-title function_">mapUserRepository</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapUserRepository</span>();    &#125;&#125;</code></pre></div><p>以上建立了 Configuration 類別。接著宣告一個方法，回傳值型態為 IUserRepository 介面，而實際回傳的是 MapUserRepository 物件。</p><p>如此一來，Spring Boot 便會將 MapUserRepository 建立為元件。</p><h3 id="（二）實作初始化過程"><a href="#（二）實作初始化過程" class="headerlink" title="（二）實作初始化過程"></a>（二）實作初始化過程</h3><p>既然 <code>@Bean</code> 所注解的方法的回傳值會被建立為元件，那在回傳之前，不就可以客製我們想要的初始化過程了嗎？</p><p>根據前面筆者提到的做法，接下來就要在該方法中準備好測試資料，再傳入 MapUserRepository 或 ListUserRepository 的建構子中。</p><p>首先，請讀者調整這 2 個實作類別，讓它們的建構子能接收使用者資料。同時也要移除 <code>@Repository</code> 注解，因為我們即將改為透過 <code>@Bean</code> 注解來建立元件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, User&gt; userMap;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MapUserRepository</span><span class="hljs-params">(Map&lt;String, User&gt; userMap)</span> &#123;        <span class="hljs-built_in">this</span>.userMap = userMap;    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListUserRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IUserRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;User&gt; userList;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ListUserRepository</span><span class="hljs-params">(List&lt;User&gt; userList)</span> &#123;        <span class="hljs-built_in">this</span>.userList = userList;    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>接著回到 Configuration 類別，分別宣告方法，對 MapUserRepository 與 ListUserRepository 進行初始化。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepositoryConfig</span> &#123;    <span class="hljs-meta">@Bean(name = &quot;mapUserRepo&quot;)</span>    <span class="hljs-keyword">public</span> IUserRepository <span class="hljs-title function_">mapUserRepository</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> List.of(                User.of(<span class="hljs-string">&quot;U1&quot;</span>, <span class="hljs-string">&quot;Vincent&quot;</span>),                User.of(<span class="hljs-string">&quot;U2&quot;</span>, <span class="hljs-string">&quot;Ivy&quot;</span>),                User.of(<span class="hljs-string">&quot;U3&quot;</span>, <span class="hljs-string">&quot;Dora&quot;</span>)        );        <span class="hljs-type">var</span> <span class="hljs-variable">userMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, User&gt;();        users.forEach(u -&gt; userMap.put(u.getId(), u));        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapUserRepository</span>(userMap);    &#125;    <span class="hljs-meta">@Bean(name = &quot;listUserRepo&quot;)</span>    <span class="hljs-keyword">public</span> IUserRepository <span class="hljs-title function_">listUserRepository</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;User&gt;();        users.add(User.of(<span class="hljs-string">&quot;U1&quot;</span>, <span class="hljs-string">&quot;Vincent&quot;</span>));        users.add(User.of(<span class="hljs-string">&quot;U2&quot;</span>, <span class="hljs-string">&quot;Ivy&quot;</span>));        users.add(User.of(<span class="hljs-string">&quot;U3&quot;</span>, <span class="hljs-string">&quot;Dora&quot;</span>));        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListUserRepository</span>(users);    &#125;&#125;</code></pre></div><p>這樣就能把元件初始化的過程，從自身類別中分離出去。</p><p>附帶一提，我們可在 <code>@Bean</code> 注解中定義元件的名稱（預設為方法名稱），供其他元件指定要注入哪一個實作。因此，controller 仍可透過 <code>@Qualifier</code> 注解進行指定。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-meta">@Qualifier(&quot;mapUserRepo&quot;)</span>    <span class="hljs-keyword">private</span> IUserRepository userRepository;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><h2 id="四、綜合應用"><a href="#四、綜合應用" class="headerlink" title="四、綜合應用"></a>四、綜合應用</h2><h3 id="（一）搭配其他注解"><a href="#（一）搭配其他注解" class="headerlink" title="（一）搭配其他注解"></a>（一）搭配其他注解</h3><p><code>@Bean</code> 所注解的元件建立方法，也可搭配其他注解一起使用。</p><p>比方說，當有回傳值型態相同的多個方法，可透過 <code>@Primary</code> 注解，來指定預設採用的元件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepositoryConfig</span> &#123;    <span class="hljs-meta">@Primary</span>    <span class="hljs-meta">@Bean(name = &quot;mapUserRepo&quot;)</span>    <span class="hljs-keyword">public</span> IUserRepository <span class="hljs-title function_">mapUserRepository</span><span class="hljs-params">()</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;    <span class="hljs-meta">@Bean(name = &quot;listUserRepo&quot;)</span>    <span class="hljs-keyword">public</span> IUserRepository <span class="hljs-title function_">listUserRepository</span><span class="hljs-params">()</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>另外，我們也可將元件所依賴的其他元件類別或介面，寫在方法參數中。示意如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">userService</span><span class="hljs-params">(IUserRepository userRepository)</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>(userRepository);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-keyword">private</span> IUserRepository userRepository;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserService</span><span class="hljs-params">(IUserRepository userRepository)</span> &#123;        <span class="hljs-built_in">this</span>.userRepository = userRepository;    &#125;&#125;</code></pre></div><p>當然，也能使用 <code>@Qualifier</code> 注解，指定要取用的實作類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceConfig</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> UserService <span class="hljs-title function_">userService</span><span class="hljs-params">(</span><span class="hljs-params">        <span class="hljs-meta">@Qualifier(&quot;mapUserRepo&quot;)</span> IUserRepository userRepository</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>(userRepository);    &#125;&#125;</code></pre></div><h3 id="（二）結合配置檔"><a href="#（二）結合配置檔" class="headerlink" title="（二）結合配置檔"></a>（二）結合配置檔</h3><p>在程式中，controller 只會取用其中一個實作類別。而另一個用不到的元件，其實不必建立出來。</p><p>因此，我們可將這兩個 <code>@Bean</code> 注解的方法合併，再透過 if 判斷決定要建立哪一個。</p><p>接下來的範例，筆者會結合<a href="/articles/spring-boot-application-properties-configuration/" target="_blank">第 6 課</a>介紹的 application.properties 配置檔，提供元件初始化的一些選項。請先添加以下 2 個設定值：</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">user-repository.storage</span>=<span class="hljs-string">map</span><span class="hljs-attr">user-repository.test-data.amount</span>=<span class="hljs-string">3</span></code></pre></div><p>第一個設定值代表要使用何種資料結構來儲存，可選擇「map」或「list」。第二個設定值代表要產生幾筆測試資料。</p><p>回到 Configuration 類別，在方法參數中使用 <code>@Value</code> 注解，即可將配置檔的設定值讀取進來使用。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepositoryConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> IUserRepository <span class="hljs-title function_">userRepository</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@Value(&quot;$&#123;user-repository.storage&#125;&quot;)</span> String storage,</span><span class="hljs-params">            <span class="hljs-meta">@Value(&quot;$&#123;user-repository.test-data.amount:0&#125;&quot;)</span> <span class="hljs-type">int</span> amount</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-comment">// 建立測試資料</span>        <span class="hljs-type">var</span> <span class="hljs-variable">users</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;User&gt;();        <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= amount; i++) &#123;            <span class="hljs-type">var</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.of(<span class="hljs-string">&quot;U&quot;</span> + i, <span class="hljs-string">&quot;Test User &quot;</span> + i);            users.add(user);        &#125;        <span class="hljs-comment">// 選擇資料結構</span>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;map&quot;</span>.equalsIgnoreCase(storage)) &#123;            <span class="hljs-type">var</span> <span class="hljs-variable">userMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, User&gt;();            users.forEach(u -&gt; userMap.put(u.getId(), u));            System.out.println(<span class="hljs-string">&quot;Create MapProductRepository.&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapUserRepository</span>(userMap);        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;list&quot;</span>.equalsIgnoreCase(storage)) &#123;            System.out.println(<span class="hljs-string">&quot;Create ListProductRepository.&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListUserRepository</span>(users);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Please provide correct user repository storage type.&quot;</span>);        &#125;    &#125;&#125;</code></pre></div><p>在程式邏輯中，首先產生指定數量的測試資料（預設為 0 筆）。接著根據設定值是指定 Map 或 List 資料結構，再建立出對應的 repository 物件。</p><p>同時也將測試資料傳入 repository 的建構子中，隨即回傳，完成元件的初始化。</p><p>最後讀者別忘了確認注入 IUserRepository 的 Controller，已經不必再透過 <code>@Qualifier</code> 注解，來指定要注入的元件了。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch07-fin-construct-bean-programmatically">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-application-properties-configuration/" target="_blank">【Spring Boot】第6課－在 application.properties 配置檔提供設定值（以 Java Mail 為例）</a></p><p>下一課：<a href="/articles/spring-boot-mongodb-introduction-and-setup/" target="_blank">【Spring Boot】第8.1課－MongoDB 介紹與準備資料庫環境</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第6課－在 application.properties 配置檔提供設定值（以 Java Mail 為例）</title>
    <link href="/articles/spring-boot-application-properties-configuration/"/>
    <url>/articles/spring-boot-application-properties-configuration/</url>
    
    <content type="html"><![CDATA[<p>在串接資料庫或其他第三方服務時，通常都需要那些平台的伺服器位址、帳密，或其他設定值，我們合稱為「連線字串」（connection string）。</p><p>若我們希望在不同環境啟動程式時（如測試環境、正式環境），能彈性切換不同的連線字串，那麼可以將這些值寫在一個叫「配置檔」的地方，再由程式去取用。</p><p>本文會以使用透過 Java Mail 寄送郵件為例，示範如何配置設定值，並利用 Profile 的功能來切換。最後講解在啟動 JAR 檔時，如何引入配置檔。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch06-start-application-properties-configuration">點我</a>。</p><h2 id="一、準備程式專案"><a href="#一、準備程式專案" class="headerlink" title="一、準備程式專案"></a>一、準備程式專案</h2><h3 id="（一）範例專案介紹"><a href="#（一）範例專案介紹" class="headerlink" title="（一）範例專案介紹"></a>（一）範例專案介紹</h3><p>在本文的練習用專案，能找到筆者事先準備好的範例程式。</p><p>第一個是「MailController」，裡面有一支 RESTful API。我們預期它會接收 request，並執行一段寄送 email 的程式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailController</span> &#123;    <span class="hljs-meta">@PostMapping(&quot;/mail&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">sendPlainText</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SendMailRequest request)</span> &#123;        <span class="hljs-comment">// TODO</span>        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>第二個是「SendMailRequest」，它會在 controller 接收 request body，包含 email 的收件人、主旨與內容。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMailRequest</span> &#123;    <span class="hljs-keyword">private</span> String[] receivers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>];    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><h3 id="（二）匯入函式庫"><a href="#（二）匯入函式庫" class="headerlink" title="（二）匯入函式庫"></a>（二）匯入函式庫</h3><p>請在 pom.xml 檔案添加「Spring Mail」的依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>這項依賴其實是 Spring Boot 對 Java Mail 進行封裝後的產物，讓我們容易使用。</p><h2 id="二、取得-Google-應用程式密碼"><a href="#二、取得-Google-應用程式密碼" class="headerlink" title="二、取得 Google 應用程式密碼"></a>二、取得 Google 應用程式密碼</h2><p>由於本文會搭配郵件服務來做示範，因此需要做一些事前準備。畢竟在程式中串接外部服務時，通常都需要那個平台的帳密。</p><p>筆者會使用 Gmail 來寄信，然而 Google 為了安全性考量，不允許我們直接在程式中使用 Google 密碼。因此接下來請依照步驟，產生「應用程式密碼」。</p><p>在 Google 帳戶的首頁，前往「安全性」的頁籤，找到「登入 Google 的方式」，進入「兩步驟驗證」畫面。<br><img src="https://chikuwacode.github.io/articles/spring-boot-application-properties-configuration/google-account-security-tab.png"></p><p>從畫面最下方，進入「應用程式密碼」畫面。<br><img src="https://chikuwacode.github.io/articles/spring-boot-application-properties-configuration/google-two-step-verification-page.png"></p><p>在畫面中為這次要建立的密碼取個名字。<br><img src="https://chikuwacode.github.io/articles/spring-boot-application-properties-configuration/google-application-password-setup.png"></p><p>按下「建立」後，即可得到 16 個字的應用程式密碼。<br><img src="https://chikuwacode.github.io/articles/spring-boot-application-properties-configuration/google-application-password-fin.jpg"></p><p>請讀者將這組密碼記在別的地方，因為離開此畫面後，便無法再看到了。</p><h2 id="三、認識-Spring-Mail-的用法"><a href="#三、認識-Spring-Mail-的用法" class="headerlink" title="三、認識 Spring Mail 的用法"></a>三、認識 Spring Mail 的用法</h2><p>本節會展示如何使用 Spring Mail 發送純文字郵件，藉此讓讀者知道使用 Gmail 寄信時，需要哪些設定值。到了第四節，我們再調整成使用「配置檔」的做法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailController</span> &#123;    <span class="hljs-meta">@PostMapping(&quot;/mail&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">sendPlainText</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SendMailRequest request)</span> &#123;        <span class="hljs-type">JavaMailSenderImpl</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> createMailSender();        <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();        msg.setFrom(String.format(<span class="hljs-string">&quot;%s&lt;%s&gt;&quot;</span>, <span class="hljs-string">&quot;Spring Mail&quot;</span>, sender.getUsername()));        msg.setTo(request.getReceivers());        msg.setSubject(request.getSubject());        msg.setText(request.getContent());        sender.send(msg);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;    <span class="hljs-keyword">private</span> JavaMailSenderImpl <span class="hljs-title function_">createMailSender</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">JavaMailSenderImpl</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaMailSenderImpl</span>();        <span class="hljs-comment">// 郵件服務主機</span>        sender.setHost(<span class="hljs-string">&quot;smtp.gmail.com&quot;</span>);        sender.setPort(<span class="hljs-number">587</span>);        <span class="hljs-comment">// 郵件服務帳密</span>        sender.setUsername(<span class="hljs-string">&quot;your_gmail&quot;</span>);        sender.setPassword(<span class="hljs-string">&quot;your_application_password&quot;</span>);        <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> sender.getJavaMailProperties();        props.put(<span class="hljs-string">&quot;mail.smtp.auth&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 是否向郵件服務驗證身份</span>        props.put(<span class="hljs-string">&quot;mail.smtp.starttls.enable&quot;</span>, <span class="hljs-literal">true</span>); <span class="hljs-comment">// 是否啟用 TLS（傳輸層安全），對通訊加密</span>        props.put(<span class="hljs-string">&quot;mail.transport.protocol&quot;</span>, <span class="hljs-string">&quot;smtp&quot;</span>); <span class="hljs-comment">// 傳輸協定</span>        <span class="hljs-keyword">return</span> sender;    &#125;&#125;</code></pre></div><p>上面的範例程式中，在「createMailSender」方法建立了 <code>JavaMailSenderImpl</code> 物件。它需要一些有關郵件服務的參數。例如主機、port 號、帳密等。</p><p>而 API 的處理方法「sendPlainText」，則建立了 <code>SimpleMailMessage</code> 物件，並填寫郵件的寄件人、收件人、主旨與內容，最後寄出。</p><p>此處呼叫 <code>setFrom</code> 方法，在寄件人給予 <code>名稱&lt;信箱&gt;</code> 格式的字串。這是為了讓收件人能看到我們自定義的寄件人名稱，而不是一個 email 地址。</p><p>完成後，讀者可用 Postman 之類的工具呼叫該 API。</p><div class="code-wrapper"><pre><code class="hljs text">POST http://localhost:8080/mail&#123;    &quot;receivers&quot;: [&quot;foo@gmail.com&quot;, &quot;bar@gmail.com&quot;],    &quot;subject&quot;: &quot;Hello&quot;,    &quot;content&quot;: &quot;World&quot;&#125;</code></pre></div><p>確認一下目前的程式能夠寄信到指定的 email 地址。</p><h2 id="四、開始使用配置檔"><a href="#四、開始使用配置檔" class="headerlink" title="四、開始使用配置檔"></a>四、開始使用配置檔</h2><h3 id="（一）撰寫參數"><a href="#（一）撰寫參數" class="headerlink" title="（一）撰寫參數"></a>（一）撰寫參數</h3><p>在第三節，我們把寄信的相關設定值寫死在程式碼中（hard code），這樣的做法可能有一些缺點：</p><ul><li>當各種服務的連線字串，都散落在專案的不同地方，以後若想查看或修改，就不容易找到當初是寫在哪裡。</li><li>承上，即使將設定值集中寫在一個 Java 類別作為常數，但每次修改後，都得重新打包出 JAR 檔，才能交付。</li><li>為了便於管理，我們可以將設定值集中寫在一個叫做「application.properties」的配置檔中。該檔案預設是位於「src\main\resources」資料夾下。若讀者沒有該檔案，請自行建立一個。</li></ul><p>接著將寄信時所用到的設定值，以 <code>key=value</code> 的格式寫在裡面，以下是一個範例：</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">mail.host</span>=<span class="hljs-string">smtp.gmail.com</span><span class="hljs-attr">mail.port</span>=<span class="hljs-string">587</span><span class="hljs-attr">mail.username</span>=<span class="hljs-string">your_gmail</span><span class="hljs-attr">mail.password</span>=<span class="hljs-string">your_application_password</span><span class="hljs-attr">mail.transport-protocol</span>=<span class="hljs-string">smtp</span><span class="hljs-attr">mail.smtp.auth</span>=<span class="hljs-string">true</span><span class="hljs-attr">mail.starttls.enable</span>=<span class="hljs-string">true</span><span class="hljs-attr">mail.display-name</span>=<span class="hljs-string">Spring Mail</span></code></pre></div><p>此處的 key 都是筆者自己取名，且單字可用「.」符號來表示階層。</p><h3 id="（二）讀取配置檔參數"><a href="#（二）讀取配置檔參數" class="headerlink" title="（二）讀取配置檔參數"></a>（二）讀取配置檔參數</h3><p>將設定值都寫到 application.properties 配置檔後，我們就能在元件中透過 <code>@Value</code> 注解，來讀取它們。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailController</span> &#123;    <span class="hljs-meta">@Value(&quot;$&#123;mail.host&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String host;    <span class="hljs-meta">@Value(&quot;$&#123;mail.port&#125;&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;    <span class="hljs-meta">@Value(&quot;$&#123;mail.username&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String username;    <span class="hljs-meta">@Value(&quot;$&#123;mail.password&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String password;    <span class="hljs-meta">@Value(&quot;$&#123;mail.transport-protocol&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String protocol;    <span class="hljs-meta">@Value(&quot;$&#123;mail.smtp.auth&#125;&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> smtpAuth;    <span class="hljs-meta">@Value(&quot;$&#123;mail.starttls.enable&#125;&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> enableStartTls;    <span class="hljs-meta">@Value(&quot;$&#123;mail.display-name:Test Mail&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String displayName;    <span class="hljs-meta">@PostMapping(&quot;/mail&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">sendPlainText</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SendMailRequest request)</span> &#123;        <span class="hljs-comment">// ...        </span>        msg.setFrom(String.format(<span class="hljs-string">&quot;%s&lt;%s&gt;&quot;</span>, displayName, sender.getUsername()));        <span class="hljs-comment">// ...</span>    &#125;    <span class="hljs-keyword">private</span> JavaMailSenderImpl <span class="hljs-title function_">createMailSender</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">JavaMailSenderImpl</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaMailSenderImpl</span>();        sender.setHost(host);        sender.setPort(port);        sender.setUsername(username);        sender.setPassword(password);        <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> sender.getJavaMailProperties();        props.put(<span class="hljs-string">&quot;mail.smtp.auth&quot;</span>, smtpAuth);        props.put(<span class="hljs-string">&quot;mail.smtp.starttls.enable&quot;</span>, enableStartTls);        props.put(<span class="hljs-string">&quot;mail.transport.protocol&quot;</span>, protocol);        <span class="hljs-keyword">return</span> sender;    &#125;&#125;</code></pre></div><p>使用 <code>@Value</code> 注解時，需傳入配置檔的 key 名稱。若有需要，讀者也可提供預設值。格式為 <code>$&#123;key 名稱:預設值&#125;</code>。</p><h3 id="（三）封裝到配置類別"><a href="#（三）封裝到配置類別" class="headerlink" title="（三）封裝到配置類別"></a>（三）封裝到配置類別</h3><p>也許讀者已經感受到了，當類別中存在太多 <code>@Value</code> 注解，整個類別就會很冗長。</p><p>因此，我們也可以考慮將讀取設定值的部份，轉移到另一個元件類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailConfig</span> &#123;    <span class="hljs-meta">@Value(&quot;$&#123;mail.host&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String host;    <span class="hljs-meta">@Value(&quot;$&#123;mail.port&#125;&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> port;    <span class="hljs-meta">@Value(&quot;$&#123;mail.username&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String username;    <span class="hljs-meta">@Value(&quot;$&#123;mail.password&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String password;    <span class="hljs-meta">@Value(&quot;$&#123;mail.transport-protocol&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String protocol;    <span class="hljs-meta">@Value(&quot;$&#123;mail.smtp.auth&#125;&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> smtpAuth;    <span class="hljs-meta">@Value(&quot;$&#123;mail.starttls.enable&#125;&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> enableStartTls;    <span class="hljs-meta">@Value(&quot;$&#123;mail.display-name:Test Mail&#125;&quot;)</span>    <span class="hljs-keyword">private</span> String displayName;    <span class="hljs-comment">// getter ...</span>&#125;</code></pre></div><p>以上建立一個叫做「MailConfig」的類別，並冠上 <code>@Configuration</code> 注解，代表這是與配置有關的元件類別。另外也提供 getter 方法供外部呼叫。</p><p>之後便可將這個元件注入到需要的地方。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailController</span> &#123;        <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> MailConfig mailConfig;    <span class="hljs-meta">@PostMapping(&quot;/mail&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">sendPlainText</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SendMailRequest request)</span> &#123;        <span class="hljs-comment">// ...</span>        msg.setFrom(String.format(<span class="hljs-string">&quot;%s&lt;%s&gt;&quot;</span>, mailConfig.getDisplayName(), sender.getUsername()));        <span class="hljs-comment">// ...</span>    &#125;    <span class="hljs-keyword">private</span> JavaMailSenderImpl <span class="hljs-title function_">createMailSender</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">JavaMailSenderImpl</span> <span class="hljs-variable">sender</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JavaMailSenderImpl</span>();                sender.setHost(mailConfig.getHost());        sender.setPort(mailConfig.getPort());        sender.setUsername(mailConfig.getUsername());        sender.setPassword(mailConfig.getPassword());        <span class="hljs-type">Properties</span> <span class="hljs-variable">props</span> <span class="hljs-operator">=</span> sender.getJavaMailProperties();        props.put(<span class="hljs-string">&quot;mail.smtp.auth&quot;</span>, mailConfig.isSmtpAuth());        props.put(<span class="hljs-string">&quot;mail.smtp.starttls.enable&quot;</span>, mailConfig.isEnableStartTls());        props.put(<span class="hljs-string">&quot;mail.transport.protocol&quot;</span>, mailConfig.getProtocol());        <span class="hljs-keyword">return</span> sender;    &#125;&#125;</code></pre></div><h2 id="五、使用函式庫所指定的設定值"><a href="#五、使用函式庫所指定的設定值" class="headerlink" title="五、使用函式庫所指定的設定值"></a>五、使用函式庫所指定的設定值</h2><p>Spring Mail 函式庫本身有提供「自動配置」的功能。也就是說，Spring Mail 自己也有一個類似第四節的 MailConfig 配置類別。它會讀取配置檔中指定 key 名稱的設定值，私下建立出 <code>JavaMailSenderImpl</code> 元件。</p><p>這麼一來，我們其實直接取用它所建立出來的元件即可，完全不需要自己寫程式來建立。</p><p>本節讓我們稍作調整，將配置檔的設定值，改為 Spring Mail 指定的 key 名稱。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.mail.host</span>=<span class="hljs-string">smtp.gmail.com</span><span class="hljs-attr">spring.mail.port</span>=<span class="hljs-string">587</span><span class="hljs-attr">spring.mail.username</span>=<span class="hljs-string">your_gmail</span><span class="hljs-attr">spring.mail.password</span>=<span class="hljs-string">your_application_password</span><span class="hljs-attr">spring.mail.properties.mail.transport.protocol</span>=<span class="hljs-string">smtp</span><span class="hljs-attr">spring.mail.properties.mail.smtp.auth</span>=<span class="hljs-string">true</span><span class="hljs-attr">spring.mail.properties.mail.smtp.starttls.enable</span>=<span class="hljs-string">true</span><span class="hljs-attr">mail.display-name</span>=<span class="hljs-string">Spring Mail</span></code></pre></div><p>到這邊為止，除了「mail.display-name」的 key 名稱是筆者自己取名，其餘都是 Spring Mail 特別指定的。</p><p>接下來，請在程式中放心地注入 <code>JavaMailSenderImpl</code> 元件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MailController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> JavaMailSenderImpl sender;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> MailConfig mailConfig;    <span class="hljs-meta">@PostMapping(&quot;/mail&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">sendPlainText</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> SendMailRequest request)</span> &#123;        <span class="hljs-comment">// ...</span>        msg.setFrom(String.format(<span class="hljs-string">&quot;%s&lt;%s&gt;&quot;</span>, mailConfig.getDisplayName(), sender.getUsername()));        <span class="hljs-comment">// ...</span>        sender.send(msg);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;&#125;</code></pre></div><p>而先前用來手動建立 <code>JavaMailSenderImpl</code> 物件的 createMailSender 方法，則可以移除了。</p><h2 id="六、使用-Profile-切換配置參數"><a href="#六、使用-Profile-切換配置參數" class="headerlink" title="六、使用 Profile 切換配置參數"></a>六、使用 Profile 切換配置參數</h2><h3 id="（一）部署的環境"><a href="#（一）部署的環境" class="headerlink" title="（一）部署的環境"></a>（一）部署的環境</h3><p>根據筆者的工作經驗，寫好的程式至少會在以下環境運行。</p><ul><li>開發環境：在開發期間，讓工程師確認實作出的功能是否如預期。</li><li>測試環境：讓測試人員驗證功能是否正常。</li><li>正式環境：提供服務給真實使用者。</li></ul><p>每個環境所需要的設定值可能不同。最典型的例子就是不同環境所使用的資料庫位址和帳密，都不一樣。</p><p>針對這個問題，我們可以準備多個配置檔，將不同環境的設定值寫在裡面。並搭配 Spring Boot 提供的「Profile」功能，切換使用不同配置檔。</p><h3 id="（二）切換配置"><a href="#（二）切換配置" class="headerlink" title="（二）切換配置"></a>（二）切換配置</h3><p>以下準備了 2 份配置檔，分別用於開發和測試環境。檔名需遵循 application-環境名稱.properties 的格式。</p><p>「application-dev.properties」檔案：</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">mail.display-name</span>=<span class="hljs-string">Spring Mail (dev)</span></code></pre></div><p>「application-test.properties」檔案：</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">mail.display-name</span>=<span class="hljs-string">Spring Mail (test)</span></code></pre></div><p>它們都只有一個叫做「mail.display-name」的設定值，會做為寄件者的名稱。</p><p>接著在原本的 application.properties 配置檔中，添加 <code>spring.profiles.active</code> 的設定值，就能指定啟動程式時要用哪一份配置檔了。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><span class="hljs-comment"></span><span class="hljs-comment"># 其他參數 ...</span></code></pre></div><p>此處的設定值為「dev」，因此 Spring Boot 便會去讀取「application-dev.properties」檔案。至於其他未寫在該配置檔的設定值，則會回頭採用 application.properties。</p><h2 id="七、啟動-JAR-檔時指定配置檔"><a href="#七、啟動-JAR-檔時指定配置檔" class="headerlink" title="七、啟動 JAR 檔時指定配置檔"></a>七、啟動 JAR 檔時指定配置檔</h2><p>第六節的做法適合在開發工具中，切換不同的配置。而本節將說明如何在啟動 JAR 檔時，指定配置檔。</p><h3 id="（一）指定-Profile"><a href="#（一）指定-Profile" class="headerlink" title="（一）指定 Profile"></a>（一）指定 Profile</h3><p>前面所建立的那些配置檔，會連同程式專案一起被打包進 JAR 檔。因此在 command line 執行 JAR 檔時，可提供 <code>-Dspring.profiles.active</code> 這項參數，指定要採用的配置檔。</p><div class="code-wrapper"><pre><code class="hljs sh">java -Dspring.profiles.active=<span class="hljs-built_in">test</span> -jar demo.jar</code></pre></div><p>此處指定「test」這個 profile，代表要採用「application-test.properties」配置檔。</p><h3 id="（二）自行提供配置檔"><a href="#（二）自行提供配置檔" class="headerlink" title="（二）自行提供配置檔"></a>（二）自行提供配置檔</h3><p>若讀者自己有準備一份配置檔，也可於啟動 JAR 檔時進行指定。</p><p>請在 JAR 檔的所在位置，建立一個叫做「config」的資料夾，並將配置檔放到裡面。相對位置如下：</p><div class="code-wrapper"><pre><code class="hljs text">|_ demo.jar|_ config    |_ application.properties</code></pre></div><p>啟動時，只要簡單地執行以下指令即可，Spring Boot 將會優先讀取 config 資料夾的配置檔。</p><div class="code-wrapper"><pre><code class="hljs sh">java -jar demo.jar</code></pre></div><h2 id="八、YAML-檔"><a href="#八、YAML-檔" class="headerlink" title="八、YAML 檔"></a>八、YAML 檔</h2><p>YAML 檔是一種常被用來配置設定值的檔案格式，副檔名為「yml」。我們可將 application.properties 檔案，改寫為「application.yml」檔案。Spring Boot 支援以 YAML 檔做為設定值的來源。</p><div class="code-wrapper"><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span>  <span class="hljs-attr">mail:</span>    <span class="hljs-attr">host:</span> <span class="hljs-string">smtp.gmail.com</span>    <span class="hljs-attr">port:</span> <span class="hljs-number">587</span>    <span class="hljs-attr">username:</span> <span class="hljs-string">your_gmail</span>    <span class="hljs-attr">password:</span> <span class="hljs-string">your_application_password</span>    <span class="hljs-attr">properties:</span>      <span class="hljs-attr">mail:</span>        <span class="hljs-attr">transport:</span>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">smtp</span>        <span class="hljs-attr">smtp:</span>          <span class="hljs-attr">auth:</span> <span class="hljs-literal">true</span>          <span class="hljs-attr">starttls:</span>            <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><span class="hljs-attr">mail:</span>  <span class="hljs-attr">display-name:</span> <span class="hljs-string">Spring</span> <span class="hljs-string">Mail</span></code></pre></div><p>從排版格式便可清楚地看出階層之分。YAML 檔以換行加兩個半形空格縮排為一個階層，相當於 properties 檔的「.」。YAML 格式有時具有更好的可讀性。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch06-fin-application-properties-configuration">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-bean-ioc-di-and-swap/" target="_blank">【Spring Boot】第5課－元件的控制反轉、依賴注入與抽換</a></p><p>下一課：<a href="/articles/spring-boot-construct-bean-programmatically/" target="_blank">【Spring Boot】第7課－手動進行元件的初始化</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第10.1課 - 使用 MockMvc 進行 API 整合測試</title>
    <link href="/articles/spring-boot-mockmvc-integration-test/"/>
    <url>/articles/spring-boot-mockmvc-integration-test/</url>
    
    <content type="html"><![CDATA[<p>在先前文章的練習中，若要進行測試，都是先啟動程式，再使用 Postman 這項工具呼叫 API，隨後確認結果。</p><p>但隨著功能越來越多，手動測試會非常麻煩。因此本文將利用 Spring Boot 提供的 MockMvc，幫助我們以程式化的方式進行測試。</p><hr><h2 id="一、測試的概念"><a href="#一、測試的概念" class="headerlink" title="一、測試的概念"></a>一、測試的概念</h2><h3 id="（一）為什麼要寫測試"><a href="#（一）為什麼要寫測試" class="headerlink" title="（一）為什麼要寫測試"></a>（一）為什麼要寫測試</h3><p>測試的目的是確認功能可以正常運作，例如先前的文章對後端 API 進行測試時，會手動操作 Postman 這項工具。然而逐一測試會很費時，因此我們可以透過撰寫「測試程式」來自動化。</p><p>每當開發新功能，或修復 Bug 時，我們可針對該次的改動撰寫測試程式，並與舊有的測試一起執行。除了證明該次交付的程式能達成目的，也要確保不會影響現有的功能，讓 bug 能盡早被發現。</p><p>根據測試的範圍，可分為以下幾種。</p><ul><li>單元測試（unit test）：測試的對象是程式中的一個方法（method）。若該方法會使用到其他依賴的元件或外部服務（如資料庫），這部份會透過「模擬」（mock）的手法來處理，而不是真的進去執行。</li><li>整合測試（integration test）：與單元測試相比，整合測試會真正去使用所依賴的元件或服務，確保整體運作上沒有問題。</li><li>端對端測試（end to end test）：就像使用者操作前端畫面那樣。範圍包含前端發送 HTTP request 到後端，收到 response 後再驗證畫面上的結果。</li></ul><p>本文所要介紹的是整合測試，這會利用 Spring Boot 提供的 MockMvc。它和 Postman 一樣，可以指定 HTTP 方法與 API 路徑，並攜帶 request header、body 與 query string。</p><h3 id="（二）寫測試的缺點"><a href="#（二）寫測試的缺點" class="headerlink" title="（二）寫測試的缺點"></a>（二）寫測試的缺點</h3><p>雖說撰寫測試程式，能夠幫助我們在未來更有效率地測試，但也要權衡利弊：</p><ul><li>寫測試畢竟也是一種寫程式的動作，有時花費的時間可能還會大於開發業務邏輯的時間呢！當工作時程緊湊，可能會沒時間寫。除非團隊能將測試時間納人開發時程，否則若硬要做，勢必會很有壓力。</li><li>有些團隊會有 code review（程式碼審查）的流程，同事得多花時間看這些測試程式。</li><li>未來需求如果改變，測試程式也要隨之修改，要多花額外的時間來維護。</li></ul><p>基於這些工作上可能遇到的情況，讀者不妨自己斟酌測試的量。比方說優先測試重要的情境，行有餘力再考慮其他的。</p><h2 id="二、程式專案介紹"><a href="#二、程式專案介紹" class="headerlink" title="二、程式專案介紹"></a>二、程式專案介紹</h2><p>本節筆者將介紹程式專案，該專案在 Controller 提供了 RESTful API，以便進行測試。</p><p>以下是產品資料的類別，包含 id、名稱與價格。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下類別是用來在 Controller 接收 query string，包含排序的欄位與方向。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRequestParameter</span> &#123;    <span class="hljs-keyword">private</span> String sortField;    <span class="hljs-keyword">private</span> String sortDirection;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是儲存產品資料的 repository 介面，提供取得、新增與刪除資料的方法。至於其他 default 方法，則是用來產生 id 和建立排序比較器。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.UUID;<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IProductRepository</span> &#123;    Product <span class="hljs-title function_">findById</span><span class="hljs-params">(String id)</span>;    List&lt;Product&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">(ProductRequestParameter param)</span>;    Product <span class="hljs-title function_">insert</span><span class="hljs-params">(Product product)</span>;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAll</span><span class="hljs-params">()</span>;    <span class="hljs-keyword">default</span> String <span class="hljs-title function_">generateId</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> UUID.randomUUID().toString();    &#125;    <span class="hljs-keyword">default</span> Comparator&lt;Product&gt; <span class="hljs-title function_">getSortComparator</span><span class="hljs-params">(ProductRequestParameter param)</span> &#123;        Comparator&lt;Product&gt; comparator;        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;name&quot;</span>.equalsIgnoreCase(param.getSortField())) &#123;            comparator = Comparator.comparing(p -&gt; p.getName().toLowerCase());        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;price&quot;</span>.equalsIgnoreCase(param.getSortField())) &#123;            comparator = Comparator.comparing(Product::getPrice);        &#125; <span class="hljs-keyword">else</span> &#123;            comparator = (p1, p2) -&gt; <span class="hljs-number">0</span>;        &#125;        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;desc&quot;</span>.equalsIgnoreCase(param.getSortDirection())) &#123;            comparator = comparator.reversed();        &#125;        <span class="hljs-keyword">return</span> comparator;    &#125;&#125;</code></pre></div><p>本文並未串接真實的資料庫。以下的 repository 實作，是用 Map 資料結構來儲存資料。第八節還會準備以 List 來儲存的實作。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapProductRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">findById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> productMap.get(id);    &#125;    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">(ProductRequestParameter param)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> getSortComparator(param);        <span class="hljs-keyword">return</span> productMap.values()                .stream()                .sorted(comparator)                .toList();    &#125;    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">insert</span><span class="hljs-params">(Product product)</span> &#123;        product.setId(generateId());        productMap.put(product.getId(), product);        <span class="hljs-keyword">return</span> product;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAll</span><span class="hljs-params">()</span> &#123;        productMap.clear();    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepositoryConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> IProductRepository <span class="hljs-title function_">productRepository</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapProductRepository</span>();    &#125;&#125;</code></pre></div><p>最後是 Controller，提供取得一筆、取得多筆，和新增資料的 API。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(value = &quot;/products&quot;, produces = MediaType.APPLICATION_JSON_VALUE)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> IProductRepository productRepository;    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Product&gt; <span class="hljs-title function_">getOne</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String id)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productRepository.findById(id);        <span class="hljs-keyword">return</span> product == <span class="hljs-literal">null</span>                ? ResponseEntity.notFound().build()                : ResponseEntity.ok(product);    &#125;    <span class="hljs-meta">@GetMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getMany</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute</span> ProductRequestParameter param)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">products</span> <span class="hljs-operator">=</span> productRepository.findAll(param);        <span class="hljs-keyword">return</span> ResponseEntity.ok(products);    &#125;    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-keyword">if</span> (product.getName() == <span class="hljs-literal">null</span> || product.getPrice() &lt; <span class="hljs-number">0</span>) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.badRequest().build();        &#125;        productRepository.insert(product);        <span class="hljs-type">var</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> ServletUriComponentsBuilder                .fromCurrentRequestUri()                .path(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)                .build(Map.of(<span class="hljs-string">&quot;id&quot;</span>, product.getId()));        <span class="hljs-keyword">return</span> ResponseEntity.created(uri).build();    &#125;&#125;</code></pre></div><p>取得一筆資料時，若找不到，會回傳 404 狀態碼；新增資料時，若名稱與價格不合法，會回傳 400 狀態碼。</p><h2 id="三、開始撰寫測試"><a href="#三、開始撰寫測試" class="headerlink" title="三、開始撰寫測試"></a>三、開始撰寫測試</h2><h3 id="（一）準備測試類別"><a href="#（一）準備測試類別" class="headerlink" title="（一）準備測試類別"></a>（一）準備測試類別</h3><p>準備好程式專案和 RESTful API 後，就能準備測試了。</p><p>假設讀者這次練習，是在「com.example.demo」的 package 下寫程式，那麼請在程式專案的「src&#x2F;test&#x2F;java&#x2F;com&#x2F;example&#x2F;demo」路徑下，建立一個類別，專門用來撰寫測試程式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@AutoConfigureMockMvc</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductTests</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> MockMvc mockMvc;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> IProductRepository productRepository;    <span class="hljs-keyword">private</span> Product <span class="hljs-title function_">insertProduct</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> price)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();        product.setName(name);        product.setPrice(price);        <span class="hljs-keyword">return</span> productRepository.insert(product);    &#125;    <span class="hljs-comment">// TODO</span>&#125;</code></pre></div><p>此類別冠上了 2 個注解。<code>@SpringBootTest</code> 會在執行測試時，啟動 Spring Boot 環境，所以我們可在此注入元件。<code>@AutoConfigureMockMvc</code> 能自動建立 <code>MockMvc</code> 的元件，我們會利用它來對 Controller 發出 request。</p><p>另外還提供了一個用來在 repository 新增產品測試資料的方法。</p><h3 id="（二）指定-API-路徑並發出-request"><a href="#（二）指定-API-路徑並發出-request" class="headerlink" title="（二）指定 API 路徑並發出 request"></a>（二）指定 API 路徑並發出 request</h3><p>以下是一支測試程式，冠上了 <code>@Test</code> 注解。其情境是透過產品 id 取得資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;<span class="hljs-keyword">import</span> org.springframework.test.web.servlet.RequestBuilder;<span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;<span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;<span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;<span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@AutoConfigureMockMvc</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductTests</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> MockMvc mockMvc;    <span class="hljs-meta">@Test</span>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetOneProduct</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> insertProduct(<span class="hljs-string">&quot;Hamburger&quot;</span>, <span class="hljs-number">50</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">apiPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/products/&quot;</span> + product.getId();        <span class="hljs-type">RequestBuilder</span> <span class="hljs-variable">requestBuilder</span> <span class="hljs-operator">=</span> MockMvcRequestBuilders.get(apiPath);        mockMvc.perform(requestBuilder)                .andDo(print())                .andExpect(status().isOk())                .andExpect(jsonPath(<span class="hljs-string">&quot;$.id&quot;</span>).value(product.getId()))                .andExpect(jsonPath(<span class="hljs-string">&quot;$.name&quot;</span>).value(product.getName()))                .andExpect(jsonPath(<span class="hljs-string">&quot;$.price&quot;</span>).value(product.getPrice()));    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>首先在 repository 新增一筆資料。</p><p>然後透過 <code>MockMvcRequestBuilders</code> 的方法構建 request 內容，此處呼叫 <code>get</code> 方法指定 <code>GET /products/&#123;id&#125;</code> 這支 API，並得到了 <code>RequestBuilder</code> 介面的物件。最後呼叫 <code>MockMvc</code> 的 <code>perform</code> 方法，即可發出 request。</p><p>隨後我們可進行一些後續的動作。使用 <code>andExpect</code> 方法，可傳入各式各樣的規則來驗證 response。比方說 <code>status()</code> 方法可驗證 HTTP 狀態碼，有 200（OK）、201（Created）、404（Not Found）等許多選項可用。</p><p>使用 <code>jsonPath().value()</code> 方法，可驗證 response body 的欄位值。<code>jsonPath</code> 方法的欄位路徑寫法，會以「$」符號作為第一層，並以「.」符號，指向該層的欄位。更深層的欄位，就以「.」繼續串接欄位名稱。而 <code>value</code> 方法則傳入預期的欄位值。</p><p>使用 <code>andDo(print())</code> 方法，可以將 request 和 response 的資訊印在 Console 窗格。</p><h3 id="（三）執行測試"><a href="#（三）執行測試" class="headerlink" title="（三）執行測試"></a>（三）執行測試</h3><p>撰寫好測試程式後，左鍵按下方法名稱旁邊的綠色圖案即可執行，有 Run 和 Debug 兩個選項。<br><img src="https://chikuwacode.github.io/articles/spring-boot-mockmvc-integration-test/spring-boot-run-test-menu.png"></p><p>執行完後，在左下方窗格可看到測試方法名稱旁的綠色勾勾，代表通過。而黃色圖案代表驗證失敗，紅色代表發生例外。在右方的 Console 窗格，可看到印出的 request 與 response 資訊。<br><img src="https://chikuwacode.github.io/articles/spring-boot-mockmvc-integration-test/spring-boot-test-request-info.png"><br><img src="https://chikuwacode.github.io/articles/spring-boot-mockmvc-integration-test/spring-boot-test-response-info.png"></p><p>若讀者想一次執行多個測試，可以左鍵點擊測試類別名稱旁的綠色圖案。或者在專案瀏覽窗格中，右鍵點擊含有測試類別的資料夾。一樣都有 Run 和 Debug 可選擇。<br><img src="https://chikuwacode.github.io/articles/spring-boot-mockmvc-integration-test/spring-boot-batch-run-tests-menu.png"></p><h2 id="四、測試執行前與後的處理"><a href="#四、測試執行前與後的處理" class="headerlink" title="四、測試執行前與後的處理"></a>四、測試執行前與後的處理</h2><p>在撰寫下一支測試程式前，讀者要先知道一件事：每個測試情境所用的資料都是獨立的，不應該被其他殘留資料干擾。</p><p>舉例來說，下一節我們會撰寫取得多個產品的測試。若沒有將 repository 的資料清空，那麼 API 回傳的資料筆數可能就會不如預期。</p><p>本節將介紹如何在測試程式執行前與後，進行想要的動作。根據上述的例子，請宣告一個方法，用來清空 repository。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@AutoConfigureMockMvc</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductTests</span> &#123;    <span class="hljs-meta">@BeforeEach</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearRepo</span><span class="hljs-params">()</span> &#123;        productRepository.deleteAll();    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>該方法冠上了 <code>@BeforeEach</code> 注解，代表會在每支測試程式執行前執行。另外也有 <code>@AfterEach</code> 注解可用。要注意的是，方法必須宣告為 public。</p><p>我們也能以測試類別為單位，在所有測試程式執行前與後，做想要的事情。下面的例子，是在 repository 新增產品時進行計數，並在最後印出該測試類別新增的產品數量。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@AutoConfigureMockMvc</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductTests</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">productCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;    <span class="hljs-meta">@AfterAll</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printProductCount</span><span class="hljs-params">()</span> &#123;        System.out.println(<span class="hljs-string">&quot;Inserted product amount: &quot;</span> + productCount);    &#125;    <span class="hljs-keyword">private</span> Product <span class="hljs-title function_">insertProduct</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> price)</span> &#123;        <span class="hljs-comment">// ...</span>        productCount++;        <span class="hljs-keyword">return</span> productRepository.insert(product);    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>該方法冠上了 <code>@AfterAll</code> 注解，代表會在所有測試執行完才執行。另外也有 <code>@BeforeAll</code> 注解可用。要注意的是，方法必須宣告為 public static。</p><h2 id="五、攜帶-query-string-與驗證陣列元素"><a href="#五、攜帶-query-string-與驗證陣列元素" class="headerlink" title="五、攜帶 query string 與驗證陣列元素"></a>五、攜帶 query string 與驗證陣列元素</h2><p>以下的測試情境，是攜帶 query string，對產品資料做排序。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@AutoConfigureMockMvc</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductTests</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSortProductsByPrice</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Product</span> <span class="hljs-variable">product1</span> <span class="hljs-operator">=</span> insertProduct(<span class="hljs-string">&quot;Hamburger&quot;</span>, <span class="hljs-number">50</span>);        <span class="hljs-type">Product</span> <span class="hljs-variable">product2</span> <span class="hljs-operator">=</span> insertProduct(<span class="hljs-string">&quot;Coke&quot;</span>, <span class="hljs-number">20</span>);        <span class="hljs-type">Product</span> <span class="hljs-variable">product3</span> <span class="hljs-operator">=</span> insertProduct(<span class="hljs-string">&quot;Sandwich&quot;</span>, <span class="hljs-number">40</span>);        <span class="hljs-type">RequestBuilder</span> <span class="hljs-variable">requestBuilder</span> <span class="hljs-operator">=</span> MockMvcRequestBuilders                .get(<span class="hljs-string">&quot;/products&quot;</span>)                .param(<span class="hljs-string">&quot;sortField&quot;</span>, <span class="hljs-string">&quot;price&quot;</span>)                .param(<span class="hljs-string">&quot;sortDirection&quot;</span>, <span class="hljs-string">&quot;desc&quot;</span>);        mockMvc.perform(requestBuilder)                .andExpect(jsonPath(<span class="hljs-string">&quot;$&quot;</span>, hasSize(<span class="hljs-number">3</span>)))                .andExpect(jsonPath(<span class="hljs-string">&quot;$[0].id&quot;</span>).value(product1.getId()))                .andExpect(jsonPath(<span class="hljs-string">&quot;$[1].id&quot;</span>).value(product3.getId()))                .andExpect(jsonPath(<span class="hljs-string">&quot;$[2].id&quot;</span>).value(product2.getId()));    &#125;&#125;</code></pre></div><p>使用 <code>MockMvcRequestBuilders</code> 的 <code>param</code> 方法，可傳入 query string。第一個參數為名稱，第二個參數為值。</p><p>發出 request 後，可透過 <code>hasSize</code> 方法，驗證一下 response 中的資料筆數。</p><p>若要對陣列元素的欄位值做驗證，在 <code>jsonPath</code> 方法中，可透過「欄位名稱 + 中括號 + 數字」，來表示指定位置的元素。此處由於 response body 本身就是陣列，所以直接在「$」後方寫上中括號。</p><h2 id="六、將-response-轉換成物件再驗證"><a href="#六、將-response-轉換成物件再驗證" class="headerlink" title="六、將 response 轉換成物件再驗證"></a>六、將 response 轉換成物件再驗證</h2><p>除了透過 <code>andExpect</code> 方法來驗證欄位值，也可以將 response body 轉換為物件，再進行想要的驗證。當我們不在意資料的先後順序，這種手法就派得上用場。</p><p>而且還有另一項好處，就是當欄位名稱變更，也不必特地回來修改當初傳入 <code>jsonPath</code> 方法的欄位路徑字串，畢竟開發工具是可以連動更改 getter 方法。</p><p>以下的測試情境，一樣是取得多筆產品資料，但重點是不排序。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@AutoConfigureMockMvc</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductTests</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();    <span class="hljs-meta">@Test</span>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetManyProduct</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Product</span> <span class="hljs-variable">product1</span> <span class="hljs-operator">=</span> insertProduct(<span class="hljs-string">&quot;Hamburger&quot;</span>, <span class="hljs-number">50</span>);        <span class="hljs-type">Product</span> <span class="hljs-variable">product2</span> <span class="hljs-operator">=</span> insertProduct(<span class="hljs-string">&quot;Coke&quot;</span>, <span class="hljs-number">20</span>);        <span class="hljs-type">RequestBuilder</span> <span class="hljs-variable">requestBuilder</span> <span class="hljs-operator">=</span> MockMvcRequestBuilders.get(<span class="hljs-string">&quot;/products&quot;</span>);        <span class="hljs-type">MvcResult</span> <span class="hljs-variable">mvcResult</span> <span class="hljs-operator">=</span> mockMvc.perform(requestBuilder).andReturn();        <span class="hljs-type">MockHttpServletResponse</span> <span class="hljs-variable">httpResponse</span> <span class="hljs-operator">=</span> mvcResult.getResponse();        assertEquals(HttpStatus.OK.value(), httpResponse.getStatus());        <span class="hljs-type">String</span> <span class="hljs-variable">responseBody</span> <span class="hljs-operator">=</span> httpResponse.getContentAsString();        List&lt;Product&gt; actualProducts = objectMapper.readValue(responseBody, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;Product&gt;&gt;() &#123;&#125;);        List&lt;String&gt; actualIds = actualProducts.stream()                .map(Product::getId)                .toList();        List&lt;String&gt; expectedIds = List.of(product1.getId(), product2.getId());        assertTrue(actualIds.containsAll(expectedIds));        assertTrue(expectedIds.containsAll(actualIds));    &#125;&#125;</code></pre></div><p>透過 <code>MockMvc</code> 發送 request 後，接續呼叫 <code>andReturn</code> 與 <code>getResponse</code> 方法，可得到 <code>MockHttpServletResponse</code> 物件。</p><p>我們可從 <code>MockHttpServletResponse</code> 物件取得 HTTP 狀態碼、header 與 body 等資料。其中，透過 <code>getContentAsString</code> 方法，可得到 body 的 JSON 字串。</p><p>接下來會用到一個叫 <code>ObjectMapper</code> 的物件，它能夠將 JSON 字串與指定類别的物件互相轉換。此處透過它的 <code>readValue</code> 方法，將 response body 轉換成 <code>List&lt;Product&gt;</code>。</p><p>最後將實際結果的產品 id 收集起來，確認是否如預期。</p><p>附帶一提，使用 <code>ObjectMapper</code> 時，若想將 JSON 字串轉換成帶有泛型的 List 或 Map 時，再搭配使用 <code>TypeReference</code> 就好。一般情況可直接傳入類別名稱，如 <code>objectMapper.readValue(responseBody, Product.class)</code>。</p><h2 id="七、攜帶-request-body-與-header"><a href="#七、攜帶-request-body-與-header" class="headerlink" title="七、攜帶 request body 與 header"></a>七、攜帶 request body 與 header</h2><p>本節的測試情境是新增產品資料，這會攜帶 request body 與 header。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootTest</span><span class="hljs-meta">@AutoConfigureMockMvc</span><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductTests</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@Test</span>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCreateProduct</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;        <span class="hljs-type">Product</span> <span class="hljs-variable">productRequest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();        productRequest.setName(<span class="hljs-string">&quot;Coke&quot;</span>);        productRequest.setPrice(<span class="hljs-number">20</span>);        <span class="hljs-type">String</span> <span class="hljs-variable">requestBody</span> <span class="hljs-operator">=</span> objectMapper.writeValueAsString(productRequest);        <span class="hljs-type">RequestBuilder</span> <span class="hljs-variable">requestBuilder</span> <span class="hljs-operator">=</span> MockMvcRequestBuilders                .post(<span class="hljs-string">&quot;/products&quot;</span>)                .content(requestBody)                .contentType(MediaType.APPLICATION_JSON);        <span class="hljs-type">MockHttpServletResponse</span> <span class="hljs-variable">httpResponse</span> <span class="hljs-operator">=</span> mockMvc.perform(requestBuilder)                .andExpect(status().isCreated())                .andReturn()                .getResponse();        <span class="hljs-type">String</span> <span class="hljs-variable">location</span> <span class="hljs-operator">=</span> httpResponse.getHeader(HttpHeaders.LOCATION);        assertNotNull(location);        <span class="hljs-type">String</span> <span class="hljs-variable">productId</span> <span class="hljs-operator">=</span> location.substring(location.lastIndexOf(<span class="hljs-string">&quot;/&quot;</span>) + <span class="hljs-number">1</span>);        <span class="hljs-type">Product</span> <span class="hljs-variable">resultProduct</span> <span class="hljs-operator">=</span> productRepository.findById(productId);        assertEquals(productRequest.getName(), resultProduct.getName());        assertEquals(productRequest.getPrice(), resultProduct.getPrice());    &#125;&#125;</code></pre></div><p>首先建立一個產品物件，用途是讓 <code>ObjectMapper</code> 將其解析成字串，做為 request body。</p><p>構建 request 時，透過 <code>MockMvcRequestBuilders</code> 的 <code>content</code> 方法，可傳人 request body 的字串。另外也要透過 <code>header</code> 方法，在 header 給予「Content-Type」欄位值，代表資料格式。</p><p>發出 request 後，我們會想要知道儲存到 repository 中的資料是否如預期。此處可從 response header 取出「Location」欄位值，擷取出產品 id，隨後從 repository 查詢出來進行驗證。</p><h2 id="八、測試專屬的配置檔"><a href="#八、測試專屬的配置檔" class="headerlink" title="八、測試專屬的配置檔"></a>八、測試專屬的配置檔</h2><p>筆者在<a href="/articles/spring-boot-application-properties-configuration/" target="_blank">第 6 課</a>介紹過 application.properties 配置檔，裡面可以填寫關於資料庫連線、郵件服務等各種設定值。</p><p>在進行整合測試時，建議使用獨立的配置檔，而不要與正式環境使用同一個。一來可以專注於當下的測試資料，不會受到其他資料干擾。二來也能避免測試程式沒寫好，誤刪或留下了髒資料。</p><p>請讀者在程式專案的「src\test\resources」路徑下，也準備一個 application.properties 配置檔。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">product-repository.storage</span>=<span class="hljs-string">list</span></code></pre></div><p>別忘了在正式環境的配置檔也添加相同 key 的設定值。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">product-repository.storage</span>=<span class="hljs-string">map</span></code></pre></div><p>本節會實作一個用 List 資料結構來儲存產品資料的 repository。這個自定義的設定值，就是為了讓不同環境存取不同的服務。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListProductRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Product&gt; productList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">findById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> productList.stream()                .filter(p -&gt; p.getId().equals(id))                .findFirst()                .orElse(<span class="hljs-literal">null</span>);    &#125;    <span class="hljs-keyword">public</span> List&lt;Product&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">(ProductRequestParameter param)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">comparator</span> <span class="hljs-operator">=</span> getSortComparator(param);        <span class="hljs-keyword">return</span> productList.stream()                .sorted(comparator)                .toList();    &#125;    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">insert</span><span class="hljs-params">(Product product)</span> &#123;        product.setId(generateId());        productList.add(product);        <span class="hljs-keyword">return</span> product;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteAll</span><span class="hljs-params">()</span> &#123;        productList.clear();    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RepositoryConfig</span> &#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-keyword">public</span> IProductRepository <span class="hljs-title function_">productRepository</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@Value(&quot;$&#123;product-repository.storage&#125;&quot;)</span> String storageType</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;map&quot;</span>.equalsIgnoreCase(storageType)) &#123;            System.out.println(<span class="hljs-string">&quot;Create MapProductRepository.&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MapProductRepository</span>();        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;list&quot;</span>.equalsIgnoreCase(storageType)) &#123;            System.out.println(<span class="hljs-string">&quot;Create ListProductRepository.&quot;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListProductRepository</span>();        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Provided product repository storage type is unsupported.&quot;</span>);        &#125;    &#125;&#125;</code></pre></div><p>完成後，讀者可分別啟動 Spring Boot 和測試程式。從 Console 窗格中，能夠發現它們確實使用了不同實作方式的 repository。</p><p>雖然本文並未串接真實的資料庫，但讀者可理解成，正式環境與測試程式所用的 repository，並不會是同一個，已經分離開來了。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch10.1-mockmvc-integration-test">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-jpa-many-to-many-relationship-and-intermediary-table/" target="_blank">【Spring Boot】第9.6課－使用 JPA 建立多對多關聯，並配置中間表</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第8.3課－在 MongoRepository 定義查詢條件與排序方式</title>
    <link href="/articles/spring-boot-mongo-repository-customize-query/"/>
    <url>/articles/spring-boot-mongo-repository-customize-query/</url>
    
    <content type="html"><![CDATA[<p>上一篇已經介紹過 MongoRepository 內建的查詢方法，也就是用 id 欄位來查詢。但資料勢必有其他欄位，只有 id 能做為條件肯定是不夠的。</p><p>本文會使用 Spring Data 框架的功能，示範如何在 repository 中設計自己的查詢條件，包含透過方法名稱及原生語法。接著說明如何進行排序與分頁。</p><p>最後簡介 MongoTemplate，藉由動態產生查詢條件，以因應多樣的需求。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch08.2-mongodb-repository-crud">點我</a>。</p><h2 id="一、資料類別"><a href="#一、資料類別" class="headerlink" title="一、資料類別"></a>一、資料類別</h2><p>首先讓我們快速回顧上一篇要儲存到資料庫的學生資料類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Document(collection = &quot;student&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;    <span class="hljs-meta">@Id</span>    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> grade;    <span class="hljs-keyword">private</span> LocalDate birthday;    <span class="hljs-keyword">private</span> Contact contact;    <span class="hljs-keyword">private</span> List&lt;Certificate&gt; certificates;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>而以下分別是學生的「聯繫方式」與「證照」，屬於學生資料的內部欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Contact</span> &#123;    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String phone;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Contact <span class="hljs-title function_">of</span><span class="hljs-params">(String email, String phone)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Contact</span>();        c.email = email;        c.phone = phone;        <span class="hljs-keyword">return</span> c;    &#125;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Certificate</span> &#123;    <span class="hljs-keyword">private</span> String type;    <span class="hljs-keyword">private</span> Integer score;    <span class="hljs-keyword">private</span> String level;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Certificate <span class="hljs-title function_">of</span><span class="hljs-params">(String type, Integer score, String level)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Certificate</span>();        c.type = type;        c.score = score;        c.level = level;        <span class="hljs-keyword">return</span> c;    &#125;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;&#125;</code></pre></div><h2 id="二、自定義查詢方法"><a href="#二、自定義查詢方法" class="headerlink" title="二、自定義查詢方法"></a>二、自定義查詢方法</h2><p>我們能在 StudentRepository 中，依照特定的命名規則，設計自己的查詢方法。</p><p>本節挑選一部份出來示範。更多命名方式，讀者可參考 <a href="https://docs.spring.io/spring-data/jpa/reference/jpa/query-methods.html">Spring Data JPA 官方文件</a>。雖然「JPA」是針對關聯式資料庫，但裡面的內容仍適用於 MongoDB。</p><h3 id="（一）相等條件"><a href="#（一）相等條件" class="headerlink" title="（一）相等條件"></a>（一）相等條件</h3><p>以下是查詢「name」欄位值等於參數值的方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;    Student <span class="hljs-title function_">findByName</span><span class="hljs-params">(String s)</span>;&#125;</code></pre></div><p>方法名稱中，在 <code>findBy</code> 後面緊接著欄位名稱。該名稱必須存在於文件的資料類別，也就是 Student 類別中，否則 Spring Boot 會啟動失敗。</p><p>以下是查詢內部欄位的方法，分別是將聯繫方式與證照當作條件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;    Student <span class="hljs-title function_">findByContactEmail</span><span class="hljs-params">(String s)</span>;    Student <span class="hljs-title function_">findByContactPhone</span><span class="hljs-params">(String s)</span>;    List&lt;Student&gt; <span class="hljs-title function_">findByCertificatesType</span><span class="hljs-params">(String s)</span>;&#125;</code></pre></div><p>想在方法名稱中指定內部欄位，只要將欄位的「路徑」寫出即可。第 1、2 個方法分別是查詢 Contact 物件欄位中的 email 與 phone 欄位。</p><p>而第 3 個方法的查詢條件，則是在 Certificates 的 List 中，只要任一元素的 type 欄位值等於參數，就算符合。</p><p>至於回傳值型態，若讀者認為該條件可能會有多筆資料符合，那就可以選擇回傳 List。</p><p>附帶一提，方法的參數名稱，與資料的欄位名稱並無關聯，所以不一定要取相同的名字。</p><h3 id="（二）範圍條件"><a href="#（二）範圍條件" class="headerlink" title="（二）範圍條件"></a>（二）範圍條件</h3><p>以下是針對數值與日期欄位，做範圍條件的查詢。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;    List&lt;Student&gt; <span class="hljs-title function_">findByGradeGreaterThanEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> from)</span>;    List&lt;Student&gt; <span class="hljs-title function_">findByGradeLessThanEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> to)</span>;        List&lt;Student&gt; <span class="hljs-title function_">findByBirthdayAfter</span><span class="hljs-params">(LocalDate from)</span>;    List&lt;Student&gt; <span class="hljs-title function_">findByBirthdayBefore</span><span class="hljs-params">(LocalDate to)</span>;&#125;</code></pre></div><p>第 1、2 個方法，分別是查詢年級大於等於，或小於等於參數的資料。方法名稱中使用了 <code>GreaterThanEqual</code> 和 <code>LessThanEqual</code> 關鍵字。若範圍只想要大於或小於，則拿掉 <code>Equal</code> 關鍵字即可。</p><p>第 3、4 個方法，分別是查詢生日在某個日期之後或之前的資料。方法名稱中使用了 <code>After</code> 和 <code>Before</code> 做為關鍵字。</p><h3 id="（三）組合多個條件"><a href="#（三）組合多個條件" class="headerlink" title="（三）組合多個條件"></a>（三）組合多個條件</h3><p>查詢條件也可透過「AND」或「OR」的邏輯組合起來。</p><p>以下的條件是 Contact 物件欄位中的 phone 欄位等於某個值，或 email 欄位等於某個值。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;    List&lt;Student&gt; <span class="hljs-title function_">findByContactEmailOrContactPhone</span><span class="hljs-params">(String email, String phone)</span>;&#125;</code></pre></div><p>方法名稱中使用了 <code>Or</code> 和 <code>And</code> 關鍵字。</p><p>要注意的是，透過 AND 邏輯組合查詢條件時，欄位不可重複，否則呼叫時會發生例外。舉例來說，「年級大於等於且小於等於」這項條件，不可寫成：</p><div class="code-wrapper"><pre><code class="hljs java">List&lt;Student&gt; <span class="hljs-title function_">findByGradeGreaterThanEqualAndGradeLessThanEqual</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span>;</code></pre></div><p>原因是 Spring Data 會將方法名稱解讀成類似下面的條件。</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;grade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;grade&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>在 JSON 資料中，若同一階層有相同名稱的欄位，是不合法的格式。</p><p>回到範圍查詢，此時可使用 <code>Between</code> 關鍵字，並傳入 <code>Range</code> 型態的參數。</p><div class="code-wrapper"><pre><code class="hljs java">List&lt;Student&gt; <span class="hljs-title function_">findByGradeBetween</span><span class="hljs-params">(Range&lt;Integer&gt; range)</span>;</code></pre></div><p>而 <code>Range</code> 物件的建立方式為：</p><div class="code-wrapper"><pre><code class="hljs java">Range&lt;Integer&gt; range = Range.of(    Range.Bound.inclusive(from),    Range.Bound.inclusive(to));</code></pre></div><h3 id="（四）原生語法"><a href="#（四）原生語法" class="headerlink" title="（四）原生語法"></a>（四）原生語法</h3><p>讀者也許會覺得上述「findByContactEmailOrContactPhone」的方法名稱有點冗長。或者有些比較複雜的條件，其實很難寫出方法名稱，甚至根本寫不出來。</p><p>針對這個情形，Spring Data 也支援我們直接撰寫原生語法，而方法可隨意取名。以下的例子是將相同的查詢條件，以 MongoDB 的語法寫出。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;    <span class="hljs-meta">@Query(&quot;&quot;&quot;</span><span class="hljs-meta">        &#123;</span><span class="hljs-meta">            &quot;$or&quot;: [</span><span class="hljs-meta">                &#123; &quot;contact.email&quot;: ?0 &#125;,</span><span class="hljs-meta">                &#123; &quot;contact.phone&quot;: ?1 &#125;</span><span class="hljs-meta">            ]</span><span class="hljs-meta">        &#125;</span><span class="hljs-meta">    &quot;&quot;&quot;)</span>    List&lt;Student&gt; <span class="hljs-title function_">findByContact</span><span class="hljs-params">(String email, String phone)</span>;&#125;</code></pre></div><p>使用 <code>@Query</code> 注解，可以用字串的形式提供語法。而當中的「?0」、「?1」等符號，代表要取用方法的第幾個參數（位置從 0 開始算）。</p><p>此外，Spring Data 並不在意語法是否換行與縮排，讀者可自行排版。</p><p>以下再提供一個例子，其條件是具有某個證照，且分數大於等於某值，例如多益分數大於等於 900。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;        <span class="hljs-meta">@Query(&quot;&quot;&quot;</span><span class="hljs-meta">        &#123;</span><span class="hljs-meta">            &quot;certificates&quot;: &#123;</span><span class="hljs-meta">                &quot;$elemMatch&quot;: &#123;</span><span class="hljs-meta">                    &quot;type&quot;: ?0,</span><span class="hljs-meta">                    &quot;score&quot;: &#123; &quot;$gte&quot;: ?1 &#125;</span><span class="hljs-meta">                &#125;</span><span class="hljs-meta">            &#125;</span><span class="hljs-meta">        &#125;</span><span class="hljs-meta">    &quot;&quot;&quot;)</span>    List&lt;Student&gt; <span class="hljs-title function_">findByCertificateTypeAndScoreGte</span><span class="hljs-params">(String type, <span class="hljs-type">int</span> score)</span>;&#125;</code></pre></div><p>要注意的一點是，假設讀者所開發的系統，未來更換資料庫了，那這些原生語法可能就得根據資料庫的種類進行重寫。而使用方法名稱定義查詢條件，則不必擔心這個問題。</p><h2 id="三、排序與分頁"><a href="#三、排序與分頁" class="headerlink" title="三、排序與分頁"></a>三、排序與分頁</h2><h3 id="（一）排序"><a href="#（一）排序" class="headerlink" title="（一）排序"></a>（一）排序</h3><p>以下是根據年級做遞減排序，而沒有查詢條件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;    List&lt;Student&gt; <span class="hljs-title function_">findAllByOrderByGradeDesc</span><span class="hljs-params">()</span>;&#125;</code></pre></div><p>這是一種簡易的做法，直接在方法名稱加上 <code>OrderBy</code> 關鍵字，再緊接著欄位名稱與排序方向。</p><p>若想要更彈性一點，可選擇在方法傳入 <code>Sort</code> 型態的參數。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;    <span class="hljs-meta">@Query(&quot;&#123;&#125;&quot;)</span>    List&lt;Student&gt; <span class="hljs-title function_">find</span><span class="hljs-params">(Sort sort)</span>;&#125;</code></pre></div><p>在建立 <code>Sort</code> 物件時，能夠設定排序的欄位與方向。為了示範用法，以下在 Controller 準備了 API，透過 query string 接收排序方式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@GetMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Student&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> String sortField,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> String sortDirection</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-type">Sort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> createSort(sortField, sortDirection);        List&lt;Student&gt; students = studentRepository.find(sort);        <span class="hljs-keyword">return</span> ResponseEntity.ok(students);    &#125;        <span class="hljs-keyword">private</span> Sort <span class="hljs-title function_">createSort</span><span class="hljs-params">(String field, String direction)</span> &#123;        <span class="hljs-keyword">if</span> (field == <span class="hljs-literal">null</span> &amp;&amp; direction == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> Sort.unsorted();        &#125;        <span class="hljs-keyword">if</span> (field == <span class="hljs-literal">null</span> ^ direction == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> Sort.unsorted();        &#125;        Sort.Order order;        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;asc&quot;</span>.equalsIgnoreCase(direction)) &#123;            order = Sort.Order.asc(field);        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;desc&quot;</span>.equalsIgnoreCase(direction)) &#123;            order = Sort.Order.desc(field);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">return</span> Sort.unsorted();        &#125;        <span class="hljs-keyword">return</span> Sort.by(List.of(order));    &#125;&#125;</code></pre></div><p>排序的欄位與方向必須一起提供，或兩者都不提供。若有不合理的值，則呼叫 <code>Sort.unsorted</code> 方法，視為不排序。</p><p>呼叫 <code>Sort.Order.asc</code> 或 <code>Sort.Order.desc</code> 方法，並傳入欄位名稱，分別可建立遞增或遞減的排序方式，其型態為 <code>Order</code>。</p><p>將一至多個 <code>Order</code> 物件傳入 <code>Sort.by</code> 方法，可得到 <code>Sort</code> 物件。它代表整體的排序規則，實現多重排序也不成問題。</p><h3 id="（二）分頁"><a href="#（二）分頁" class="headerlink" title="（二）分頁"></a>（二）分頁</h3><p>當資料量太多，實務上會利用「分頁」（pagination）的做法，分批從資料庫取得資料，避免造成資料庫、應用程式或傳輸上的負擔。</p><p>分頁通常會與排序一起使用。例如先將資料根據名字欄位做遞增排序，接著每 10 筆資料當作一頁。我們可選擇要取第 1 頁（第 1 ~ 10 筆）、第 2 頁（第 11 ~ 20 筆），依此類推。</p><p>要透過 repository 的方法進行排序與分頁，需在方法傳入 <code>Pageable</code> 型態的參數。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StudentRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;Student, String&gt; &#123;        <span class="hljs-meta">@Query(&quot;&#123;&#125;&quot;)</span>    List&lt;Student&gt; <span class="hljs-title function_">find</span><span class="hljs-params">(Pageable pageable)</span>;&#125;</code></pre></div><p><code>Pageable</code> 是一個介面，而 Spring Data 內建了叫做 <code>PageRequest</code> 的實作類別。</p><p>呼叫 <code>PageRequest.of</code> 方法，依序傳入「第幾頁」、「每頁筆數」，以及前面提到的 <code>Sort</code> 物件，就能建立出 <code>PageRequest</code> 物件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> StudentRepository studentRepository;        <span class="hljs-meta">@GetMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Student&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> String sortField, <span class="hljs-meta">@RequestParam(required = false)</span> String sortDirection,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(required = false)</span> Integer page, <span class="hljs-meta">@RequestParam(required = false)</span> Integer size</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-type">Sort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> createSort(sortField, sortDirection);        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> createPageable(page, size, sort);        List&lt;Student&gt; students = studentRepository.find(pageable);        <span class="hljs-keyword">return</span> ResponseEntity.ok(students);    &#125;        <span class="hljs-keyword">private</span> Pageable <span class="hljs-title function_">createPageable</span><span class="hljs-params">(Integer page, Integer size, Sort sort)</span> &#123;        <span class="hljs-keyword">if</span> (page == <span class="hljs-literal">null</span> &amp;&amp; size == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> Pageable.unpaged(sort);        &#125;        <span class="hljs-keyword">if</span> (page == <span class="hljs-literal">null</span> ^ size == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> Pageable.unpaged(sort);        &#125;        <span class="hljs-keyword">return</span> PageRequest.of(page, size, sort);    &#125;        <span class="hljs-keyword">private</span> Sort <span class="hljs-title function_">createSort</span><span class="hljs-params">(String field, String direction)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>分頁的頁數與每頁筆數，同樣也必須一起提供，或兩者都不提供。若有不合理的值，則呼叫 <code>Pageable.unpaged</code> 方法，視為不分頁。</p><h2 id="四、因應變化多端的查詢條件"><a href="#四、因應變化多端的查詢條件" class="headerlink" title="四、因應變化多端的查詢條件"></a>四、因應變化多端的查詢條件</h2><h3 id="（一）背景"><a href="#（一）背景" class="headerlink" title="（一）背景"></a>（一）背景</h3><p>看完這篇文章後，我們在 repository 中設計了許多方法。不知讀者是否有察覺到，實務上面對不同的需求，就會有各式各樣的查詢條件，並且有不同的排序與分頁方式。</p><p>舉例來說，假設有一支 API 是 <code>GET /students</code>，用途是查詢多筆資料，那它可能會支援大量的 query string。例如：信箱、手機、年級範圍、生日範圍、證照種類及其分數等。以下為示意程式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@GetMapping(&quot;/students&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Student&gt;&gt; <span class="hljs-title function_">getStudents</span><span class="hljs-params">(<span class="hljs-meta">@ModelAttribute</span> StudentRequestParam param)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>此處將可能收到的 query string 封裝成如下的物件：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentRequestParam</span> &#123;    <span class="hljs-comment">// sort and pagination</span>    <span class="hljs-keyword">private</span> String sortField;    <span class="hljs-keyword">private</span> String sortDirection;    <span class="hljs-keyword">private</span> Integer page;    <span class="hljs-keyword">private</span> Integer size;        <span class="hljs-comment">// customized parameters</span>    <span class="hljs-keyword">private</span> String email;    <span class="hljs-keyword">private</span> String phone;    <span class="hljs-keyword">private</span> Integer gradeFrom;    <span class="hljs-keyword">private</span> Integer gradeTo;    <span class="hljs-keyword">private</span> LocalDate birthdayFrom;    <span class="hljs-keyword">private</span> LocalDate birthdayTo;    <span class="hljs-keyword">private</span> String certType;    <span class="hljs-keyword">private</span> Integer certScoreFrom;    <span class="hljs-keyword">private</span> Integer certScoreTo;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>當查詢條件複雜一點，前端就會傳遞各種 query string 的組合給 API。若後端總是 case by case，在 repository 設計新方法來因應，並在程式中判斷要呼叫哪一個 repository 方法，那會沒完沒了。</p><p>在商業邏輯中，透過 Spring Data 的 repository 進行簡單的查詢是很便利的。然而後端若想兼容各種 query string 的組合，條件寫死的 repository 方法有時並不好用。</p><h3 id="（二）MongoTemplate-簡介"><a href="#（二）MongoTemplate-簡介" class="headerlink" title="（二）MongoTemplate 簡介"></a>（二）MongoTemplate 簡介</h3><p>根據筆者在前公司的經驗，會使用 <code>MongoTemplate</code> 元件，並搭配動態產生的條件進行複雜查詢，以下是一些用法。</p><p>假設查詢條件是「2 年級的學生」，且不做排序與分頁，則示意程式如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;    <span class="hljs-keyword">private</span> List&lt;Student&gt; <span class="hljs-title function_">foo</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> Criteria.where(<span class="hljs-string">&quot;grade&quot;</span>).is(<span class="hljs-number">2</span>);        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageable</span> <span class="hljs-operator">=</span> Pageable.unpaged();        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(criteria).with(pageable);        <span class="hljs-keyword">return</span> mongoTemplate.find(query, Student.class);    &#125;&#125;</code></pre></div><p>假設查詢條件是「多益分數達 900 分的 1 年級學生」，則示意程式如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;    <span class="hljs-keyword">private</span> List&lt;Student&gt; <span class="hljs-title function_">foo</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">Criteria</span> <span class="hljs-variable">certCriteria</span> <span class="hljs-operator">=</span> Criteria                .where(<span class="hljs-string">&quot;certificates&quot;</span>)                .elemMatch(                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Criteria</span>().andOperator(                                Criteria.where(<span class="hljs-string">&quot;type&quot;</span>).is(<span class="hljs-string">&quot;TOEIC&quot;</span>),                                Criteria.where(<span class="hljs-string">&quot;score&quot;</span>).gte(<span class="hljs-number">900</span>)                        )                );        <span class="hljs-type">Criteria</span> <span class="hljs-variable">gradeCriteria</span> <span class="hljs-operator">=</span> Criteria.where(<span class="hljs-string">&quot;grade&quot;</span>).is(<span class="hljs-number">1</span>);        <span class="hljs-type">Criteria</span> <span class="hljs-variable">allCriteria</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Criteria</span>().andOperator(List.of(gradeCriteria, certCriteria));        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(allCriteria);        <span class="hljs-keyword">return</span> mongoTemplate.find(query, Student.class);    &#125;&#125;</code></pre></div><p>從範例中可看出，透過 Criteria 物件，能夠以程式碼動態建立出查詢條件。</p><p>筆者在「<a href="https://ithelp.ithome.com.tw/articles/10339546">【Elasticsearch】使用 Java API Client 完成簡易搜尋框架</a>」文章中，有刻過一套動態產生條件的查詢流程。以下提供當時的實作思路，供讀者參考：</p><ol><li>將所有 query string 封裝成一個物件，並透過 Java 的「反射」（reflection）轉換成泛用的 Map 資料結構。</li><li>處理排序與分頁的 query string。</li><li>處理需「客製化」的 query string，如範圍條件、內部欄位條件。</li><li>其餘 query string 視為欄位的相等條件。</li><li>將所有條件以 AND 邏輯串接起來。</li><li>執行查詢。</li></ol><p>本節只是簡單介紹用法。至於 <code>MongoTemplate</code> 元件的配置方式，以及要如何開發出通用且易於擴充的查詢流程，讀者得自行去打造。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch08.3-mongo-repository-customize-query">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-data-mongodb-repository-crud/" target="_blank">【Spring Boot】第8.2課－使用 Spring Data 存取 MongoDB 資料庫，進行基本 CRUD 操作</a></p><p>下一課：<a href="/articles/spring-boot-setup-mysql-and-introduce-jpa/" target="_blank">【Spring Boot】第9.1課－準備 MySQL 資料庫與認識 Spring Data JPA</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第8.1課－MongoDB 介紹與準備資料庫環境</title>
    <link href="/articles/spring-boot-mongodb-introduction-and-setup/"/>
    <url>/articles/spring-boot-mongodb-introduction-and-setup/</url>
    
    <content type="html"><![CDATA[<p>後端程式需要透過資料庫來儲存與查詢資料。在先前的文章，範例程式都是以 Java 的 Map 資料結構來暫存，一旦重新啟動程式，資料便消失了。</p><p>在第 8 課系列中，本文首先會介紹 MongoDB 這款資料庫，並在 Spring Boot 中確認可以連接上。接著介紹基本語法，讓讀者在後續的練習中，知道如何在資料庫中查看資料，以便確認結果。</p><hr><h2 id="一、MongoDB-介紹"><a href="#一、MongoDB-介紹" class="headerlink" title="一、MongoDB 介紹"></a>一、MongoDB 介紹</h2><h3 id="（一）什麼是-NoSQL"><a href="#（一）什麼是-NoSQL" class="headerlink" title="（一）什麼是 NoSQL"></a>（一）什麼是 NoSQL</h3><p>提到資料庫，讀者可能會先聯想到如 MySQL、SQL Server 與 Oracle 等常見的關聯式資料庫。這種資料庫，會透過資料表設計來定義資料規格。也透過約束（constraint）來要求不同表的資料必須能保持關聯。</p><p>與之相對的是「NoSQL」（Not Only SQL），使用上不需要嚴格地去設計資料表和約束關係。以下列出幾種常見的 NoSQL，它們都有各自適用的場景。</p><ul><li>MongoDB：使用 JSON 格式儲存資料，故內容可直接與程式物件對應。適合希望能隨著需求，靈活調整資料欄位的系統。此外也易於進行「反正規化」，若設計得當，有助於應用程式更快地得到查詢結果。</li><li>Redis：會以「鍵值對」（key-value pair）的形式，來儲存每一筆資料。由於運行時，資料會載入到記憶體中，因此適合作為快取的用途。</li><li>Elasticsearch：同樣使用 JSON 格式儲存資料。本身是一種「全文檢索引擎」，除了一般查詢，更大的特色是提供關鍵字查詢與相關度評分的功能。適合用來開發站內搜尋與推薦系統。</li></ul><h3 id="（二）集合與文件"><a href="#（二）集合與文件" class="headerlink" title="（二）集合與文件"></a>（二）集合與文件</h3><p>在關聯式資料庫中，會使用「資料表」（table）來儲存資料，而一筆資料稱為「資料列」（row）。</p><p>在 MongoDB 中，則使用其他名詞來表達這兩個概念。「集合」（collection）對應到資料表，而「文件」（document）對應到資料列。換句話說，文件會以 JSON 格式記錄資料內容，而集合會儲存許多文件。</p><p>MongoDB 會為每一筆文件產生叫做「_id」的欄位，它相當於資料的主鍵，不會有重複值。其資料型態預設為特有的「Object Id」，值由 24 個 0～9 與 a～f 字元組成。值的產生與當下時間有關，因此有遞增的現象。</p><p>後續在使用 Spring Boot 串接 MongoDB 時，文件還會被自動加入叫做「_class」的欄位，它的值會是 Java 類別的 package 路徑。這是為了在程式查詢資料時，能夠將文件內容轉換成正確的 Java 物件。</p><h2 id="二、準備-MongoDB-環境"><a href="#二、準備-MongoDB-環境" class="headerlink" title="二、準備 MongoDB 環境"></a>二、準備 MongoDB 環境</h2><h3 id="（一）Docker-容器"><a href="#（一）Docker-容器" class="headerlink" title="（一）Docker 容器"></a>（一）Docker 容器</h3><p>讀者可在命令列（command line）環境下，透過 Docker 指令啟動 MongoDB 的服務。</p><div class="code-wrapper"><pre><code class="hljs sh">docker run -d --name <span class="hljs-string">&quot;MongoDB_4.4.29&quot;</span> -p 27017:27017 mongo:4.4.29</code></pre></div><p>以上取用的 MongoDB 版本為 4.4.29。容器取名為「MongoDB_4.4.29」，運行在 27017 的 port 號上。</p><p>其他版本可參考 <a href="https://hub.docker.com/_/mongo">Docker Hub</a>。關於 Docker 的操作，本文將不詳細介紹。</p><h3 id="（二）圖形化介面工具"><a href="#（二）圖形化介面工具" class="headerlink" title="（二）圖形化介面工具"></a>（二）圖形化介面工具</h3><p>為了直接查詢資料庫中的資料，或者進行寫入，讀者可安裝圖形化介面（GUI）工具。本文選擇「<a href="https://nosqlbooster.com/downloads">NoSQL Booster</a>」。</p><p>開啟 GUI 後，點擊左上方的「Connect」按鈕，會出現管理資料庫連線設定的視窗。若讀者想存取不同伺服器上的資料庫，就能在這裡建立多個需要的連線（connection）。<br><img src="https://chikuwacode.github.io/articles/spring-boot-mongodb-introduction-and-setup/nosqlbooster-connections.png"></p><p>按下「Create」按鈕，可填寫設定並建立一個連線。<br><img src="https://chikuwacode.github.io/articles/spring-boot-mongodb-introduction-and-setup/nosqlbooster-connection-editor-basic.png"></p><p>在上圖中，「Server」欄位填寫的是資料庫的位址與 port 號。而「Name」欄位是為這個連線命名，方便我們在 GUI 辨識。</p><p>最後按下「Save &amp; Connect」按鈕，就能連線到資料庫。</p><h3 id="（三）建立資料庫"><a href="#（三）建立資料庫" class="headerlink" title="（三）建立資料庫"></a>（三）建立資料庫</h3><p>按下 GUI 上方的「SQL」按鈕，可開啟查詢視窗。下圖撰寫了兩句語法。<br><img src="https://chikuwacode.github.io/articles/spring-boot-mongodb-introduction-and-setup/nosqlbooster-use-query-to-create-database-collection.png"></p><p>使用 <code>use</code>，可切換到指定的資料庫，即便不存在也可切換。此處選擇叫做「school」的資料庫。</p><p>使用 <code>db.createCollection</code>，可在資料庫中建立集合（collection），此處建立叫做「student」的集合。</p><div class="code-wrapper"><pre><code class="hljs javascript">use <span class="hljs-string">&quot;school&quot;</span>db.<span class="hljs-title function_">createCollection</span>(<span class="hljs-string">&quot;student&quot;</span>);</code></pre></div><p>按下「Run」按鈕，就會執行視窗中的全部指令。由於 school 這個資料庫中開始有內容了，此時它才會被建立出來。</p><p>以上這些操作，其實不透過指令，也能藉由 GUI 完成，讀者可自行探索。</p><h2 id="三、準備程式專案"><a href="#三、準備程式專案" class="headerlink" title="三、準備程式專案"></a>三、準備程式專案</h2><p>本節讓我們在 Spring Boot 專案中串接資料庫。請在 pom.xml 檔案添加 MongoDB 的依賴。</p><div class="code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p>接著在專案的「src\main\resources」路徑下，找到「application.properties」配置檔，並在裡頭添加連線字串。以下是在本地連線到叫做「school」的資料庫。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.data.mongodb.uri</span>=<span class="hljs-string">mongodb://localhost:27017/school</span></code></pre></div><p>若讀者未來要在 Docker 容器中運行 Spring Boot，可能需將網域從「localhost」改為「host.docker.internal」，如下：</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">spring.data.mongodb.uri</span>=<span class="hljs-string">mongodb://host.docker.internal:27017/school</span></code></pre></div><p>MongoDB 的 library 會從配置檔中讀取指定 key 的設定值，做為連線字串。</p><p>最後請啟動 Spring Boot。若 console 沒有出現 exception 訊息，代表有成功連線到 MongoDB 的服務。若連線不到，可能會看到如下的訊息。</p><div class="code-wrapper"><pre><code class="hljs text">com.mongodb.MongoSocketOpenException: Exception opening socket...Caused by: java.net.ConnectException: Connection refused: no further information...</code></pre></div><h2 id="四、基本語法介紹"><a href="#四、基本語法介紹" class="headerlink" title="四、基本語法介紹"></a>四、基本語法介紹</h2><p>為了讓讀者可以透過查詢，直接在 GUI 上確認當前資料庫中的資料，本節將介紹一些語法。在撰寫指令操作 MongoDB 時，絕大多數都是使用 Javascript 語言。</p><p>以下是插入多筆資料到叫做「student」的集合。而資料庫會自動產生「_id」欄位的值。</p><div class="code-wrapper"><pre><code class="hljs javascript">db.<span class="hljs-property">student</span>.<span class="hljs-title function_">insertMany</span>(    [        &#123;            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Vincent&quot;</span>,            <span class="hljs-string">&quot;majority&quot;</span>: <span class="hljs-string">&quot;資訊管理&quot;</span>,            <span class="hljs-string">&quot;contact&quot;</span>: &#123;                <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;vincent@school.com&quot;</span>,                <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-string">&quot;0911111111&quot;</span>            &#125;        &#125;,        &#123;            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;Dora&quot;</span>,            <span class="hljs-string">&quot;majority&quot;</span>: <span class="hljs-string">&quot;財務金融&quot;</span>,            <span class="hljs-string">&quot;contact&quot;</span>: &#123;                <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;dora@school.com&quot;</span>,                <span class="hljs-string">&quot;phone&quot;</span>: <span class="hljs-string">&quot;0922222222&quot;</span>            &#125;        &#125;    ]);</code></pre></div><p>以下是查詢集合中的所有資料。在大括號 <code>&#123; &#125;</code> 中會寫上查詢條件，此處為無條件。</p><div class="code-wrapper"><pre><code class="hljs javascript">db.<span class="hljs-property">student</span>.<span class="hljs-title function_">find</span>(&#123;&#125;);</code></pre></div><p>以下是查詢「_id」欄位值為某個 Object Id 的資料。</p><div class="code-wrapper"><pre><code class="hljs javascript">db.<span class="hljs-property">student</span>.<span class="hljs-title function_">find</span>(    &#123;        <span class="hljs-string">&quot;_id&quot;</span>: <span class="hljs-title class_">ObjectId</span>(<span class="hljs-string">&quot;6640d57d4825f6a549d85c08&quot;</span>)    &#125;);</code></pre></div><p>以下是查詢「majority」欄位值，等於其中一個陣列元素的資料。</p><div class="code-wrapper"><pre><code class="hljs javascript">db.<span class="hljs-property">student</span>.<span class="hljs-title function_">find</span>(    &#123;        <span class="hljs-string">&quot;majority&quot;</span>: &#123;            <span class="hljs-string">&quot;$in&quot;</span>: [<span class="hljs-string">&quot;資訊管理&quot;</span>, <span class="hljs-string">&quot;會計&quot;</span>]        &#125;    &#125;);</code></pre></div><p>以下是查詢「contact」物件欄位中的「email」欄位，是某個值的資料。</p><div class="code-wrapper"><pre><code class="hljs javascript">db.<span class="hljs-property">student</span>.<span class="hljs-title function_">find</span>(    &#123;        <span class="hljs-string">&quot;contact.email&quot;</span>: <span class="hljs-string">&quot;vincent@school.com&quot;</span>    &#125;);</code></pre></div><p>以下是刪除集合中的所有資料。</p><div class="code-wrapper"><pre><code class="hljs javascript">db.<span class="hljs-property">student</span>.<span class="hljs-title function_">deleteMany</span>(&#123;&#125;);</code></pre></div><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch08.1-mongodb-introduction-and-setup">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-construct-bean-programmatically/" target="_blank">【Spring Boot】第7課－手動進行元件的初始化</a></p><p>下一課：<a href="/articles/spring-boot-data-mongodb-repository-crud/" target="_blank">【Spring Boot】第8.2課－使用 Spring Data 存取 MongoDB 資料庫，進行基本 CRUD 操作</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第5課－元件的控制反轉、依賴注入與抽換</title>
    <link href="/articles/spring-boot-bean-ioc-di-and-swap/"/>
    <url>/articles/spring-boot-bean-ioc-di-and-swap/</url>
    
    <content type="html"><![CDATA[<p>控制反轉（IoC）與依賴注入（DI）是 Spring Boot 中的重要觀念。而筆者選擇在<a href="/articles/spring-boot-three-tier-architecture/" target="_blank">第 4 課（三層式架構）</a>結束，練習用專案的架構成形後，才開始介紹。</p><p>本文首先透過範例專案，讓讀者知道裡頭那些用來封裝程式邏輯的物件，其實存在著依賴關係。接著說明在後端程式運行期間，為何要求這些物件只能存在唯一一個，以及如何做到。</p><p>有了先備的概念後，筆者再經由這些議題，開始介紹控制反轉與依賴注入。最後引進物件導向的「多型」特性，示範以介面來操作物件，有助於實作細節的抽換。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch04-three-tier-architecture">點我</a>。</p><h2 id="一、依賴關係"><a href="#一、依賴關係" class="headerlink" title="一、依賴關係"></a>一、依賴關係</h2><p>在介紹控制反轉與依賴注入的概念前，讓我們先看看範例專案大概的架構。</p><p>以下是產品和使用者的 Repository 層，它們使用 Java 的 Map 資料結構代替真實 DB。並且提供一些方法供外部呼叫，藉此對資料做存取。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, ProductPO&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">public</span> ProductPO <span class="hljs-title function_">getOneById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> productMap.get(id);    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, UserPO&gt; userMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">public</span> UserPO <span class="hljs-title function_">getOneById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> userMap.get(id);    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>以下是產品的 Service 層，提供了商業邏輯。該類別擁有全域的 Repository 物件，讓商業邏輯的程式碼呼叫。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ProductRepository</span> <span class="hljs-variable">productRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductRepository</span>();    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">UserRepository</span> <span class="hljs-variable">userRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRepository</span>();    <span class="hljs-keyword">public</span> ProductVO <span class="hljs-title function_">getProductVO</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">productPO</span> <span class="hljs-operator">=</span> productRepository.getOneById(id);        <span class="hljs-comment">// ...</span>        <span class="hljs-type">var</span> <span class="hljs-variable">userPO</span> <span class="hljs-operator">=</span> userRepository.getOneById(productPO.getCreatorId());        <span class="hljs-comment">// ...</span>        <span class="hljs-keyword">return</span> productVO;    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>以下是 Controller 層，提供了 RESTful API。該類別擁有全域的 Service 物件。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(path = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ProductService</span> <span class="hljs-variable">productService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductService</span>();    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>讀者可以看出它們之間的關係：Controller 呼叫 Service；而 Service 呼叫 Repository。這種「誰呼叫誰」的關係，正式的稱呼為「依賴」（depend）。</p><p>附帶一提，範例專案為了簡便，並未實作使用者的 Controller 和 Service。不然原則上也會是「UserController」依賴「UserService」；而 UserService 依賴 UserRepository 的關係。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">UserService</span> <span class="hljs-variable">userService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserService</span>();    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">UserRepository</span> <span class="hljs-variable">userRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRepository</span>();    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><h2 id="二、元件與單例的概念"><a href="#二、元件與單例的概念" class="headerlink" title="二、元件與單例的概念"></a>二、元件與單例的概念</h2><p>本節將討論，同樣是封裝程式邏輯，為何要特別建立物件呢？並且向讀者介紹「單例」（singleton）的概念。</p><h3 id="（一）元件"><a href="#（一）元件" class="headerlink" title="（一）元件"></a>（一）元件</h3><p>無論是 ProductService、ProductRepository 或 UserRepository，雖然它們都被建立成物件，但目的都是封裝程式邏輯，而非攜帶資料到處傳遞。</p><p>像這種用途的物件，我們給它一個更正式的稱呼，叫做「元件」，英文為「bean」或「component」。元件可以提供方法，來實現商業邏輯、資料處理或存取 DB 等功能。</p><p>既然只是用來封裝邏輯，那為什麼不宣告成靜態（static）的方法就好呢？這樣連物件都不必建立了。示意如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ProductService</span><span class="hljs-params">()</span> &#123;&#125;    <span class="hljs-comment">// 宣告為靜態方法</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProductVO <span class="hljs-title function_">getProductVO</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(path = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;        <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;ProductVO&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId)</span> &#123;        <span class="hljs-comment">// 呼叫靜態方法</span>        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> ProductService.getProductVO(productId);        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>要知道，系統功能是可以很複雜的，若元件一律提供靜態方法，那就不能善用物件導向中，繼承與多型的特性了。</p><h3 id="（二）單例"><a href="#（二）單例" class="headerlink" title="（二）單例"></a>（二）單例</h3><p>筆者先前建立元件的全域變數，其用意是避免每呼叫一次方法，就建立一次元件，示意如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-keyword">public</span> ProductVO <span class="hljs-title function_">getProductVO</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">productPO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductRepository</span>().getOneById(id);        <span class="hljs-comment">// ...</span>        <span class="hljs-type">var</span> <span class="hljs-variable">userPO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRepository</span>().getOneById(productPO.getCreatorId());        <span class="hljs-comment">// ...</span>    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>建立物件會在記憶體佔一個空間，而用完就又要回收，其實沒必要如此反覆。更別提在用戶多的系統，伺服器是很忙碌的。</p><p>為了確保應用程式運行期間，特定類別的物件只會存在一個，並能讓各個地方共享，於是出現了「單例」的概念。「單」是單一的意思，而「例」是實例（instance）。</p><p>讀者在網路上，能找到各種單例的程式寫法，以下是簡單的範例：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ProductRepository</span> <span class="hljs-variable">INSTANCE</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductRepository</span>();    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ProductRepository</span><span class="hljs-params">()</span> &#123;        <span class="hljs-comment">// 初始化...</span>    &#125;    <span class="hljs-comment">// 提供取得唯一物件的方法</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProductRepository <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">return</span> INSTANCE;    &#125;&#125;</code></pre></div><p>但也能顧及執行緒安全而變得複雜：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ProductRepository INSTANCE;    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ProductRepository</span><span class="hljs-params">()</span> &#123;        <span class="hljs-comment">// 初始化...</span>    &#125;    <span class="hljs-comment">// 提供取得唯一物件的方法</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProductRepository <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">synchronized</span> (ProductRepository.class) &#123;                <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-literal">null</span>) &#123;                    INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductRepository</span>();                &#125;            &#125;        &#125;        <span class="hljs-keyword">return</span> INSTANCE;    &#125;&#125;</code></pre></div><p>元件的依賴關係，可能會無意間建立出多餘的物件。而手動實現單例，又很不方便。幸好 Spring Boot 有提供「控制反轉」和「依賴注入」的功能，來解決這些問題。</p><h2 id="三、控制反轉（Inversion-of-Control，IoC）"><a href="#三、控制反轉（Inversion-of-Control，IoC）" class="headerlink" title="三、控制反轉（Inversion of Control，IoC）"></a>三、控制反轉（Inversion of Control，IoC）</h2><p>在 Java 語言中建立物件的方式，是在想要的地方使用 new 關鍵字。而「控制反轉」的精神，則是將建立物件的工作轉移給外界。</p><p>也就是說，無論是透過建構子或 setter 方法，只要物件並非在類別內部建立，而是由外部提供，那就可以稱之為控制反轉。</p><p>那要如何讓 Spring Boot 建立單例物件呢？做法是在類別冠上特定的注解（annotation）。Spring Boot 啟動時，會透過 Java 的「反射」（reflection）機制，掃描專案中的哪些類別具有這些注解。</p><p>可使用的注解如下，它們有不同的涵義。</p><ul><li><code>@Controller</code>：代表提供 Web API 的表現層。<code>@RestController</code> 注解便是繼承於它。於<a href="/articles/spring-boot-implement-restful-api-in-controller/" target="_blank">第 3.1 課</a>介紹。</li><li><code>@Service</code>：代表商業邏輯層。</li><li><code>@Repository</code>：代表資料存取層。</li><li><code>@Configuration</code>：代表這裡搭配 <code>@Value</code> 注解，存放了「application.properties」配置檔的值。於<a href="/articles/spring-boot-application-properties-configuration/" target="_blank">第 6 課</a>介紹。或者搭配 <code>@Bean</code> 注解，控制元件的初始化過程。於<a href="/articles/spring-boot-construct-bean-programmatically/" target="_blank">第 7 課</a>介紹。</li><li><code>@Component</code>：以上 4 項皆繼承自此注解，是泛用的選擇。</li></ul><p>接著，我們在範例專案中的元件類別，冠上適當的注解。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepository</span> &#123;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>如此一來，Spring Boot 建立出單例物件後，便會放在記憶體中管理。這個地方稱為「IoC 容器」。為了方便說明，筆者後續都用「元件」來指稱 IoC 容器中的單例物件。</p><h2 id="四、依賴注入（Dependency-Injection，DI）"><a href="#四、依賴注入（Dependency-Injection，DI）" class="headerlink" title="四、依賴注入（Dependency Injection，DI）"></a>四、依賴注入（Dependency Injection，DI）</h2><h3 id="（一）介紹"><a href="#（一）介紹" class="headerlink" title="（一）介紹"></a>（一）介紹</h3><p>第一節展示的範例專案，說明了元件的依賴關係。而依賴注入便是要取代原先在程式碼中 new 物件的做法。</p><p>類別必須具備前面提到的注解，才能被建立為元件。而 Spring Boot 可以把這些元件「注入」到其他的元件。</p><p>範例程式中的 ProductService 依賴 ProductRepository 與 UserRepository。因此這些 Repository 元件，就會被注入到 ProductService 元件中。而 ProductController 又依賴 ProductService，故 Controller 也會被注入。</p><p>我們可以使用 <code>@Autowired</code> 注解，讓 Spring Boot 注入元件。根據使用此注解的方式，又分為「欄位注入」與「建構子注入」。</p><h3 id="（二）欄位注入（Field-Injection）"><a href="#（二）欄位注入（Field-Injection）" class="headerlink" title="（二）欄位注入（Field Injection）"></a>（二）欄位注入（Field Injection）</h3><p>欄位注入的做法，是對元件的全域變數冠上 <code>@Autowired</code> 注解。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(path = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ProductService productService;        <span class="hljs-comment">// ...</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> ProductRepository productRepository;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">private</span> UserRepository userRepository;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>Spring Boot 會先建立出所有的元件，接著才把每個元件所依賴的其他元件逐一注入。因此元件可能有短暫時間處於初始化不完整的空窗期，這是一項缺點。而優點是寫法方便。</p><h3 id="（三）建構子注入（Constructor-Injection）"><a href="#（三）建構子注入（Constructor-Injection）" class="headerlink" title="（三）建構子注入（Constructor Injection）"></a>（三）建構子注入（Constructor Injection）</h3><p>建構子注入的做法，是宣告包含所有依賴的建構子，再對其加上 <code>@Autowired</code> 注解。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ProductRepository productRepository;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserRepository userRepository;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProductService</span><span class="hljs-params">(ProductRepository productRepository, UserRepository userRepository)</span> &#123;        <span class="hljs-built_in">this</span>.productRepository = productRepository;        <span class="hljs-built_in">this</span>.userRepository = userRepository;    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>Spring Boot 在建立一個元件時，會先確認它所依賴的其他元件是否都建立好了。是的話，便從建構子注入進來。否則就先建立其他元件。意即建立與注入元件是同時進行的。</p><p>這項做法的缺點是讓程式碼變得較冗長。然而瑕不掩瑜，優點是確保元件在被使用時，已經處於完整初始化的狀態。另外也有利於撰寫單元測試（unit test），因為我們可以將設計好的「模擬物件」（mock）由建構子傳入。</p><p>Spring 官方也建議採取這樣的注入方式。</p><h2 id="五、使用介面注入元件"><a href="#五、使用介面注入元件" class="headerlink" title="五、使用介面注入元件"></a>五、使用介面注入元件</h2><p>為了善用物件導向的「多型」特性，我們可以讓元件的類別實作「介面」。而進行依賴注入時，則以介面代替類別。這樣有助於未來更換元件時，不會影響到外部使用的方式。</p><h3 id="（一）多型呼叫"><a href="#（一）多型呼叫" class="headerlink" title="（一）多型呼叫"></a>（一）多型呼叫</h3><p>請讀者透過 Java 語言回想一下，當我們讓類別實作「介面」（interface）時，必須完成介面所定義的 public 方法。</p><p>當建立這種類別的物件時，宣告的型態可以用介面來取代類別。比方說「ArrayList」與「LinkedList」這兩種資料結構，均實作「List」介面。</p><p>用 List 宣告後，使用物件一律都是呼叫該介面所定義的方法。而不必在意實際上是 ArrayList 或者 LinkedList 在運作。示意如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;    List&lt;String&gt; arrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();    List&lt;String&gt; linkedList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();    process(arrayList);    process(linkedList);&#125;<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;    list.add(<span class="hljs-string">&quot;A&quot;</span>);    list.add(<span class="hljs-string">&quot;B&quot;</span>);    list.add(<span class="hljs-string">&quot;C&quot;</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-type">var</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;        System.out.println(list.get(i));    &#125;    list.clear();&#125;</code></pre></div><p>回到範例專案，ProductRepository 使用 Map 資料結構來儲存資料。我們同樣也能為 Repository 層設計一個介面，並開發出其他儲存方式的元件。例如用 List 儲存，甚至連接到真實的 DB。</p><p>而 ProductService 則固定以該介面操作 Repository 元件。</p><h3 id="（二）實作介面注入"><a href="#（二）實作介面注入" class="headerlink" title="（二）實作介面注入"></a>（二）實作介面注入</h3><p>以下設計一個叫做「IProductRepository」的介面，並進行實作。此處為避免混淆，故將原先的 ProductRepository 改名為「MapProductRepository」，強調儲存方式。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">IProductRepository</span> &#123;    ProductPO <span class="hljs-title function_">getOneById</span><span class="hljs-params">(String id)</span>;    ProductPO <span class="hljs-title function_">insert</span><span class="hljs-params">(ProductPO product)</span>;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(ProductPO product)</span>;    <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(String id)</span>;    List&lt;ProductPO&gt; <span class="hljs-title function_">getMany</span><span class="hljs-params">(ProductRequestParameter param)</span>;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapProductRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, ProductPO&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> ProductPO <span class="hljs-title function_">getOneById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> productMap.get(id);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(String id)</span> &#123;        productMap.remove(id);    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>接著調整 ProductService，改以 IProductRepository 介面來注入。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IProductRepository productRepository;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserRepository userRepository;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProductService</span><span class="hljs-params">(IProductRepository productRepository, UserRepository userRepository)</span> &#123;        <span class="hljs-built_in">this</span>.productRepository = productRepository;        <span class="hljs-built_in">this</span>.userRepository = userRepository;    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>經過這樣的修改，ProductService 呼叫的都是 IProductRepository 介面的方法，而實際執行的是被注入元件的內部邏輯。</p><p>現在 Spring Boot 啟動時，就會尋找專案中有哪些元件實作了 IProductRepository 介面。目前只有一個，理所當然注入 MapProductRepository。</p><h2 id="六、抽換相同介面的元件"><a href="#六、抽換相同介面的元件" class="headerlink" title="六、抽換相同介面的元件"></a>六、抽換相同介面的元件</h2><p>為了說明如何在相同介面更換元件，筆者準備了另一個實作 IProductRepository 介面的元件。下面是以 List 來儲存產品資料，程式碼寫法將完全不同。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListProductRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> List&lt;ProductPO&gt; productList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>        <span class="hljs-keyword">public</span> ProductPO <span class="hljs-title function_">getOneById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> productList                .stream()                .filter(p -&gt; p.getId().equals(id))                .findFirst()                .orElse(<span class="hljs-literal">null</span>);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(String id)</span> &#123;        productList.removeIf(p -&gt; p.getId().equals(id));    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>上面的 ListProductRepository 需依照介面的規範，完成所有 public 方法。完整的範例程式，請參考文末附上的專案。</p><p>此時專案中存在多個相同介面的元件。由於 Spring Boot 不知道要注入哪一個，所以啟動會失敗，錯誤訊息節錄如下：</p><div class="code-wrapper"><pre><code class="hljs text">Parameter 0 of constructor in com.example.demo.service.ProductService required a single bean, but 2 were found:    - listProductRepository: ...    - mapProductRepository: ......Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed</code></pre></div><p>為了告訴 Spring Boot 要注入哪一個元件，我們可在其中一個類別冠上 <code>@Primary</code> 注解。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span><span class="hljs-meta">@Primary</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListProductRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IProductRepository</span> &#123;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>這會讓所有依賴 IProductRepository 介面的地方，都注入 ListProductRepository。</p><p>或者也能透過 <code>@Qualifier</code> 注解，在不同的元件注入不同的依賴。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IProductRepository productRepository;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> UserRepository userRepository;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ProductService</span><span class="hljs-params">(<span class="hljs-meta">@Qualifier(&quot;mapProductRepository&quot;)</span> IProductRepository productRepository,</span><span class="hljs-params">                          UserRepository userRepository)</span> &#123;        <span class="hljs-built_in">this</span>.productRepository = productRepository;        <span class="hljs-built_in">this</span>.userRepository = userRepository;    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>以上是在建構子注入的場合使用 <code>@Qualifier</code> 注解，需傳入「元件名稱」作為參數。</p><p>元件名稱預設是類別名稱的駝峰字。若想自定義，可在 <code>@Repository</code>、<code>@Service</code> 等元件的注解，傳入參數做設定。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Repository(&quot;mapProductRepository&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MapProductRepository</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">IProductRepository</span> &#123;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>至於在欄位注入的場合使用 <code>@Qualifier</code> 注解，則與 <code>@Autowired</code> 注解一併冠在全域變數之上即可。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-meta">@Autowired</span>    <span class="hljs-meta">@Qualifier(&quot;mapProductRepository&quot;)</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> IProductRepository productRepository;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch05-bean-ioc-di-and-swap">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-three-tier-architecture/" target="_blank">【Spring Boot】第4課－實作三層式架構的 Service 與 Repository</a></p><p>下一課：<a href="/articles/spring-boot-application-properties-configuration/" target="_blank">【Spring Boot】第6課－在 application.properties 配置檔提供設定值（以 Java Mail 為例）</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第4課－實作三層式架構的 Service 與 Repository</title>
    <link href="/articles/spring-boot-three-tier-architecture/"/>
    <url>/articles/spring-boot-three-tier-architecture/</url>
    
    <content type="html"><![CDATA[<p>在<a href="/articles/spring-boot-implement-restful-api-in-controller/" target="_blank">第 3.1 課</a>與<a href="/articles/spring-boot-use-query-string-and-header-in-controller/" target="_blank">第 3.2 課</a>，我們只有 Controller 這個地方，能撰寫程式來處理請求。然而若全部都寫在這裡，整個類別就會很龐大。</p><p>本文將介紹「三層式架構」，並搭配範例專案，點出當前做法所隱含的問題。接著進行修改，進一步將程式碼片段抽離到 Service 與 Repository 兩個層次，讓讀者體會切分的過程與思路。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch03.2-use-query-string-and-header-in-controller">點我</a>。</p><h2 id="一、範例專案概觀"><a href="#一、範例專案概觀" class="headerlink" title="一、範例專案概觀"></a>一、範例專案概觀</h2><p>在正式介紹三層式架構前，先讓我們稍微認識目前的練習用專案。</p><p>以下是 Controller 的其中兩支 API，用途是建立和取得產品資料。本文並未串接真實的 DB，故以 Java 的 Map 資料結構代替。其中 key 為產品 id，而 value 為整筆資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(path = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-comment">// 驗證資料</span>        <span class="hljs-keyword">if</span> (product.getId() == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.badRequest().build();        &#125;        <span class="hljs-comment">// 檢查合理性</span>        <span class="hljs-keyword">if</span> (productMap.containsKey(product.getId())) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.unprocessableEntity().build();        &#125;        <span class="hljs-comment">// 儲存</span>        productMap.put(product.getId(), product);        <span class="hljs-comment">// 組裝 response</span>        <span class="hljs-type">var</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> ServletUriComponentsBuilder                .fromCurrentRequestUri()                .path(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)                .build(Map.of(<span class="hljs-string">&quot;id&quot;</span>, product.getId()));        <span class="hljs-keyword">return</span> ResponseEntity.created(uri).build();    &#125;    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productMap.get(productId);        <span class="hljs-keyword">return</span> product == <span class="hljs-literal">null</span>                ? ResponseEntity.notFound().build()                : ResponseEntity.ok(product);    &#125;&#125;</code></pre></div><p>以下是目前用來攜帶產品資料的類別，包含編號、名稱與價格，共 3 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><h2 id="二、三層式架構的目的與做法"><a href="#二、三層式架構的目的與做法" class="headerlink" title="二、三層式架構的目的與做法"></a>二、三層式架構的目的與做法</h2><h3 id="（一）介紹"><a href="#（一）介紹" class="headerlink" title="（一）介紹"></a>（一）介紹</h3><p>在<a href="/articles/spring-boot-implement-restful-api-in-controller/" target="_blank">第 3.1 課</a>，筆者提到 MVC 架構是為了將不同用途的程式分門別類，不要通通寫在一起。在前後端分離的系統中，V（view）屬於前端的工作。</p><p>三層式架構的目標，是將屬於後端的 M（Model）與 C（Controller）做進一步的切分。那麼要如何進行呢？這會包含「分層」與「設計資料規格」兩項工作。</p><h3 id="（二）分層"><a href="#（二）分層" class="headerlink" title="（二）分層"></a>（二）分層</h3><p>請讀者回頭看看第一節的範例程式，createProduct 這支 API 處理方法，混合了不同目的的程式碼片段，包含：</p><ol><li>檢查 request body 是否有缺漏的資料。</li><li>檢查產品 id 是否已存在。</li><li>儲存產品資料。</li><li>建立出 response 的內容。</li></ol><p>由於這段程式並沒有很長，所以看起來還好。倘若隨著日後開發，程式碼越來越多，則未來可能會形成不易維護的現象，畢竟要閱讀一大片程式。</p><p>實務上會根據各個程式碼片段的目的，歸類為以下三層，也就是在程式中拆成三種類別。</p><ul><li>表現層：負責接收請求，接著呼叫其他程式進行處理，最後給予回應。其實指的就是 Controller，它是與前端最靠近的層次。</li><li>資料存取層：負責與 DB 進行 CRUD 的操作。類別名稱常以「Repository」或「Dao」（Data Access Object）結尾。</li><li>商業邏輯層：負責進行資料處理，類別名稱常以「Service」結尾。商業邏輯是為了滿足情境而開發出的程式邏輯，比方說「觀看產品時要知道賣家資料」、「產品不存在時要出現提示畫面」、「有人留言時要收到通知」等，這都是情境。</li></ul><p>這三個層次會透過方法呼叫來互動。原則上是 Controller 呼叫 Service，而 Service 再呼叫 Repository。</p><p>分層也未必只能分為三層，當系統太複雜，視情況再繼續細分也沒關係。以下列出幾項分層的好處：</p><ul><li>幫助我們在開發新功能，或修復問題時，判斷該從何處下手。例如沒收到 query string，要去確認 Controller 層。</li><li>隔離實作細節，限制修改程式的範圍。例如 Repository 層的儲存方式想從範例中的 Map 換成 MySQL，則只要在這一層修改即可，其他類別理論上就不必調整。</li><li>相同目的的程式碼，能被重複利用。比方說一支「取得多個產品」的程式，它就可以被「顯示產品列表」和「顯示訂單明細」這兩項功能利用。這也意味著，修改一處，所有呼叫它的地方都會生效。</li></ul><h3 id="（三）設計資料規格"><a href="#（三）設計資料規格" class="headerlink" title="（三）設計資料規格"></a>（三）設計資料規格</h3><p>再請讀者看看第一節的範例程式。Product 類別除了用於 request 與 response 的 body，同時也是儲存在 Map 的格式。</p><p>假設我們還想在 DB 紀錄產品的建立時間，於是添加叫做「createdTime」的欄位，打算由後端寫入，如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> createdTime;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>但不知道的人單獨看這個類別，搞不好會以為我們在建立與更新的 request body 中，開放前端攜帶這項時間資料呢！</p><p>再假設前端想顯示產品建立者的名字，於是我們添加「creatorName」欄位。並且經過資料庫正規化後，DB 還需紀錄使用者 id 來做關聯，欄位叫做「creatorId」，如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> createdTime;    <span class="hljs-keyword">private</span> String creatorId;    <span class="hljs-keyword">private</span> String creatorName;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>同樣的道理，別人可能感到疑惑：為何 DB 的產品資料會同時儲存使用者的 id 與名字呢，不是有做正規化嗎？</p><p>從這兩個例子可察覺，當一個類別身兼多個用途，可能造成誤解。不該把 request 和 response body 的欄位，直接套用到 DB。</p><p>架構中的三個層次，在呼叫方法時，伴隨資料的輸入與輸出。因此，除了分層之外還有一項工作，那就是設計層次間溝通的資料規格。也就是說，攜帶產品資料的類別，會依照用途而建立出多個。比方說 request 專用、response 專用、DB 專用等。</p><h2 id="三、實作不同的資料規格"><a href="#三、實作不同的資料規格" class="headerlink" title="三、實作不同的資料規格"></a>三、實作不同的資料規格</h2><p>在實作 Service 與 Repository 層之前，本節先準備好各種攜帶產品資料的類別，作為層次之間溝通的規格。</p><p>以下的 ProductCreateRequest 類別，會做為建立資料時的 request body。包含產品 id、名稱、價格與建立者 id，共 4 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductCreateRequest</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-keyword">private</span> String creatorId;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的 ProductUpdateRequest 類別，會做為更新資料時的 request body。但只允許更新名稱與價格這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductUpdateRequest</span> &#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的 ProductPO 類別，是對應到 DB 儲存的欄位。「PO」的全稱為「Persistence Object」，有持久儲存的意思。它比上述兩個 request 類別，多了建立與更新時間這 2 個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductPO</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-keyword">private</span> String creatorId;    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> createdTime;    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> updatedTime;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProductPO <span class="hljs-title function_">of</span><span class="hljs-params">(String id, String name, <span class="hljs-type">int</span> price, String creatorId)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">po</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductPO</span>();        po.id = id;        po.name = name;        po.price = price;        po.creatorId = creatorId;        po.createdTime = Instant.now().getEpochSecond();        po.updatedTime = p.createdTime;        <span class="hljs-keyword">return</span> po;    &#125;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下的 ProductVO 類別，是用來攜帶要回傳給前端的資料。「VO」的全稱為「View Object」，有展示的意思。它比 ProductPO 多了建立者名稱這個欄位。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductVO</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-keyword">private</span> String creatorId;    <span class="hljs-keyword">private</span> String creatorName;    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> createdTime;    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> updatedTime;        <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>本文想讓產品能透過 creatorId 欄位，關聯到使用者資料。因此再額外建立使用者的類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserPO</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> UserPO <span class="hljs-title function_">of</span><span class="hljs-params">(String id, String name)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserPO</span>();        u.id = id;        u.name = name;                <span class="hljs-keyword">return</span> u;    &#125;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>完成後，就能開始將原先寫在 Controller 的程式碼抽離到其他層次。過程中，也會運用這些類別來攜帶資料。</p><h2 id="四、實作-Repository-層"><a href="#四、實作-Repository-層" class="headerlink" title="四、實作 Repository 層"></a>四、實作 Repository 層</h2><h3 id="（一）宣告類別與測試資料"><a href="#（一）宣告類別與測試資料" class="headerlink" title="（一）宣告類別與測試資料"></a>（一）宣告類別與測試資料</h3><p>以下是產品和使用者的 Repository 類別。裡頭內建了測試資料，使用 Map 資料結構模擬出一個 DB。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, ProductPO&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">static</span> &#123;        Stream.of(                ProductPO.of(<span class="hljs-string">&quot;P1&quot;</span>, <span class="hljs-string">&quot;Android Development (Java)&quot;</span>, <span class="hljs-number">380</span>, <span class="hljs-string">&quot;U1&quot;</span>),                ProductPO.of(<span class="hljs-string">&quot;P2&quot;</span>, <span class="hljs-string">&quot;Android Development (Kotlin)&quot;</span>, <span class="hljs-number">420</span>, <span class="hljs-string">&quot;U2&quot;</span>)        ).forEach(p -&gt; productMap.put(p.getId(), p));    &#125;    <span class="hljs-comment">// TODO</span>&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, UserPO&gt; userMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">static</span> &#123;        Stream.of(                UserPO.of(<span class="hljs-string">&quot;U1&quot;</span>, <span class="hljs-string">&quot;Vincent&quot;</span>),                UserPO.of(<span class="hljs-string">&quot;U2&quot;</span>, <span class="hljs-string">&quot;Ivy&quot;</span>)        ).forEach(u -&gt; userMap.put(u.getId(), u));    &#125;    <span class="hljs-comment">// TODO</span>&#125;</code></pre></div><p>接下來要提供 CRUD 的方法，讓其他地方能藉此存取 DB。</p><h3 id="（二）取得一筆資料"><a href="#（二）取得一筆資料" class="headerlink" title="（二）取得一筆資料"></a>（二）取得一筆資料</h3><p>以下是在產品和使用者的 Repository，實作「透過 id 取得一筆資料」的方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, ProductPO&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> ProductPO <span class="hljs-title function_">getOneById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> productMap.get(id);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, UserPO&gt; userMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> UserPO <span class="hljs-title function_">getOneById</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-keyword">return</span> userMap.get(id);    &#125;&#125;</code></pre></div><p>此處很單純地從 Map 取出資料。而回傳的型態是代表 DB 欄位的 ProductPO 與 UserPO。</p><h3 id="（三）新增資料"><a href="#（三）新增資料" class="headerlink" title="（三）新增資料"></a>（三）新增資料</h3><p>以下是實作「新增產品資料」的方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, ProductPO&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> ProductPO <span class="hljs-title function_">insert</span><span class="hljs-params">(ProductPO product)</span> &#123;        <span class="hljs-keyword">if</span> (product.getId() == <span class="hljs-literal">null</span>) &#123;            product.setId(generateRandomId());        &#125;        <span class="hljs-keyword">if</span> (productMap.containsKey(product.getId())) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();        &#125;        product.setCreatedTime(Instant.now().getEpochSecond());        product.setUpdatedTime(product.getCreatedTime());        productMap.put(product.getId(), product);        <span class="hljs-keyword">return</span> product;    &#125;        <span class="hljs-keyword">private</span> String <span class="hljs-title function_">generateRandomId</span><span class="hljs-params">()</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">uuid</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();        <span class="hljs-keyword">return</span> uuid.substring(<span class="hljs-number">0</span>, uuid.indexOf(<span class="hljs-string">&quot;-&quot;</span>));    &#125;&#125;</code></pre></div><p>此處設計成產品 id 可由外部自行提供，或者讓內部產生隨機字串。接著 Repository 層會寫入資料的建立時間，隨後儲存。</p><p>若 id 發生重複，則透過拋出例外（exception）的方式，停止處理這項請求。這裡暫時使用 <code>RuntimeException</code>，我們留到第五節再來調整。</p><h3 id="（四）更新與刪除資料"><a href="#（四）更新與刪除資料" class="headerlink" title="（四）更新與刪除資料"></a>（四）更新與刪除資料</h3><p>以下是更新與刪除產品資料的方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, ProductPO&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(ProductPO product)</span> &#123;        <span class="hljs-keyword">if</span> (!productMap.containsKey(product.getId())) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();        &#125;        product.setUpdatedTime(Instant.now().getEpochSecond());        productMap.put(product.getId(), product);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteById</span><span class="hljs-params">(String id)</span> &#123;        productMap.remove(id);    &#125;&#125;</code></pre></div><p>更新時，我們將傳入 Repository 的 ProductPO 物件，視為已經攜帶著新的資料。在實作上，會先透過 id 確認該資料是否存在。是的話，就寫入更新時間後儲存，否則拋出 exception 來中止。</p><p>刪除時，則直接從 Map 移除，不做檢查。站在 Repository 層最靠近 DB 的立場，它只要確保 Map 不要有該 id 的資料即可。</p><h3 id="（五）取得多筆資料"><a href="#（五）取得多筆資料" class="headerlink" title="（五）取得多筆資料"></a>（五）取得多筆資料</h3><p>基本上就是將原先寫在 Controller 的 getProducts 方法，幾乎原封不動地搬過來。只是要將回傳值型態改為代表 DB 欄位的 ProductPO。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> List&lt;ProductPO&gt; <span class="hljs-title function_">getMany</span><span class="hljs-params">(ProductRequestParameter param)</span> &#123;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>實作內容在此不贅述，讀者可參考文末附上的完成後專案。</p><h2 id="五、用-Exception-回傳-HTTP-狀態碼"><a href="#五、用-Exception-回傳-HTTP-狀態碼" class="headerlink" title="五、用 Exception 回傳 HTTP 狀態碼"></a>五、用 Exception 回傳 HTTP 狀態碼</h2><p>在練習用專案中，我們在 Controller 是透過 ResponseEntity 物件回傳 HTTP 狀態碼，如 404（Not Found）、422（Unprocessable Entity）等，讓前端知道有問題發生。</p><p>但等到將程式碼抽離到其他層次後，就不適合這麼做了，畢竟 <code>ResponseEntity</code> 是被設計用來回應給前端，不建議出現在擔任其他職責的層次。</p><p>本節介紹如何在拋出 exception 中止程式流程時，能回傳 HTTP 狀態碼。</p><p>以 404 和 422 的狀態碼為例，我們可以像這樣建立例外類別：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ResponseStatus(HttpStatus.NOT_FOUND)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotFoundException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotFoundException</span><span class="hljs-params">(String msg)</span> &#123;        <span class="hljs-built_in">super</span>(msg);    &#125;&#125;</code></pre></div><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@ResponseStatus(HttpStatus.UNPROCESSABLE_ENTITY)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UnprocessableEntityException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UnprocessableEntityException</span><span class="hljs-params">(String msg)</span> &#123;        <span class="hljs-built_in">super</span>(msg);    &#125;&#125;</code></pre></div><p>它們繼承了 RuntimeException，並冠上 <code>@ResponseStatus</code> 注解來設定狀態碼。</p><p>接著請回到 ProductRepository，改為拋出這種 exception。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRepository</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, ProductPO&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> ProductPO <span class="hljs-title function_">insert</span><span class="hljs-params">(ProductPO product)</span> &#123;        <span class="hljs-comment">// ...</span>        <span class="hljs-keyword">if</span> (productMap.containsKey(product.getId())) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnprocessableEntityException</span>(<span class="hljs-string">&quot;Product id &quot;</span> + product.getId() + <span class="hljs-string">&quot; is existing.&quot;</span>);        &#125;        <span class="hljs-comment">// ...</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(ProductPO product)</span> &#123;        <span class="hljs-keyword">if</span> (!productMap.containsKey(product.getId())) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnprocessableEntityException</span>(<span class="hljs-string">&quot;Product &quot;</span> + product.getId() + <span class="hljs-string">&quot; doesn&#x27;t exist.&quot;</span>);        &#125;        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>附帶一提，若讀者除了 HTTP 狀態碼，還想想透過 response body 提供前端更詳細的資訊，請參考「<a href="https://chikuwa-tech-study.blogspot.com/2023/02/spring-boot-controller-advice-handle-exception-and-query-string.html">【Spring Boot】使用 Controller Advice 處理例外與 query string</a>」文章。</p><h2 id="六、實作-Service-層"><a href="#六、實作-Service-層" class="headerlink" title="六、實作 Service 層"></a>六、實作 Service 層</h2><h3 id="（一）宣告類別"><a href="#（一）宣告類別" class="headerlink" title="（一）宣告類別"></a>（一）宣告類別</h3><p>完成資料存取層後，本節接續進行商業邏輯層的實作。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-comment">// Should use @Autowired in the future</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ProductRepository</span> <span class="hljs-variable">productRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductRepository</span>();    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">UserRepository</span> <span class="hljs-variable">userRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRepository</span>();    <span class="hljs-comment">// TODO</span>&#125;</code></pre></div><p>上面宣告了一個 Service 類別，準備實作產品的商業邏輯。</p><p>此處還用 <code>new</code> 建立了 ProductRepository 和 UserRepository 的全域變數，以便呼叫前面第五節封裝好的程式。</p><p>如果讀者以前已經碰過一點 Spring Boot，看到這邊應該覺得奇怪：為何不使用 <code>@Autowired</code> 注解，而是用 new 的？</p><p>原因是筆者想在<a href="/articles/spring-boot-bean-ioc-di-and-polymorphism/" target="_blank">第 5 課</a>單獨用一篇文章，來介紹「控制反轉」及「依賴注入」這兩項關於 Spring 的重要觀念，故本文暫時用 new 的方式。</p><h3 id="（二）取得資料"><a href="#（二）取得資料" class="headerlink" title="（二）取得資料"></a>（二）取得資料</h3><p>由於代表 DB 欄位的類別為 ProductPO，若想將其變成前端需要的 ProductVO 規格，那就得先準備轉換的方法。以下就只是將兩個類別的欄位一一對應罷了。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductVO</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProductVO <span class="hljs-title function_">of</span><span class="hljs-params">(ProductPO po)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">vo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductVO</span>();        vo.id = po.getId();        vo.name = po.getName();        vo.price = po.getPrice();        vo.creatorId = po.getCreatorId();        vo.createdTime = po.getCreatedTime();        vo.updatedTime = po.getUpdatedTime();        <span class="hljs-keyword">return</span> vo;    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>至於 ProductVO 的 creatorName 欄位的資料，可在 Service 層進行取得的動作。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ProductRepository</span> <span class="hljs-variable">productRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductRepository</span>();    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">UserRepository</span> <span class="hljs-variable">userRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRepository</span>();    <span class="hljs-keyword">public</span> ProductVO <span class="hljs-title function_">getProductVO</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">productPO</span> <span class="hljs-operator">=</span> getProductPO(id);        <span class="hljs-type">var</span> <span class="hljs-variable">productVO</span> <span class="hljs-operator">=</span> ProductVO.of(productPO);                <span class="hljs-type">var</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userRepository.getOneById(productPO.getCreatorId());        productVO.setCreatorName(user.getName());                <span class="hljs-keyword">return</span> productVO;    &#125;    <span class="hljs-keyword">private</span> ProductPO <span class="hljs-title function_">getProductPO</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">po</span> <span class="hljs-operator">=</span> productRepository.getOneById(id);        <span class="hljs-keyword">if</span> (po == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotFoundException</span>(<span class="hljs-string">&quot;Product &quot;</span> + id + <span class="hljs-string">&quot; doesn&#x27;t exist.&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> po;    &#125;&#125;</code></pre></div><p>首先從 Repository 層取得產品資料，將其轉換為 ProductVO。接著取得使用者的名字後，再填入進去。</p><p>當然，如果沒有該 id 的產品，就回傳 404 狀態碼。</p><h3 id="（三）建立資料"><a href="#（三）建立資料" class="headerlink" title="（三）建立資料"></a>（三）建立資料</h3><p>由於後續會由第三節設計的 ProductCreateRequest 類別接收前端的請求，因此也要準備一個轉換成 ProductPO 的方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductPO</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ProductPO <span class="hljs-title function_">of</span><span class="hljs-params">(ProductCreateRequest req)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">po</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductPO</span>();        po.id = req.getId();        po.name = req.getName();        po.price = req.getPrice();        po.creatorId = req.getCreatorId();        <span class="hljs-keyword">return</span> po;    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>而 Service 的實作內容如下：</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ProductRepository</span> <span class="hljs-variable">productRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductRepository</span>();    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">UserRepository</span> <span class="hljs-variable">userRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserRepository</span>();    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> ProductPO <span class="hljs-title function_">createProduct</span><span class="hljs-params">(ProductCreateRequest productReq)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">userPO</span> <span class="hljs-operator">=</span> userRepository.getOneById(productReq.getCreatorId());        <span class="hljs-keyword">if</span> (userPO == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnprocessableEntityException</span>(<span class="hljs-string">&quot;Product creator &quot;</span> + productReq.getCreatorId() + <span class="hljs-string">&quot; doesn&#x27;t exist.&quot;</span>);        &#125;        <span class="hljs-type">var</span> <span class="hljs-variable">productPO</span> <span class="hljs-operator">=</span> ProductPO.of(productReq);        productPO = productRepository.insert(productPO);        <span class="hljs-keyword">return</span> productPO;    &#125;&#125;</code></pre></div><p>首先檢查是否有這位建立者。有的話，便將 ProductCreateRequest 轉換為 ProductPO，再呼叫 Repository 儲存即可。</p><h3 id="（四）更新與刪除資料-1"><a href="#（四）更新與刪除資料-1" class="headerlink" title="（四）更新與刪除資料"></a>（四）更新與刪除資料</h3><p>以下是更新與刪除產品資料的邏輯。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ProductRepository</span> <span class="hljs-variable">productRepository</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductRepository</span>();    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(String id, ProductUpdateRequest productReq)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">productPO</span> <span class="hljs-operator">=</span> getProductPO(id);        productPO.setName(productReq.getName());        productPO.setPrice(productReq.getPrice());        productRepository.update(productPO);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteProduct</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">productPO</span> <span class="hljs-operator">=</span> getProductPO(id);        productRepository.deleteById(productPO.getId());    &#125;    <span class="hljs-keyword">private</span> ProductPO <span class="hljs-title function_">getProductPO</span><span class="hljs-params">(String id)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">po</span> <span class="hljs-operator">=</span> productRepository.getOneById(id);        <span class="hljs-keyword">if</span> (po == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotFoundException</span>(<span class="hljs-string">&quot;Product &quot;</span> + id + <span class="hljs-string">&quot; doesn&#x27;t exist.&quot;</span>);        &#125;        <span class="hljs-keyword">return</span> po;    &#125;&#125;</code></pre></div><p>更新時，會從 Repository 層取得資料，並將 ProductUpdateRequest 物件的欄位值更新上去，最後再儲存。</p><p>刪除時，會先嘗試透過 id 取得資料。若不存在，則回傳 404 狀態。否則呼叫 Repository 層進行刪除。</p><h3 id="（五）取得多筆資料-1"><a href="#（五）取得多筆資料-1" class="headerlink" title="（五）取得多筆資料"></a>（五）取得多筆資料</h3><p>基本上就是直接呼叫 Repository 的方法，取得多個 ProductPO。接著再仿照前面取得一筆產品資料的做法，將建立者的名字寫入，組成完整的 ProductVO。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductService</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-keyword">public</span> List&lt;ProductVO&gt; <span class="hljs-title function_">getProductVOs</span><span class="hljs-params">(ProductRequestParameter param)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">productPOs</span> <span class="hljs-operator">=</span> productRepository.getMany(param);        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>要留意的是，實務上應盡量避免在迴圈中存取 DB，以免效能太差。具體實作細節，讀者可參考文末附上的完成後專案。</p><h2 id="七、調整-Controller-層"><a href="#七、調整-Controller-層" class="headerlink" title="七、調整 Controller 層"></a>七、調整 Controller 層</h2><p>第五節實作了 Repository，而第六節讓 Service 的商業邏輯呼叫 Repository。最後我們要讓 Controller 只呼叫 Service，讓它專注於自己的職責。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(path = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-comment">// Should use @Autowired in the future</span>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ProductService</span> <span class="hljs-variable">productService</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductService</span>();    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;ProductVO&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productService.getProductVO(productId);        <span class="hljs-keyword">return</span> ResponseEntity.ok(product);    &#125;    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> ProductCreateRequest request)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productService.createProduct(request);        <span class="hljs-comment">// ...</span>        <span class="hljs-keyword">return</span> ResponseEntity.created(uri).build();    &#125;    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId, <span class="hljs-meta">@RequestBody</span> ProductUpdateRequest request)</span> &#123;        productService.updateProduct(productId, request);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId)</span> &#123;        productService.deleteProduct(productId);        <span class="hljs-keyword">return</span> ResponseEntity.noContent().build();    &#125;    <span class="hljs-meta">@GetMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;ProductVO&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@ModelAttribute</span> ProductRequestParameter param</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">products</span> <span class="hljs-operator">=</span> productService.getProductVOs(param);        <span class="hljs-keyword">return</span> ResponseEntity.ok(products);    &#125;&#125;</code></pre></div><p>這裡同樣暫時用 new 的方式，建立 ProductService 物件。並且以 ProductCreateResquest 和 ProductUpdateRequest 類別接收請求，而給予回應則使用 ProductVO 類別。</p><p>如此一來，Controller 的每一支 API 處理方法，不再有過長的程式碼，凸顯它只有接收請求、呼叫處理、給予回應這些工作，變得簡潔許多！</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch04-three-tier-architecture">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-validate-request-body-and-query-string/" target="_blank">【Spring Boot】第3.3課－在 Controller 驗證 request body 與 query string 的資料</a></p><p>下一課：<a href="/articles/spring-boot-bean-ioc-di-and-swap/" target="_blank">【Spring Boot】第5課－元件的控制反轉、依賴注入與抽換</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第3.2課－在 Controller 接收 query string 與操作 header</title>
    <link href="/articles/spring-boot-use-query-string-and-header-in-controller/"/>
    <url>/articles/spring-boot-use-query-string-and-header-in-controller/</url>
    
    <content type="html"><![CDATA[<p>完成<a href="/articles/spring-boot-implement-restful-api-in-controller/" target="_blank">第 3.1 課</a>後，相信讀者已經知道如何在 Controller 設計 API。本文將繼續介紹其他可以實作的細節。</p><p>首先是接收查詢字串（query string），進行條件篩選與排序，回傳多筆資料。接著是標頭（header）的處理，包含接收指定名稱的 request header，以及回傳 Location。最後提供幾項實用的做法，讓 Controller 的程式碼更簡潔。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch03.1-implement-restful-api-in-controller">點我</a>。</p><h2 id="一、範例專案介紹"><a href="#一、範例專案介紹" class="headerlink" title="一、範例專案介紹"></a>一、範例專案介紹</h2><p>首先回顧一下練習用專案中的測試資料和 Controller。</p><p>以下的自訂類別，描述了產品的編號、名稱與價格，會作為測試資料。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是 Controller，由於沒有串接真實的 DB，因此將測試資料存放在 Java 的 Map 資料結構中。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">static</span> &#123;        Stream.of(                Product.of(<span class="hljs-string">&quot;B1&quot;</span>, <span class="hljs-string">&quot;Android Development (Java)&quot;</span>, <span class="hljs-number">380</span>),                Product.of(<span class="hljs-string">&quot;B2&quot;</span>, <span class="hljs-string">&quot;Android Development (Kotlin)&quot;</span>, <span class="hljs-number">420</span>),                Product.of(<span class="hljs-string">&quot;B3&quot;</span>, <span class="hljs-string">&quot;Data Structure (Java)&quot;</span>, <span class="hljs-number">250</span>),                Product.of(<span class="hljs-string">&quot;B4&quot;</span>, <span class="hljs-string">&quot;Finance Management&quot;</span>, <span class="hljs-number">450</span>),                Product.of(<span class="hljs-string">&quot;B5&quot;</span>, <span class="hljs-string">&quot;Human Resource Management&quot;</span>, <span class="hljs-number">330</span>)        ).forEach(p -&gt; productMap.put(p.getId(), p));    &#125;    <span class="hljs-comment">// TODO</span>&#125;</code></pre></div><h2 id="二、接收查詢字串"><a href="#二、接收查詢字串" class="headerlink" title="二、接收查詢字串"></a>二、接收查詢字串</h2><h3 id="（一）範例說明"><a href="#（一）範例說明" class="headerlink" title="（一）範例說明"></a>（一）範例說明</h3><p>延續練習用專案，本節讓我們實作新的 API。它能接收端點（endpoint）上的查詢字串（query string），對測試資料 Product 進行搜尋與排序。</p><p>筆者設計了三個查詢字串。</p><ul><li>searchKey：搜尋的關鍵字。本文支援搜尋「id」與「name」欄位。</li><li>sortField：用來排序的欄位。本文支援「name」與「price」。</li><li>sortDir：排序的方向。僅支援「asc」（遞增）與「desc」（遞減）。</li></ul><p>舉例來說，若想以「manage」關鍵字搜尋，並以價格遞增排序，則 endpoint 寫法為：<br><code>GET /products?searchKey=manage&amp;sortField=price&amp;sortDir=asc</code>。</p><h3 id="（二）宣告-API"><a href="#（二）宣告-API" class="headerlink" title="（二）宣告 API"></a>（二）宣告 API</h3><p>了解需求後，就能開始實作了。以下是在 Controller 先宣告 API 的處理方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@GetMapping(&quot;/products&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;searchKey&quot;, required = false, defaultValue = &quot;&quot;)</span> String keyword,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;sortField&quot;, required = false)</span> String sortField,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;sortDir&quot;, required = false)</span>String sortDir</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-comment">// TODO</span>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;    &#125;&#125;</code></pre></div><p>這個方法的三個參數，分別對應到上述的搜尋關鍵字、排序欄位與方向，且都冠上了 <code>@RequestParam</code> 注解。</p><p>該注解又可再傳入多個參數，用途說明如下。</p><ul><li><code>value</code>：指定要接收 endpoint 上的哪一個 query string。好處是方法參數與 query string 可分開取名，不必使用相同的名稱。否則預設將會與方法參數一樣。</li><li><code>required</code>：設定該 query string 是否為必填。預設為 true，若前端未提供，後端會自動回應 HTTP 400 狀態碼（Bad Request）。</li><li><code>defaultValue</code>：若前端未提供 query string，可在此定義預設值。</li></ul><p>最後，由於這支 API 會回傳多筆資料，而且可能有順序性，所以回傳值的 <code>ResponseEntity</code>，其泛型類別給予的是 List。</p><h3 id="（三）實作程式邏輯"><a href="#（三）實作程式邏輯" class="headerlink" title="（三）實作程式邏輯"></a>（三）實作程式邏輯</h3><p>本文的範例程式並未串接真實的 DB，故透過 Java 的「stream」 API 來進行操作。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-meta">@GetMapping(&quot;/products&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;searchKey&quot;, required = false, defaultValue = &quot;&quot;)</span> String keyword,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;sortField&quot;, required = false)</span> String sortField,</span><span class="hljs-params">            <span class="hljs-meta">@RequestParam(value = &quot;sortDir&quot;, required = false)</span> String sortDir</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-comment">// 準備排序方式</span>        Comparator&lt;Product&gt; comparator;        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;name&quot;</span>.equals(sortField)) &#123;            comparator = Comparator.comparing(x -&gt; x.getName().toLowerCase());        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;price&quot;</span>.equals(sortField)) &#123;            comparator = Comparator.comparing(Product::getPrice);        &#125; <span class="hljs-keyword">else</span> &#123;            comparator = (a, b) -&gt; <span class="hljs-number">0</span>;        &#125;        <span class="hljs-comment">// 判斷是否遞減</span>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;desc&quot;</span>.equalsIgnoreCase(sortDir)) &#123;            comparator = comparator.reversed();        &#125;        <span class="hljs-comment">// 執行</span>        <span class="hljs-type">var</span> <span class="hljs-variable">products</span> <span class="hljs-operator">=</span> productMap.values()                .stream()                .filter(x -&gt; x.getName().toLowerCase().contains(keyword.toLowerCase()) ||                        x.getId().contains(keyword))                .sorted(comparator)                .toList();        <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.OK).body(products);    &#125;&#125;</code></pre></div><p>此處的程式邏輯分為三個步驟：</p><ol><li>根據排序的欄位，宣告 Comparator 物件，用來比較大小。</li><li>根據排序的方向，決定是否將 Comparator 調整為遞減。</li><li>取得測試資料的集合，呼叫 stream 的相關方法。將搜尋關鍵字用來篩選，再將符合的資料做排序。</li></ol><p>完成後，可實際用 Postman 呼叫看看。<br><img src="https://chikuwacode.github.io/articles/spring-boot-use-query-string-and-header-in-controller/postman-get-with-query-string.png"></p><p>本節著重於如何在 Controller 接收 query string。至於檢查它們的值是否合法，不在本文的討論範圍。</p><h2 id="三、接收與回傳標頭"><a href="#三、接收與回傳標頭" class="headerlink" title="三、接收與回傳標頭"></a>三、接收與回傳標頭</h2><h3 id="（一）回傳-Location-標頭"><a href="#（一）回傳-Location-標頭" class="headerlink" title="（一）回傳 Location 標頭"></a>（一）回傳 Location 標頭</h3><p>在<a href="/articles/spring-boot-restful-api/" target="_blank">第 2 課</a>有介紹過，如果 API 的功能是建立資源，那麼後端可額外回傳「Location」這個標頭（header），提供指向該資源的 endpoint。</p><p>在練習用專案中，尚有另一個 API 是「POST &#x2F;products」，用途是建立新的產品資料。其對應的 API 處理方法為「createProduct」，本節就在這個 API 提供此 header。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@PostMapping(&quot;/products&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-comment">// ...</span>        <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> ServletUriComponentsBuilder                .fromCurrentRequestUri()                .path(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)                .build(Map.of(<span class="hljs-string">&quot;id&quot;</span>, product.getId()));        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();        headers.setLocation(uri);        <span class="hljs-keyword">return</span> ResponseEntity                .status(HttpStatus.CREATED)                .headers(headers)                .build();    &#125;&#125;</code></pre></div><p>透過 <code>ServletUriComponentsBuilder</code> 提供的方法，我們能一步步建構出 URI 物件。</p><ol><li><code>fromCurrentRequestUri</code>：從前端呼叫當前 API 的 endpoint 為基準開始建構。例如 <code>http://localhost:8080/products</code>。</li><li><code>path</code>：以目前建構出的結果，繼續往後添加新的路徑，亦可透過「{ }」符號挖空格（placeholder），並於後續填入值。</li><li><code>build</code>：傳入 Map，將值填入上述的 placeholder 中，並回傳建立好的 URI 物件。</li></ol><p>準備好 URI 後，請建立 <code>HttpHeaders</code> 物件，添加 Location 的值。<code>HttpHeaders</code> 提供一系列的「setXXX」方法，可以很直覺地加上資料。最後將其附帶於 <code>ResponseEntity</code> 中。</p><p>以下是 Postman 的操作結果，可看見 response header 確實有出現「Location」。<br><img src="https://chikuwacode.github.io/articles/spring-boot-use-query-string-and-header-in-controller/postman-response-header-indicate-location.png"></p><h3 id="（二）接收標頭"><a href="#（二）接收標頭" class="headerlink" title="（二）接收標頭"></a>（二）接收標頭</h3><p>Controller 除了可以回傳 header，當然也能接收。以下的小範例，是接收一個叫做「If-Modified-Since」的 header。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/test&quot;)</span><span class="hljs-keyword">public</span> ResponseEntity&lt;Foo&gt; <span class="hljs-title function_">getFoo</span><span class="hljs-params">(</span><span class="hljs-params">    <span class="hljs-meta">@RequestHeader(HttpHeaders.IF_MODIFIED_SINCE)</span> String ifModifiedSince</span><span class="hljs-params">)</span> &#123;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>這裡使用了 <code>@RequestHeader</code> 注解，並於注解的參數提供要接收 header 的名稱。</p><h2 id="四、簡化-Controller-的程式"><a href="#四、簡化-Controller-的程式" class="headerlink" title="四、簡化 Controller 的程式"></a>四、簡化 Controller 的程式</h2><p>完成<a href="/articles/spring-boot-implement-restful-api-in-controller/" target="_blank">第 3.1 課</a>與第 3.2 課後，讀者在 Controller 將擁有五支 RESTful API。本節將補充一些寫法，讓程式能簡潔好讀一些。</p><h3 id="（一）套用-Endpoint-前綴"><a href="#（一）套用-Endpoint-前綴" class="headerlink" title="（一）套用 Endpoint 前綴"></a>（一）套用 Endpoint 前綴</h3><p>這些跟產品有關的 API，在 <code>@GetMapping</code>、<code>@PostMapping</code> 等注解中，其 endpoint 的開頭都要寫上「&#x2F;products」，感覺重複性有點高。</p><p>我們可以在 Controller 類別冠上 <code>@RequestMapping</code> 注解，定義路徑的前綴，之後底下的 endpoint 都會掛上它。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(path = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-comment">// GET /products/&#123;id&#125;</span>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-comment">// POST /products</span>    <span class="hljs-meta">@PostMapping</span>    <span class="hljs-comment">// PUT /products/&#123;id&#125;</span>    <span class="hljs-meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-comment">// DELETE /products/&#123;id&#125;</span>    <span class="hljs-meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>&#125;</code></pre></div><h3 id="（二）選擇-HTTP-狀態碼"><a href="#（二）選擇-HTTP-狀態碼" class="headerlink" title="（二）選擇 HTTP 狀態碼"></a>（二）選擇 HTTP 狀態碼</h3><p>先前提供 HTTP 狀態碼的方式，是呼叫 <code>ResponseEntity.status</code> 方法，傳入 <code>HttpStatus</code> 這個列舉（enum）物件。</p><p>其實 <code>ResponseEntity</code> 類別也有提供如 <code>ok</code>、<code>noContent</code>、<code>notFound</code> 等常見的方法，可以用來替代。</p><p>以處理 GET 與 POST 請求的方法為例，將程式調整成如下。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(path = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productMap.get(productId);        <span class="hljs-keyword">return</span> product == <span class="hljs-literal">null</span>                ? ResponseEntity.notFound().build()                : ResponseEntity.ok(product);    &#125;        <span class="hljs-meta">@PostMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-comment">// ...</span>        <span class="hljs-type">URI</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> ServletUriComponentsBuilder                .fromCurrentRequestUri()                .path(<span class="hljs-string">&quot;/&#123;id&#125;&quot;</span>)                .build(Map.of(<span class="hljs-string">&quot;id&quot;</span>, product.getId()));        <span class="hljs-keyword">return</span> ResponseEntity.created(uri).build();    &#125;    <span class="hljs-comment">// ...</span>&#125;</code></pre></div><p>其中 <code>ok</code> 方法可傳入 payload，而 <code>created</code> 方法可傳入 URI。</p><h3 id="（三）封裝多個查詢字串"><a href="#（三）封裝多個查詢字串" class="headerlink" title="（三）封裝多個查詢字串"></a>（三）封裝多個查詢字串</h3><p>在第二節的實作的 <code>GET /products</code> 這支 API，若開放更多 query string 傳進來，將會使程式碼太冗長。畢竟每個 query string，都要配上一個 <code>@RequestParam</code> 注解，而每個注解都能傳入好幾個參數。</p><p>針對這個問題，我們可準備自定義的類別，並搭配一個叫做 <code>@ModelAttribute</code> 的注解，將 query string 的值自動填充到該類別的物件中。就像接收 request body 那樣。</p><p>以下是用來接收 query string 的類別。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductRequestParameter</span> &#123;    <span class="hljs-keyword">private</span> String searchKey;    <span class="hljs-keyword">private</span> String sortField;    <span class="hljs-keyword">private</span> String sortDir;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><p>以下是調整過後的 API 處理方法。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-meta">@RequestMapping(path = &quot;/products&quot;)</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@GetMapping</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;List&lt;Product&gt;&gt; <span class="hljs-title function_">getProducts</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@ModelAttribute</span> ProductRequestParameter param</span><span class="hljs-params">    )</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">sortField</span> <span class="hljs-operator">=</span> param.getSortField();        <span class="hljs-type">var</span> <span class="hljs-variable">sortDir</span> <span class="hljs-operator">=</span> param.getSortDir();        <span class="hljs-type">var</span> <span class="hljs-variable">keyword</span> <span class="hljs-operator">=</span> param.getSearchKey();        <span class="hljs-comment">// ...</span>    &#125;&#125;</code></pre></div><p>透過 <code>@ModelAttribute</code> 注解，可以將 query string 都收集起來，之後再分別取出做運用。</p><p>完成這篇文章的練習後，我們將擁有 5 支 RESTful API。若讀者覺得使用 Postman 呼叫時，填寫 API endpoint、query string 或 request body 太麻煩，不妨進一步參考<a href="/articles/spring-boot-swagger-ui-openapi-documentation/" target="_blank">第 13 課</a>，使用「Swagger UI」工具製作 API 文件。</p><p>本文在 Controller 寫了好幾支程式，內容也越來越龐大。<a href="/articles/spring-boot-three-tier-architecture/" target="_blank">第 4 課</a>將介紹「三層式架構」，將不同目的的程式碼片段，分開撰寫在其他地方。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch03.2-use-query-string-and-header-in-controller">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-implement-restful-api-in-controller/" target="_blank">【Spring Boot】第3.1課－在 Controller 實作 RESTful API</a></p><p>下一課：<a href="/articles/spring-boot-validate-request-body-and-query-string/" target="_blank">【Spring Boot】第3.3課－在 Controller 驗證 request body 與 query string 的資料</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第3.1課－在 Controller 實作 RESTful API</title>
    <link href="/articles/spring-boot-implement-restful-api-in-controller/"/>
    <url>/articles/spring-boot-implement-restful-api-in-controller/</url>
    
    <content type="html"><![CDATA[<p>若讀者是後端領域的初學者，看完<a href="/articles/spring-boot-restful-api/" target="_blank">第 2 課</a>後，應該具備 Web API 的概念了，並且也知道前後端會透過 payload 與 HTTP 狀態碼來交換資料。</p><p>本文一開始先簡介知名的 MVC 架構，讓讀者知道 Controller 的由來。接著在 Spring Boot 中撰寫 RESTful API，將相關概念加以活用。最後會完成 4 支 API，分別能進行 CRUD。</p><hr><p>本文的練習用專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch01-create-project">點我</a>。</p><h2 id="一、MVC-架構簡介"><a href="#一、MVC-架構簡介" class="headerlink" title="一、MVC 架構簡介"></a>一、MVC 架構簡介</h2><p>不知讀者以前是否聽過「MVC 架構」？筆者在此簡單地介紹。一套系統，依照職責可區分為 Model、View 與 Controller 三個部份。</p><p>其中 View 屬於畫面的呈現，在前後端分離的系統中，View 這塊就是前端的工作了。</p><p>另外兩項屬於後端。Model 涵蓋資料處理與存取 DB，範圍最廣。至於 Controller 則負責接收請求，呼叫 Model 進行處理，並將結果回傳給 View。</p><p>以生活情境來比喻，就像客人跟櫃台點餐，店員會將菜單送到廚房，之後再將餐點交給我們。此時客人、櫃台店員與廚房，分別為 View、Controller 與 Model。</p><p>Controller 接收的請求，內容包括了<a href="/articles/spring-boot-restful-api/" target="_blank">第 2 課</a>提到的 query string、payload 與 header。而給予的回應，在本文的實作中，則是將處理結果作為 payload，連同 HTTP 狀態碼一併回傳。</p><p>若將原本屬於 Model 職責的資料處理寫在 Controller，或是有些 JSP 專案是把程式碼跟 HTML 寫在一起，那系統越做越大，程式碼就會變得臃腫又混亂。MVC 架構的思想，便是讓程式碼分門別類、各司其職。</p><h2 id="二、配置-Controller"><a href="#二、配置-Controller" class="headerlink" title="二、配置 Controller"></a>二、配置 Controller</h2><h3 id="（一）測試資料"><a href="#（一）測試資料" class="headerlink" title="（一）測試資料"></a>（一）測試資料</h3><p>在實作前，讓我們先準備測試資料，這樣後端才有東西可以回傳。</p><p>以下的自訂類別，描述了產品的編號、名稱與價格。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;    <span class="hljs-keyword">private</span> String id;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> price;    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Product <span class="hljs-title function_">of</span><span class="hljs-params">(String id, String name, <span class="hljs-type">int</span> price)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();        p.id = id;        p.name = name;        p.price = price;        <span class="hljs-keyword">return</span> p;    &#125;    <span class="hljs-comment">// getter, setter ...</span>&#125;</code></pre></div><h3 id="（二）Controller-類別"><a href="#（二）Controller-類別" class="headerlink" title="（二）Controller 類別"></a>（二）Controller 類別</h3><p>接著請建立一個類別，筆者取名為 ProductController。在第三節，會在這裡定義跟產品直接相關的 RESTful API。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-keyword">static</span> &#123;        Stream.of(                Product.of(<span class="hljs-string">&quot;B1&quot;</span>, <span class="hljs-string">&quot;Android Development (Java)&quot;</span>, <span class="hljs-number">380</span>),                Product.of(<span class="hljs-string">&quot;B2&quot;</span>, <span class="hljs-string">&quot;Android Development (Kotlin)&quot;</span>, <span class="hljs-number">420</span>),                Product.of(<span class="hljs-string">&quot;B3&quot;</span>, <span class="hljs-string">&quot;Data Structure (Java)&quot;</span>, <span class="hljs-number">250</span>),                Product.of(<span class="hljs-string">&quot;B4&quot;</span>, <span class="hljs-string">&quot;Finance Management&quot;</span>, <span class="hljs-number">450</span>),                Product.of(<span class="hljs-string">&quot;B5&quot;</span>, <span class="hljs-string">&quot;Human Resource Management&quot;</span>, <span class="hljs-number">330</span>)        ).forEach(p -&gt; productMap.put(p.getId(), p));    &#125;    <span class="hljs-comment">// TODO</span>&#125;</code></pre></div><p>本文沒有串接真實的 DB，作為替代，筆者將測試資料存放在 Java 的 Map 資料結構中。其中 key 為編號，value 為整筆產品資料。</p><p>Controller 類別還需加上 <code>@RestController</code> 這個「注解」（annotation），告訴 Spring Boot 這是一個 Controller，否則它只是普通的類別。Spring Boot 會使用各式各樣的注解來進行一些定義，讀者在學習過程中將一一認識。</p><p>透過 Java 的「反射」（Reflection），Spring Boot 會在啟動時掃描程式專案中的每個類別，以及內部的欄位、方法及其參數，是否具有特定的注解。有的話，便納入管理。此過程稱為「元件掃描」（component scan）。</p><h2 id="三、實作-RESTful-API"><a href="#三、實作-RESTful-API" class="headerlink" title="三、實作 RESTful API"></a>三、實作 RESTful API</h2><h3 id="（一）GET-請求（取得資源）"><a href="#（一）GET-請求（取得資源）" class="headerlink" title="（一）GET 請求（取得資源）"></a>（一）GET 請求（取得資源）</h3><p>本節讓我們正式在 Controller 實作 API。以下是透過產品編號來取得資料。這個範例的呼叫方式為 <code>GET /products/B1</code>。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@GetMapping(&quot;/products/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productMap.get(productId);        <span class="hljs-keyword">return</span> product == <span class="hljs-literal">null</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>() : product;    &#125;&#125;</code></pre></div><p>首先宣告一個叫做 getProduct 的方法，用來處理請求。而它的回傳值 Product 會是 response body 的內容。</p><p>接著再冠上 <code>@GetMapping</code> 注解，並傳入資源的 endpoint 路徑。我們在 endpoint 上以「{id}」字串來「挖空格」，代表這個位置的值將由前端來提供。</p><p>最後看到該方法的「productId」參數，也冠上了 <code>@PathVariable</code> 注解，且傳入了「id」字串。代表要將 endpoint 上 {id} 位置的值，賦予給 productId。</p><p>這個方法的程式邏輯很簡單，從存放測試資料的 Map 取得資料後回傳即可。若該編號無對應的產品，此處暫時回傳空的內容。</p><p>完成後，請啟動 Spring Boot，就能用 Postman 工具試著呼叫看看。<br><img src="https://chikuwacode.github.io/articles/spring-boot-implement-restful-api-in-controller/restful-get-product.png"></p><p>確實收到了回應。讀者如果有開發過前端或是 App，且串接過 API，那麼心中應該知道這份 JSON 格式的資料要如何使用了吧！基本上後端的目的就是像這樣回傳內容。</p><h3 id="（二）提供-HTTP-狀態碼"><a href="#（二）提供-HTTP-狀態碼" class="headerlink" title="（二）提供 HTTP 狀態碼"></a>（二）提供 HTTP 狀態碼</h3><p>上面的程式略過了一件事，那就是找不到產品時，應該要回傳 404 的 HTTP 狀態碼。</p><p>Spring Boot 提供了 <code>ResponseEntity</code> 類別物件，讓我們可以自定義 response 的其他地方，而不是只能回傳 payload 而已。以下將進行改寫。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@GetMapping(&quot;/products/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Product&gt; <span class="hljs-title function_">getProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productMap.get(productId);        <span class="hljs-keyword">return</span> product == <span class="hljs-literal">null</span>                ? ResponseEntity.status(HttpStatus.NOT_FOUND).build()                : ResponseEntity.status(HttpStatus.OK).body(product);    &#125;&#125;</code></pre></div><p>在上面的程式中，透過 <code>ResponseEntity.status</code> 方法，可傳入想要的狀態。此處傳入「OK」（200）或「Not Found」（400）。</p><p>接著繼續呼叫 <code>body</code> 方法，可傳入要回傳的 payload。若無 payload，則呼叫 <code>build</code> 方法建立出物件。</p><p>最後，getProduct 方法的回傳值要同步修改成 <code>ResponseEntity</code>，並於泛型類別提供 payload 的類別。</p><h2 id="四、處理-POST-請求（建立資源）"><a href="#四、處理-POST-請求（建立資源）" class="headerlink" title="四、處理 POST 請求（建立資源）"></a>四、處理 POST 請求（建立資源）</h2><p>將實作 RESTful API 的過程走過一遍後，對於其他種類的請求，我們就能依樣畫葫蘆了。</p><p>以下是處理 POST 請求，將 payload 中的內容，與現有的測試資料一起放在 Map 中。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@PostMapping(&quot;/products&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">createProduct</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> Product product)</span> &#123;        <span class="hljs-keyword">if</span> (product.getId() == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.BAD_REQUEST).build();        &#125;        <span class="hljs-keyword">if</span> (productMap.containsKey(product.getId())) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.UNPROCESSABLE_ENTITY).build();        &#125;        productMap.put(product.getId(), product);        <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.CREATED).build();    &#125;&#125;</code></pre></div><p>接收 payload 時，需使用 <code>@RequestBody</code> 注解。Spring Boot 會根據 JSON 資料的欄位，自動去呼叫 Product 類別中，其名稱相符的「set」方法，藉此將 payload 的內容填充到 Java 物件上。舉例來說，若偵測 JSON 中有名稱為「name」的欄位，那就會尋找「setName」方法來呼叫。</p><p>這個 createProduct 方法的程式邏輯，會先檢查是否有附上產品編號。若無，意味著前端的 payload 有明顯錯誤，故回傳 400 狀態碼（Bad Request）。</p><p>接著再檢查 Map 中是否已有相同編號的產品資料。若有，則情境上不合理，故回傳 422 狀態碼（Unprocessable Entity）。</p><p>如果資料沒有其他問題，就將它放進 Map 中，並回傳 201 狀態碼（Created），代表成功建立資源。</p><p>至於回傳的 <code>ResponseEntity</code>，由於筆者在這個範例設計成無 payload，因此泛型類別給予「Void」，代表沒有即可。</p><h2 id="五、處理-PUT、DELETE-請求"><a href="#五、處理-PUT、DELETE-請求" class="headerlink" title="五、處理 PUT、DELETE 請求"></a>五、處理 PUT、DELETE 請求</h2><h3 id="（一）PUT-請求（更新資源）"><a href="#（一）PUT-請求（更新資源）" class="headerlink" title="（一）PUT 請求（更新資源）"></a>（一）PUT 請求（更新資源）</h3><p>以下是處理 PUT 請求，會同時接收 endpoint 上的參數，以及 payload。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@PutMapping(&quot;/products/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">updateProduct</span><span class="hljs-params">(</span><span class="hljs-params">            <span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId, <span class="hljs-meta">@RequestBody</span> Product request)</span> &#123;        <span class="hljs-type">var</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productMap.get(productId);        <span class="hljs-keyword">if</span> (product == <span class="hljs-literal">null</span>) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).build();        &#125;        product.setName(request.getName());        product.setPrice(request.getPrice());        <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();    &#125;&#125;</code></pre></div><p>這個方法的程式邏輯，是先檢查 Map 中是否有對應編號的產品。若無，則回傳 404 狀態碼，代表不存在。</p><p>如果存在，就將 payload 中的欄位值，覆蓋到原有資料上。</p><h3 id="（二）DELETE-請求（刪除資源）"><a href="#（二）DELETE-請求（刪除資源）" class="headerlink" title="（二）DELETE 請求（刪除資源）"></a>（二）DELETE 請求（刪除資源）</h3><p>以下是處理 DELETE 請求，只有接收 endpoint 上的參數而已。</p><div class="code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, Product&gt; productMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();    <span class="hljs-comment">// ...</span>    <span class="hljs-meta">@DeleteMapping(&quot;/products/&#123;id&#125;&quot;)</span>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Void&gt; <span class="hljs-title function_">deleteProduct</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> String productId)</span> &#123;        <span class="hljs-keyword">if</span> (!productMap.containsKey(productId)) &#123;            <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.NOT_FOUND).build();        &#125;        productMap.remove(productId);        <span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.NO_CONTENT).build();    &#125;&#125;</code></pre></div><p>同樣會先檢查是否有對應的資料。若有，就將其從 Map 中移除。</p><p>以上的實作都完成後，讀者在 Controller 將擁有四支 RESTful API，能進行 CRUD。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch03.1-implement-restful-api-in-controller">點我</a>。</p><p>上一課：<a href="/articles/spring-boot-restful-api/" target="_blank">【Spring Boot】第2課－認識 RESTful API 與前後端的資料交換</a></p><p>下一課：<a href="/articles/spring-boot-use-query-string-and-header-in-controller/" target="_blank">【Spring Boot】第3.2課－在 Controller 接收 query string 與操作 header</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第2課－認識 RESTful API 與前後端的資料交換</title>
    <link href="/articles/spring-boot-restful-api/"/>
    <url>/articles/spring-boot-restful-api/</url>
    
    <content type="html"><![CDATA[<p>在認識前端與後端的差別後，本文將介紹它們之間的溝通媒介，即 Web API，其中又以 RESTful API 的類型最為常見。另外也會介紹查詢字串、負載（payload）、標頭及 HTTP 狀態碼，這些都是前後端所交換的資料。最後透過 Postman 這項工具，存取實際的 API。</p><p>若讀者未曾接觸後端領域，建議先從本文建立 Web API 的觀念。如此在<a href="/articles/spring-boot-implement-restful-api-in-controller/" target="_blank">第 3 課</a>開始撰寫 Spring Boot 程式，以及工作時設計 API 時，才能更加得心應手。</p><hr><h2 id="一、什麼是-API"><a href="#一、什麼是-API" class="headerlink" title="一、什麼是 API"></a>一、什麼是 API</h2><p>API 的全名是「Application Program Interface」，中文為「應用程式介面」，它定義了軟體之間的互動方式。</p><p>從廣義的角度來看，即便只是程式中寫好的一個方法（method），我們都能視為一個 API。畢竟它定義了應傳入的參數，以及回傳的值，讓我們知道如何使用。</p><p>以生活情境來比喻，我們到餐廳點餐，菜單就像是 API。雖然每家餐廳的菜單格式都長得不一樣，但只要客人會填寫，而店員或廚房也看得懂客人的點餐，整個流程便能正常進行。</p><p>如果放在前端發出請求（request），後端給予回應（response）的話題上，則 API 就是定義前端如何傳遞資料給後端，而後端又會回傳什麼結果。我們用「Web API」來稱呼。</p><p>在工作上，前端與後端的同事只要事先制定好 API，就能分頭在各自的程式專案進行開發了，雙方的程式碼也不會混在一起形成雜亂。這種做法稱為「前後端分離」，是業界工程師們推崇的模式。</p><h2 id="二、RESTful-API"><a href="#二、RESTful-API" class="headerlink" title="二、RESTful API"></a>二、RESTful API</h2><p>REST 的全名為「Representational State Transfer」，中文為「表現層狀態轉換」。它是一種 Web API 的設計風格，將網路上的東西都視為「資源」，並且有不同的操作方式。</p><h3 id="（一）HTTP-請求方法"><a href="#（一）HTTP-請求方法" class="headerlink" title="（一）HTTP 請求方法"></a>（一）HTTP 請求方法</h3><p>當使用者發出請求，意味著要對某種東西進行操作，比方說取得產品或新增使用者。操作的方式包含新增、取得、更新、刪除等，如同資料庫的操作也有 CRUD。</p><p>HTTP 協定以這個概念為基礎，定義了「請求方法」，常見的方法如下。</p><ul><li>GET：取得資源。</li><li>POST：新增資源。或是一個不容易歸類在其他方法的動作，例如登入。</li><li>PUT：更新整個資源，也就是覆寫。</li><li>PATCH：更新資源的一部份。</li><li>DELETE：刪除資源。</li></ul><h3 id="（二）表示方式"><a href="#（二）表示方式" class="headerlink" title="（二）表示方式"></a>（二）表示方式</h3><p>RESTful API 是以「動詞 + 資源」這個想法為出發點，也就是 HTTP 請求方法加上資源的位置。而資源位置的表達方式就像網址，我們以「端點」（endpoint）來稱呼它。</p><p>假設社群網站上有篇文章的編號是「P1」，那麼這項資源在網路上的位置，可能就會被設計成 <code>https://social.com/articles/P1</code>。此時搭配各種 HTTP 請求方法，即可組合出 RESTful API，表現出不同的意義。以下是一些範例。</p><ul><li>GET &#x2F;articles&#x2F;P1：取得編號為 P1 的文章。</li><li>PUT &#x2F;articles&#x2F;P1：更新編號為 P1 的文章。</li><li>DELETE &#x2F;articles&#x2F;P1：刪除編號為 P1 的文章。</li><li>POST &#x2F;articles：新增文章。</li><li>GET &#x2F;articles：取得所有文章。</li></ul><p>其中「新增文章」的 API 是沒有編號的。從語意上，已經足夠表達出要在「articles」的路徑下新增資源了。</p><p>同理，「取得所有文章」的 API 也意味著取得 articles 路徑下的所有資源。但實際開發上通常不會真的回傳 DB 中的所有資料給前端啦，應該會限制一個範圍才對。例如某個人的所有文章、某個分類的所有文章、最新的 30 篇文章等。</p><p>最後要提醒讀者的是，RESTful 並非一套要遵守的標準。只是鼓勵開發者在設計時可以參考此風格，縮短大家認知上的差異。</p><h2 id="三、在-API-攜帶資料"><a href="#三、在-API-攜帶資料" class="headerlink" title="三、在 API 攜帶資料"></a>三、在 API 攜帶資料</h2><p>前端在呼叫 API 時，可以攜帶資料給後端，而後端同樣也能回傳資料，就像在交換一樣。</p><p>以上述的 RESTful API 為例子，新增文章時勢必要傳遞內容給後端吧！又或者是想查看某人的文章，也要將這項條件告訴後端。而取得文章時，則從後端得到對應的資料。本節將介紹攜帶資料的方式。</p><h3 id="（一）查詢字串（query-string）"><a href="#（一）查詢字串（query-string）" class="headerlink" title="（一）查詢字串（query string）"></a>（一）查詢字串（query string）</h3><p>查詢字串是呼叫後端 API 時，在端點後方所攜帶的資料。舉例來說，在論壇 Dcard 查看科技業板的最新文章之列表，瀏覽器的網址是這樣：<br>「<a href="https://www.dcard.tw/f/tech_job?tab=latest">https://www.dcard.tw/f/tech_job?tab&#x3D;latest</a>」。</p><p>其中「?」符號後方的就是查詢字串，它只有「tab&#x3D;latest」一筆資料，代表最新的意思。</p><p>又或者是在 YouTube 觀看一部影片，瀏覽器的網址大概長這樣：<br>「<a href="https://www.youtube.com/watch?v=u6FcPuCs57o&=80s">https://www.youtube.com/watch?v=u6FcPuCs57o&amp;=80s</a>」。</p><p>其包含「v&#x3D;u6FcPuCs57o」與「t&#x3D;80s」兩筆資料，分別代表影片編號與開始播放的秒數。它們之間用「&amp;」符號隔開。</p><h3 id="（二）負載／酬載（payload）"><a href="#（二）負載／酬載（payload）" class="headerlink" title="（二）負載／酬載（payload）"></a>（二）負載／酬載（payload）</h3><p>負載（又稱酬載）在維基百科的解釋是：「資料傳輸中所欲傳輸的實際資訊，通常也被稱作實際資料或者資料體」。在本文，我們可以理解成前後端之間傳遞資料的「主要內容」。</p><p>前端發出請求時的 payload，亦可稱作「request body」；而後端給予回應時的 payload，也能稱為「response body」。</p><p>那麼所要傳遞的資料，應該如何提供呢？使用 JSON 和 XML 格式來表示，是較為常見的做法。筆者會以 JSON 為例來說明。</p><p>JSON 的英文全名是「JavaScript Object Notation」，是將資料寫成 Java Script 物件的樣子。以下是一份 JSON 格式的範例資料。</p><div class="code-wrapper"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>    <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;這是文章標題&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;這是文章內容&quot;</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;tag&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;閒聊&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-string">&quot;程式&quot;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>    <span class="hljs-attr">&quot;like&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>        <span class="hljs-attr">&quot;isLiked&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span>        <span class="hljs-attr">&quot;count&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">28</span>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span></code></pre></div><p>JSON 資料的內容，都是以 欄位: 值 的格式來撰寫。而物件寫成大括弧，陣列寫成中括弧。</p><h3 id="（三）標頭（header）"><a href="#（三）標頭（header）" class="headerlink" title="（三）標頭（header）"></a>（三）標頭（header）</h3><p>標頭是用來存放一些輔助資訊。以生活情境來比喻，header 彷彿信封袋上寫的資料，而 payload 則是信件內容。在 header 所能提供的資料，是有一套標準存在的。就像信封袋會寫郵遞區號、地址和收件人。</p><p>根據 header 是由前端還是後端所提供，又可分別稱呼為「request header」與「response header」。</p><p>以下舉例幾種 header。</p><ul><li>Content-Type：Payload 內容的格式。如 application&#x2F;json、image&#x2F;jpeg、text&#x2F;html、multipart&#x2F;form-data 等。</li><li>Location：資源的端點。比方說建立新資源後，後端可回傳此標頭，提供該資源的路徑。</li><li>Authorization：身份認證資訊。向後端發出請求時可攜帶，就像是出示識別證一樣。</li></ul><h2 id="四、HTTP-狀態碼"><a href="#四、HTTP-狀態碼" class="headerlink" title="四、HTTP 狀態碼"></a>四、HTTP 狀態碼</h2><p>當後端進行回應時，會用一組數字來「概略」表達結果，稱為狀態碼。前端可以簡單地從狀態碼，判斷自己下一步該做什麼事，而未必要去取用 payload 的內容。</p><p>狀態碼的第一個數字會在 1 ~ 5 之間，藉此分為五大類型。後端會在不同的狀況，使用不同的狀態碼。除了 1 系列幾乎沒人在用之外，筆者挑出一些常見的，在以下分別介紹。</p><h3 id="（一）2-系列（成功）"><a href="#（一）2-系列（成功）" class="headerlink" title="（一）2 系列（成功）"></a>（一）2 系列（成功）</h3><table><thead><tr><th>狀態碼</th><th>意義</th><th>說明</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>單純表示成功，是一種泛用的選擇。</td></tr><tr><td>201</td><td>Created</td><td>資源已經建立完成。後端可進一步在「Location」標頭提供該資源的端點，讓前端搭配 GET 請求方法取得該資料。</td></tr><tr><td>204</td><td>No Content</td><td>伺服器成功處理請求，只是回傳的 payload 沒有內容罷了。例如「按讚」這項簡單的功能，若 API 不需要回傳 payload，則不妨採用此狀態碼。</td></tr></tbody></table><h3 id="（二）3-系列（重導向）"><a href="#（二）3-系列（重導向）" class="headerlink" title="（二）3 系列（重導向）"></a>（二）3 系列（重導向）</h3><table><thead><tr><th>狀態碼</th><th>意義</th><th>說明</th></tr></thead><tbody><tr><td>301</td><td>Moved Permanently</td><td>該資源已經永久被移動到另一個地方。建議後端在「Location」標頭提供該資源的新端點。會用到此狀態的場合，可能是網頁搬家，或是端點的設計更新了（例如網址上多了一個「v2」的階層，代表版本 2）。</td></tr><tr><td>304</td><td>Not Modified</td><td>用於快取機制。假設前端先前有將某資源快取在本地，那麼若嘗試再取得資源，後端可透過此狀態，通知前端該資源的內容並未更新過，請繼續用快取的資料即可。此機制需搭配數個 header 來實作，本文不贅述。</td></tr></tbody></table><h3 id="（三）4-系列（客戶端錯誤）"><a href="#（三）4-系列（客戶端錯誤）" class="headerlink" title="（三）4 系列（客戶端錯誤）"></a>（三）4 系列（客戶端錯誤）</h3><p>代表前端發送的資料有問題。</p><table><thead><tr><th>狀態碼</th><th>意義</th><th>說明</th></tr></thead><tbody><tr><td>400</td><td>Bad Request</td><td>發送請求時所攜帶的資料有明顯錯誤。例如 email 格式不正確、價格是負數等。</td></tr><tr><td>401</td><td>Unauthorized</td><td>沒有通過身份認證，所以後端不允許使用該 API。例如沒有登入某社群網站，就無法查看裡面的任何文章。</td></tr><tr><td>403</td><td>Forbidden</td><td>即便完成身份認證，但沒有權限存取該資源。例如已經登入某社群網站，但我不是某篇文章的分享對象，所以無法觀看。</td></tr><tr><td>404</td><td>Not Found</td><td>該資源不存在。例如試圖透過編號取得一篇不存在的文章。</td></tr><tr><td>422</td><td>Unprocessable Entity</td><td>前端發送請求，單看資料內容的話是沒問題（未被判為 400），但後端處理時才發現這份資料並不符合情境。例如下單購買商品時，前端發送「以歐元付款」，結果後端發現賣方不接受這個幣別（<a href="https://pawelpluta.com/why-should-you-return-http-422/">參考資料</a>）。</td></tr></tbody></table><h3 id="（四）5-系列（服務端錯誤）"><a href="#（四）5-系列（服務端錯誤）" class="headerlink" title="（四）5 系列（服務端錯誤）"></a>（四）5 系列（服務端錯誤）</h3><p>代表後端在處理請求時發生問題。</p><table><thead><tr><th>狀態碼</th><th>意義</th><th>說明</th></tr></thead><tbody><tr><td>500</td><td>Internal Server Error</td><td>後端程式可能發生例外（exception），例如 NullPointerException 或是連不到資料庫之類的。若無更適當的狀態碼，一般狀況均可選擇這種泛用的。</td></tr><tr><td>503</td><td>Service Unavailable</td><td>代表雖然後端程式仍在運行，但因為一些原因（例如流量太大、正在維護），暫時無法提供服務了。</td></tr><tr><td>504</td><td>Gateway Timeout</td><td>後端處理請求的時間過久。然而前端一直在等待回應，不能丟著不管，故可回傳此狀態碼進行告知。</td></tr></tbody></table><h2 id="五、API-測試工具"><a href="#五、API-測試工具" class="headerlink" title="五、API 測試工具"></a>五、API 測試工具</h2><p>最後介紹一款叫做「<a href="https://www.postman.com/downloads/">Postman</a>」的工具，它能讓我們在沒有前端的情況下，存取後端提供的 Web API。</p><p>一般來說，生活中使用各種軟體都是透過操作前端畫面來存取後端 API。但有時只是想「試用」API，當下並沒有對應的前端去配合。那麼利用這類工具，我們就能發送請求，傳送自己想要的資料，藉此測試 API 的效果。</p><p>以下兩個操作範例，是「<a href="https://reqres.in/">Reqres</a>」網站免費提供的 API 測試資料。不需註冊，讀者直接使用即可。</p><p>下圖是發出 GET 請求，並搭配查詢字串。<br><img src="https://chikuwacode.github.io/articles/spring-boot-restful-api/postman-get-request.png"></p><p>下圖是發出 POST 請求，並傳送 JSON 格式的 payload。<br><img src="https://chikuwacode.github.io/articles/spring-boot-restful-api/postman-post-request.png"></p><p>從操作畫面的右方，也能看見耗時與 HTTP 狀態碼。將「Body」的下拉式選單打開，還能切換查看 response header。</p><hr><p>上一課：<a href="/articles/spring-boot-create-project/" target="_blank">【Spring Boot】第1課－從環境準備、建立專案、打包到啟動程式</a></p><p>下一課：<a href="/articles/spring-boot-implement-restful-api-in-controller/" target="_blank">【Spring Boot】第3.1課－在 Controller 實作 RESTful API</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>【Spring Boot】第1課－從環境準備、建立專案、打包到啟動程式</title>
    <link href="/articles/spring-boot-create-project/"/>
    <url>/articles/spring-boot-create-project/</url>
    
    <content type="html"><![CDATA[<p>在網路上或補習班，能找到大量手機 App 或網頁等前端開發課程。至今前端開發仍然是想轉職軟體工程師的人的首選。</p><p>但一套資訊系統，需要前端與後端結合才完整。這系列的文章，會引進筆者大學畢業以來的工作經驗和自學成果，教導讀者使用 Java 程式語言撰寫 Spring Boot 後端程式。</p><p>本文會建立一個可以啟動，但還沒有任何功能的 Spring Boot 專案，並使用 Maven 工具打包成 JAR 檔執行。</p><hr><h2 id="一、前端與後端的概念"><a href="#一、前端與後端的概念" class="headerlink" title="一、前端與後端的概念"></a>一、前端與後端的概念</h2><p>本文開頭所提到的 App 與 Web，會與使用者直接互動，在此將它們歸類於「前端」（front end）。前端會向伺服器發出網路連線請求（request），得到伺服器回覆的結果後，前端程式就進行應變，像是呈現資料或提示訊息。至於這邊的「伺服器」，則屬於後端（back end）的範疇。</p><p>我們學習程式語言時，會在開發工具上（如 Eclipse、IntelliJ IDEA）寫一些語法。接著按下執行，跑完之後，程式就結束了。但後端程式不一樣，它啟動後就一直在電腦上待命，並不會自己結束。</p><p>後端程式一收到前端的請求，就開始執行資料處理，通常還會伴隨資料庫的存取。最後將處理結果回應（response）給前端。</p><p>以生活情境來比喻，就像是我們去餐廳吃飯，跟店員點餐後，廚師就會開始製作餐點。餐點做好後，店員再送到我們面前。此時，我們是使用者，店員是前端，廚師是後端。店員送菜單給廚師，而廚師遞出餐點，就是前端與後端之間的互動。</p><p>本文介紹的「Spring Boot」，是一種後端程式的框架。所謂的框架（framework），是將複雜程式的實作細節，封裝起來後的產物。若讀者寫過前端的 Angular、Vue 或手機的 Android 程式，它們也都是一種框架。我們需要根據它們提供的程式物件或方法來開發。</p><h2 id="二、環境準備"><a href="#二、環境準備" class="headerlink" title="二、環境準備"></a>二、環境準備</h2><p>想跟著本系列文章學習 Spring Boot 開發，得先準備好需要的環境與工具。請讀者事先上網下載安裝。</p><ul><li><a href="https://www.azul.com/downloads/?package=jdk">Java 17</a>：Spring Boot 目前最新已來到第 3 版，其要求 Java 17 以上的版本。使用 Java 時，需注意授權問題。此連結是由 Azul 提供的 Zulu JDK，可商業使用。</li><li><a href="https://maven.apache.org/download.cgi">Maven</a>：這是一種專案的管理工具。用途是在程式專案中引進第三方函式庫。最後進行建置，打包成像是 JAR 檔的執行檔。</li><li><a href="https://www.jetbrains.com/idea/download">IntelliJ IDEA</a>：此為開發工具，分為社群版（community）與高級版（ultimate）。後者提供一些較強大的功能，可試用 30 天，而筆者選用免費的社群版。</li></ul><p>最後別忘了將 Java 與 Maven 安裝位置的「bin」資料夾，添加到環境變數。可在命令列分別執行 <code>java --version</code> 與 <code>mvn --version</code>，確認有顯示出版本資訊。<br><img src="https://chikuwacode.github.io/articles/spring-boot-create-project/check-java-and-maven-version-by-command.png"></p><p>題外話，下載 Java 與 Maven 時，也能像筆者一樣，透過「SDKMAN」這項工具來輔助。它可幫助我們在電腦上安裝同一套件的不同版本，並輕鬆地切換。有興趣的話，請參考「<a href="https://www.baeldung.com/java-sdkman-intro">Guide to SDKMAN!</a>」文章。</p><h2 id="三、建立-Spring-Boot-專案"><a href="#三、建立-Spring-Boot-專案" class="headerlink" title="三、建立 Spring Boot 專案"></a>三、建立 Spring Boot 專案</h2><p>Spring Boot 官方在網路上提供了實用的工具，叫做「<a href="https://start.spring.io/">Spring Initializr</a>」。它能夠幫助我們輕鬆地產生初始的程式專案。<br><img src="https://chikuwacode.github.io/articles/spring-boot-create-project/spring-initializr-example.png"></p><p>根據畫面上的項目，可以先勾選「Maven Project」、「Java 17 版本」、「Spring Boot 3.x.x 版本」與「打包成 JAR 檔」。</p><p>而「Group」、「Artifact」等區塊，可填寫足以代表公司的網域及產品名稱。其他欄位用預設值就好。</p><p>最後是圖中右方的「Dependencies」區塊，能在此加入自己已知需要的依賴，也就是前面提到的第三方函式庫。我們預先選擇「Spring Web」，因為會利用它來開發「Web API」，並啟動內建的 Tomcat 伺服器軟體，做為 Spring Boot 程式運行的載體。</p><p>完成後按下「GENERATE」，便能將專案下載回來。無論是自己練習，或是去公司工作，在開發前都會先取得像這樣的程式專案資料夾。</p><p>打開 IntelliJ 後，請在入口畫面點擊「Open」，並選擇該專案的目錄。<br><img src="https://chikuwacode.github.io/articles/spring-boot-create-project/intellij-start-page.png"></p><p>稍等一段時間，開發工具便完成開啟專案的動作了。</p><h2 id="四、專案概觀"><a href="#四、專案概觀" class="headerlink" title="四、專案概觀"></a>四、專案概觀</h2><h3 id="（一）pom-xml-檔案"><a href="#（一）pom-xml-檔案" class="headerlink" title="（一）pom.xml 檔案"></a>（一）pom.xml 檔案</h3><p>在專案中，讀者能找到「pom.xml」檔案，全名為「Project Object Model」。它是 Maven 專案的必要檔案，紀錄了一些描述和使用的第三方函式庫等。先前在 Spring Initializr 填寫的東西，可在此處這邊找到。<br><img src="https://chikuwacode.github.io/articles/spring-boot-create-project/pom-file-init.png"></p><p>其中剛剛的「Spring Web」函式庫就在圖中下方的 <code>&lt;dependencies&gt;</code> 標籤中。若讀者日後需要其他函式庫，亦可在此添加。</p><p>若更動了 pom.xml 檔，IntelliJ 右下方會出現「Maven projects need to be imported」的訊息。屆時請按下「Import Changes」，讓開發工具重新整理，或把函式庫下載回來。</p><h3 id="（二）application-properties-配置檔"><a href="#（二）application-properties-配置檔" class="headerlink" title="（二）application.properties 配置檔"></a>（二）application.properties 配置檔</h3><p>簡單來說，這份檔案可以存放一些「設定值」，例如資料庫的 IP 位址，或串接服務的帳號密碼等。這樣一來，我們就不必硬寫（hard code）在程式碼中。在<a href="/articles/spring-boot-application-properties-configuration/" target="_blank">第 7 課</a>會專門介紹。</p><p>另外，Spring Boot 本身也有自己的設定值。例如「server.port」可指定要運行在哪個埠號（port），預設是 8080。</p><div class="code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8080</span></code></pre></div><h3 id="（三）啟動類別"><a href="#（三）啟動類別" class="headerlink" title="（三）啟動類別"></a>（三）啟動類別</h3><p>接著請讀者看到「DemoApplication.java」檔案，裡面有個 <code>main</code> 方法，代表這是專案的啟動類別。筆者習慣將此類別改名為「Application」。類別上冠有 <code>@SpringBootApplication</code> 注解，代表這是啟動 Spring Boot 的類別。而 <code>SpringApplication.run</code> 方法則是進行啟動的動作。<br><img src="https://chikuwacode.github.io/articles/spring-boot-create-project/spring-boot-entrypoint-class.png"></p><p>按下程式碼行數那邊的綠色箭頭就能選擇「Run ‘Application.main( )’」來啟動程式。從下方的 Console 視窗會看見一些訊息。<br><img src="https://chikuwacode.github.io/articles/spring-boot-create-project/spring-boot-start-console.png"></p><p>首先是 Spring 的圖案，下方寫著版本。接著是第一行，提到了 Java 的版本。第三行的「Tomcat initialized with port(s): 8080 (http)」，則代表啟動時使用了內建的 Tomcat 伺服器軟體。</p><p>而最後一行的「Started Application in XXX seconds…」，代表已經啟動完畢，可以接受請求。</p><h2 id="五、打包專案"><a href="#五、打包專案" class="headerlink" title="五、打包專案"></a>五、打包專案</h2><p>將開發成果交付出去後，若要正式運行後端程式，並不會是開啟 IntelliJ，按 Run 之後擺著。本節讓我們將打包出一個 JAR 檔，這樣在任何有安裝 Java 的環境（包含 Linux 系統），都可以啟動它。</p><p>請先在命令列環境（如 Windows 的命令提示字元）切換到專案的根目錄，也就是 pom.xml 檔的位置。接著執行 <code>mvn clean package</code> 指令，即可開始打包，稍等一段時間就完成了。</p><p>事實上，IntelliJ 本身也有自帶終端機（Terminal）的視窗，讀者可直接使用。</p><p>上述的 Maven 指令有 <code>clean</code> 與 <code>package</code> 這兩項操作，它們的目的如下。</p><ul><li><code>package</code>：將專案中的 .java 檔，編譯成 .class 檔。接著連同靜態資源（如圖片檔）與配置檔（如 application.properties），一同打包進 JAR 檔。這些產出會放在叫做「target」的資料夾內。</li><li><code>clean</code>：將 target 資料夾清空，避免比較舊的檔案被打包進 JAR 檔，導致運行起來發生非預期的情況。</li></ul><p>讀者可在專案的 target 資料夾中找到一個 JAR 檔。若要執行它，請在切換到 JAR 檔的所在位置，執行 <code>java -jar &#123;JAR檔名稱&#125;</code> 指令，如下圖。<br><img src="https://chikuwacode.github.io/articles/spring-boot-create-project/spring-boot-execute-jar-file.png"></p><p>在命令列上出現的訊息，與先前在 IntelliJ 上執行是相同的。若要停止程式，按下「Ctrl + C」即可。</p><hr><p>本文的完成後專案，請<a href="https://github.com/ntub46010/SpringBootTutorial/tree/Ch01-create-project">點我</a>。</p><p>下一課：<a href="/articles/spring-boot-restful-api/" target="_blank">【Spring Boot】第2課－認識 RESTful API 與前後端的資料交換</a></p>]]></content>
    
    
    <categories>
      
      <category>Spring Boot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
